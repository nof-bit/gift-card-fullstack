
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GiftCardScalarFieldEnum = {
  id: 'id',
  card_name: 'card_name',
  vendor: 'vendor',
  balance: 'balance',
  expiry_date: 'expiry_date',
  is_archived: 'is_archived',
  card_type: 'card_type',
  created_by: 'created_by',
  owner_email: 'owner_email',
  created_date: 'created_date',
  updated_date: 'updated_date'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  gift_card_id: 'gift_card_id',
  amount: 'amount',
  note: 'note',
  user_email: 'user_email',
  timestamp: 'timestamp'
};

exports.Prisma.GiftCardTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  color: 'color'
};

exports.Prisma.ArchivedCardScalarFieldEnum = {
  id: 'id',
  original_card_id: 'original_card_id',
  card_name: 'card_name',
  shared_with_email: 'shared_with_email',
  shared_with_group_id: 'shared_with_group_id',
  created_by: 'created_by',
  data: 'data',
  archived_date: 'archived_date',
  created_date: 'created_date'
};

exports.Prisma.SharedCardScalarFieldEnum = {
  id: 'id',
  card_id: 'card_id',
  user_email: 'user_email',
  shared_with: 'shared_with',
  group_id: 'group_id',
  shared_with_group_id: 'shared_with_group_id',
  created_by: 'created_by',
  balance: 'balance',
  card_name: 'card_name',
  vendor: 'vendor',
  expiry_date: 'expiry_date',
  card_type: 'card_type',
  data: 'data',
  created_date: 'created_date'
};

exports.Prisma.UserCardTypeScalarFieldEnum = {
  id: 'id',
  user_email: 'user_email',
  name: 'name',
  color: 'color',
  type_color: 'type_color',
  supported_stores: 'supported_stores'
};

exports.Prisma.CardActivityLogScalarFieldEnum = {
  id: 'id',
  card_id: 'card_id',
  card_type_field: 'card_type_field',
  action: 'action',
  user_email: 'user_email',
  user_name: 'user_name',
  details: 'details',
  timestamp: 'timestamp'
};

exports.Prisma.ArchiveRequestScalarFieldEnum = {
  id: 'id',
  card_id: 'card_id',
  requester_email: 'requester_email',
  status: 'status',
  details: 'details',
  createdAt: 'createdAt'
};

exports.Prisma.GroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  group_name: 'group_name',
  members: 'members',
  created_by: 'created_by',
  owner_email: 'owner_email',
  created_date: 'created_date'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  card_id: 'card_id',
  card_name: 'card_name',
  recipient_email: 'recipient_email',
  notification_type: 'notification_type',
  is_read: 'is_read',
  is_dismissed: 'is_dismissed',
  data: 'data',
  created_date: 'created_date'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  GiftCard: 'GiftCard',
  Transaction: 'Transaction',
  GiftCardType: 'GiftCardType',
  ArchivedCard: 'ArchivedCard',
  SharedCard: 'SharedCard',
  UserCardType: 'UserCardType',
  CardActivityLog: 'CardActivityLog',
  ArchiveRequest: 'ArchiveRequest',
  Group: 'Group',
  Notification: 'Notification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
