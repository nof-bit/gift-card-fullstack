
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model GiftCard
 * 
 */
export type GiftCard = $Result.DefaultSelection<Prisma.$GiftCardPayload>
/**
 * Model Transaction
 * 
 */
export type Transaction = $Result.DefaultSelection<Prisma.$TransactionPayload>
/**
 * Model GiftCardType
 * 
 */
export type GiftCardType = $Result.DefaultSelection<Prisma.$GiftCardTypePayload>
/**
 * Model ArchivedCard
 * 
 */
export type ArchivedCard = $Result.DefaultSelection<Prisma.$ArchivedCardPayload>
/**
 * Model SharedCard
 * 
 */
export type SharedCard = $Result.DefaultSelection<Prisma.$SharedCardPayload>
/**
 * Model UserCardType
 * 
 */
export type UserCardType = $Result.DefaultSelection<Prisma.$UserCardTypePayload>
/**
 * Model CardActivityLog
 * 
 */
export type CardActivityLog = $Result.DefaultSelection<Prisma.$CardActivityLogPayload>
/**
 * Model ArchiveRequest
 * 
 */
export type ArchiveRequest = $Result.DefaultSelection<Prisma.$ArchiveRequestPayload>
/**
 * Model Group
 * 
 */
export type Group = $Result.DefaultSelection<Prisma.$GroupPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Store
 * 
 */
export type Store = $Result.DefaultSelection<Prisma.$StorePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.giftCard`: Exposes CRUD operations for the **GiftCard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GiftCards
    * const giftCards = await prisma.giftCard.findMany()
    * ```
    */
  get giftCard(): Prisma.GiftCardDelegate<ExtArgs>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<ExtArgs>;

  /**
   * `prisma.giftCardType`: Exposes CRUD operations for the **GiftCardType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GiftCardTypes
    * const giftCardTypes = await prisma.giftCardType.findMany()
    * ```
    */
  get giftCardType(): Prisma.GiftCardTypeDelegate<ExtArgs>;

  /**
   * `prisma.archivedCard`: Exposes CRUD operations for the **ArchivedCard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ArchivedCards
    * const archivedCards = await prisma.archivedCard.findMany()
    * ```
    */
  get archivedCard(): Prisma.ArchivedCardDelegate<ExtArgs>;

  /**
   * `prisma.sharedCard`: Exposes CRUD operations for the **SharedCard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SharedCards
    * const sharedCards = await prisma.sharedCard.findMany()
    * ```
    */
  get sharedCard(): Prisma.SharedCardDelegate<ExtArgs>;

  /**
   * `prisma.userCardType`: Exposes CRUD operations for the **UserCardType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserCardTypes
    * const userCardTypes = await prisma.userCardType.findMany()
    * ```
    */
  get userCardType(): Prisma.UserCardTypeDelegate<ExtArgs>;

  /**
   * `prisma.cardActivityLog`: Exposes CRUD operations for the **CardActivityLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CardActivityLogs
    * const cardActivityLogs = await prisma.cardActivityLog.findMany()
    * ```
    */
  get cardActivityLog(): Prisma.CardActivityLogDelegate<ExtArgs>;

  /**
   * `prisma.archiveRequest`: Exposes CRUD operations for the **ArchiveRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ArchiveRequests
    * const archiveRequests = await prisma.archiveRequest.findMany()
    * ```
    */
  get archiveRequest(): Prisma.ArchiveRequestDelegate<ExtArgs>;

  /**
   * `prisma.group`: Exposes CRUD operations for the **Group** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups
    * const groups = await prisma.group.findMany()
    * ```
    */
  get group(): Prisma.GroupDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.store`: Exposes CRUD operations for the **Store** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stores
    * const stores = await prisma.store.findMany()
    * ```
    */
  get store(): Prisma.StoreDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    GiftCard: 'GiftCard',
    Transaction: 'Transaction',
    GiftCardType: 'GiftCardType',
    ArchivedCard: 'ArchivedCard',
    SharedCard: 'SharedCard',
    UserCardType: 'UserCardType',
    CardActivityLog: 'CardActivityLog',
    ArchiveRequest: 'ArchiveRequest',
    Group: 'Group',
    Notification: 'Notification',
    Store: 'Store'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "giftCard" | "transaction" | "giftCardType" | "archivedCard" | "sharedCard" | "userCardType" | "cardActivityLog" | "archiveRequest" | "group" | "notification" | "store"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      GiftCard: {
        payload: Prisma.$GiftCardPayload<ExtArgs>
        fields: Prisma.GiftCardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GiftCardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftCardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GiftCardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftCardPayload>
          }
          findFirst: {
            args: Prisma.GiftCardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftCardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GiftCardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftCardPayload>
          }
          findMany: {
            args: Prisma.GiftCardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftCardPayload>[]
          }
          create: {
            args: Prisma.GiftCardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftCardPayload>
          }
          createMany: {
            args: Prisma.GiftCardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GiftCardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftCardPayload>[]
          }
          delete: {
            args: Prisma.GiftCardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftCardPayload>
          }
          update: {
            args: Prisma.GiftCardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftCardPayload>
          }
          deleteMany: {
            args: Prisma.GiftCardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GiftCardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GiftCardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftCardPayload>
          }
          aggregate: {
            args: Prisma.GiftCardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGiftCard>
          }
          groupBy: {
            args: Prisma.GiftCardGroupByArgs<ExtArgs>
            result: $Utils.Optional<GiftCardGroupByOutputType>[]
          }
          count: {
            args: Prisma.GiftCardCountArgs<ExtArgs>
            result: $Utils.Optional<GiftCardCountAggregateOutputType> | number
          }
        }
      }
      Transaction: {
        payload: Prisma.$TransactionPayload<ExtArgs>
        fields: Prisma.TransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findFirst: {
            args: Prisma.TransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findMany: {
            args: Prisma.TransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          create: {
            args: Prisma.TransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          createMany: {
            args: Prisma.TransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          delete: {
            args: Prisma.TransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          update: {
            args: Prisma.TransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          deleteMany: {
            args: Prisma.TransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          aggregate: {
            args: Prisma.TransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransaction>
          }
          groupBy: {
            args: Prisma.TransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionCountAggregateOutputType> | number
          }
        }
      }
      GiftCardType: {
        payload: Prisma.$GiftCardTypePayload<ExtArgs>
        fields: Prisma.GiftCardTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GiftCardTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftCardTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GiftCardTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftCardTypePayload>
          }
          findFirst: {
            args: Prisma.GiftCardTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftCardTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GiftCardTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftCardTypePayload>
          }
          findMany: {
            args: Prisma.GiftCardTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftCardTypePayload>[]
          }
          create: {
            args: Prisma.GiftCardTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftCardTypePayload>
          }
          createMany: {
            args: Prisma.GiftCardTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GiftCardTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftCardTypePayload>[]
          }
          delete: {
            args: Prisma.GiftCardTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftCardTypePayload>
          }
          update: {
            args: Prisma.GiftCardTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftCardTypePayload>
          }
          deleteMany: {
            args: Prisma.GiftCardTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GiftCardTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GiftCardTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GiftCardTypePayload>
          }
          aggregate: {
            args: Prisma.GiftCardTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGiftCardType>
          }
          groupBy: {
            args: Prisma.GiftCardTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<GiftCardTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.GiftCardTypeCountArgs<ExtArgs>
            result: $Utils.Optional<GiftCardTypeCountAggregateOutputType> | number
          }
        }
      }
      ArchivedCard: {
        payload: Prisma.$ArchivedCardPayload<ExtArgs>
        fields: Prisma.ArchivedCardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArchivedCardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedCardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArchivedCardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedCardPayload>
          }
          findFirst: {
            args: Prisma.ArchivedCardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedCardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArchivedCardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedCardPayload>
          }
          findMany: {
            args: Prisma.ArchivedCardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedCardPayload>[]
          }
          create: {
            args: Prisma.ArchivedCardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedCardPayload>
          }
          createMany: {
            args: Prisma.ArchivedCardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ArchivedCardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedCardPayload>[]
          }
          delete: {
            args: Prisma.ArchivedCardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedCardPayload>
          }
          update: {
            args: Prisma.ArchivedCardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedCardPayload>
          }
          deleteMany: {
            args: Prisma.ArchivedCardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ArchivedCardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ArchivedCardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchivedCardPayload>
          }
          aggregate: {
            args: Prisma.ArchivedCardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArchivedCard>
          }
          groupBy: {
            args: Prisma.ArchivedCardGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArchivedCardGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArchivedCardCountArgs<ExtArgs>
            result: $Utils.Optional<ArchivedCardCountAggregateOutputType> | number
          }
        }
      }
      SharedCard: {
        payload: Prisma.$SharedCardPayload<ExtArgs>
        fields: Prisma.SharedCardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SharedCardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharedCardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SharedCardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharedCardPayload>
          }
          findFirst: {
            args: Prisma.SharedCardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharedCardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SharedCardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharedCardPayload>
          }
          findMany: {
            args: Prisma.SharedCardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharedCardPayload>[]
          }
          create: {
            args: Prisma.SharedCardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharedCardPayload>
          }
          createMany: {
            args: Prisma.SharedCardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SharedCardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharedCardPayload>[]
          }
          delete: {
            args: Prisma.SharedCardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharedCardPayload>
          }
          update: {
            args: Prisma.SharedCardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharedCardPayload>
          }
          deleteMany: {
            args: Prisma.SharedCardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SharedCardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SharedCardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharedCardPayload>
          }
          aggregate: {
            args: Prisma.SharedCardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSharedCard>
          }
          groupBy: {
            args: Prisma.SharedCardGroupByArgs<ExtArgs>
            result: $Utils.Optional<SharedCardGroupByOutputType>[]
          }
          count: {
            args: Prisma.SharedCardCountArgs<ExtArgs>
            result: $Utils.Optional<SharedCardCountAggregateOutputType> | number
          }
        }
      }
      UserCardType: {
        payload: Prisma.$UserCardTypePayload<ExtArgs>
        fields: Prisma.UserCardTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserCardTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserCardTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardTypePayload>
          }
          findFirst: {
            args: Prisma.UserCardTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserCardTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardTypePayload>
          }
          findMany: {
            args: Prisma.UserCardTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardTypePayload>[]
          }
          create: {
            args: Prisma.UserCardTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardTypePayload>
          }
          createMany: {
            args: Prisma.UserCardTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCardTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardTypePayload>[]
          }
          delete: {
            args: Prisma.UserCardTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardTypePayload>
          }
          update: {
            args: Prisma.UserCardTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardTypePayload>
          }
          deleteMany: {
            args: Prisma.UserCardTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserCardTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserCardTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardTypePayload>
          }
          aggregate: {
            args: Prisma.UserCardTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserCardType>
          }
          groupBy: {
            args: Prisma.UserCardTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserCardTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCardTypeCountArgs<ExtArgs>
            result: $Utils.Optional<UserCardTypeCountAggregateOutputType> | number
          }
        }
      }
      CardActivityLog: {
        payload: Prisma.$CardActivityLogPayload<ExtArgs>
        fields: Prisma.CardActivityLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CardActivityLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardActivityLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CardActivityLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardActivityLogPayload>
          }
          findFirst: {
            args: Prisma.CardActivityLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardActivityLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CardActivityLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardActivityLogPayload>
          }
          findMany: {
            args: Prisma.CardActivityLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardActivityLogPayload>[]
          }
          create: {
            args: Prisma.CardActivityLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardActivityLogPayload>
          }
          createMany: {
            args: Prisma.CardActivityLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CardActivityLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardActivityLogPayload>[]
          }
          delete: {
            args: Prisma.CardActivityLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardActivityLogPayload>
          }
          update: {
            args: Prisma.CardActivityLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardActivityLogPayload>
          }
          deleteMany: {
            args: Prisma.CardActivityLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CardActivityLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CardActivityLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardActivityLogPayload>
          }
          aggregate: {
            args: Prisma.CardActivityLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCardActivityLog>
          }
          groupBy: {
            args: Prisma.CardActivityLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<CardActivityLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.CardActivityLogCountArgs<ExtArgs>
            result: $Utils.Optional<CardActivityLogCountAggregateOutputType> | number
          }
        }
      }
      ArchiveRequest: {
        payload: Prisma.$ArchiveRequestPayload<ExtArgs>
        fields: Prisma.ArchiveRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArchiveRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchiveRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArchiveRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchiveRequestPayload>
          }
          findFirst: {
            args: Prisma.ArchiveRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchiveRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArchiveRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchiveRequestPayload>
          }
          findMany: {
            args: Prisma.ArchiveRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchiveRequestPayload>[]
          }
          create: {
            args: Prisma.ArchiveRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchiveRequestPayload>
          }
          createMany: {
            args: Prisma.ArchiveRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ArchiveRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchiveRequestPayload>[]
          }
          delete: {
            args: Prisma.ArchiveRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchiveRequestPayload>
          }
          update: {
            args: Prisma.ArchiveRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchiveRequestPayload>
          }
          deleteMany: {
            args: Prisma.ArchiveRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ArchiveRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ArchiveRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArchiveRequestPayload>
          }
          aggregate: {
            args: Prisma.ArchiveRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArchiveRequest>
          }
          groupBy: {
            args: Prisma.ArchiveRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArchiveRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArchiveRequestCountArgs<ExtArgs>
            result: $Utils.Optional<ArchiveRequestCountAggregateOutputType> | number
          }
        }
      }
      Group: {
        payload: Prisma.$GroupPayload<ExtArgs>
        fields: Prisma.GroupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GroupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          findFirst: {
            args: Prisma.GroupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          findMany: {
            args: Prisma.GroupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>[]
          }
          create: {
            args: Prisma.GroupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          createMany: {
            args: Prisma.GroupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GroupCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>[]
          }
          delete: {
            args: Prisma.GroupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          update: {
            args: Prisma.GroupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          deleteMany: {
            args: Prisma.GroupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GroupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GroupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          aggregate: {
            args: Prisma.GroupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGroup>
          }
          groupBy: {
            args: Prisma.GroupGroupByArgs<ExtArgs>
            result: $Utils.Optional<GroupGroupByOutputType>[]
          }
          count: {
            args: Prisma.GroupCountArgs<ExtArgs>
            result: $Utils.Optional<GroupCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Store: {
        payload: Prisma.$StorePayload<ExtArgs>
        fields: Prisma.StoreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StoreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StoreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          findFirst: {
            args: Prisma.StoreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StoreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          findMany: {
            args: Prisma.StoreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>[]
          }
          create: {
            args: Prisma.StoreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          createMany: {
            args: Prisma.StoreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StoreCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>[]
          }
          delete: {
            args: Prisma.StoreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          update: {
            args: Prisma.StoreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          deleteMany: {
            args: Prisma.StoreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StoreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StoreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          aggregate: {
            args: Prisma.StoreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStore>
          }
          groupBy: {
            args: Prisma.StoreGroupByArgs<ExtArgs>
            result: $Utils.Optional<StoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.StoreCountArgs<ExtArgs>
            result: $Utils.Optional<StoreCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    googleId: string | null
    passwordResetToken: string | null
    passwordResetExpires: Date | null
    isAdmin: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    googleId: string | null
    passwordResetToken: string | null
    passwordResetExpires: Date | null
    isAdmin: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    googleId: number
    passwordResetToken: number
    passwordResetExpires: number
    isAdmin: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    googleId?: true
    passwordResetToken?: true
    passwordResetExpires?: true
    isAdmin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    googleId?: true
    passwordResetToken?: true
    passwordResetExpires?: true
    isAdmin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    googleId?: true
    passwordResetToken?: true
    passwordResetExpires?: true
    isAdmin?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string | null
    name: string
    googleId: string | null
    passwordResetToken: string | null
    passwordResetExpires: Date | null
    isAdmin: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    googleId?: boolean
    passwordResetToken?: boolean
    passwordResetExpires?: boolean
    isAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    googleId?: boolean
    passwordResetToken?: boolean
    passwordResetExpires?: boolean
    isAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    googleId?: boolean
    passwordResetToken?: boolean
    passwordResetExpires?: boolean
    isAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string | null
      name: string
      googleId: string | null
      passwordResetToken: string | null
      passwordResetExpires: Date | null
      isAdmin: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly googleId: FieldRef<"User", 'String'>
    readonly passwordResetToken: FieldRef<"User", 'String'>
    readonly passwordResetExpires: FieldRef<"User", 'DateTime'>
    readonly isAdmin: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
  }


  /**
   * Model GiftCard
   */

  export type AggregateGiftCard = {
    _count: GiftCardCountAggregateOutputType | null
    _avg: GiftCardAvgAggregateOutputType | null
    _sum: GiftCardSumAggregateOutputType | null
    _min: GiftCardMinAggregateOutputType | null
    _max: GiftCardMaxAggregateOutputType | null
  }

  export type GiftCardAvgAggregateOutputType = {
    id: number | null
    balance: number | null
  }

  export type GiftCardSumAggregateOutputType = {
    id: number | null
    balance: number | null
  }

  export type GiftCardMinAggregateOutputType = {
    id: number | null
    card_name: string | null
    vendor: string | null
    balance: number | null
    expiry_date: Date | null
    is_archived: boolean | null
    card_type: string | null
    card_number: string | null
    cvv: string | null
    activation_code: string | null
    online_page_url: string | null
    notes: string | null
    card_image_url: string | null
    purchase_date: Date | null
    card_color: string | null
    created_by: string | null
    owner_email: string | null
    created_date: Date | null
    updated_date: Date | null
  }

  export type GiftCardMaxAggregateOutputType = {
    id: number | null
    card_name: string | null
    vendor: string | null
    balance: number | null
    expiry_date: Date | null
    is_archived: boolean | null
    card_type: string | null
    card_number: string | null
    cvv: string | null
    activation_code: string | null
    online_page_url: string | null
    notes: string | null
    card_image_url: string | null
    purchase_date: Date | null
    card_color: string | null
    created_by: string | null
    owner_email: string | null
    created_date: Date | null
    updated_date: Date | null
  }

  export type GiftCardCountAggregateOutputType = {
    id: number
    card_name: number
    vendor: number
    balance: number
    expiry_date: number
    is_archived: number
    card_type: number
    card_number: number
    cvv: number
    activation_code: number
    online_page_url: number
    notes: number
    card_image_url: number
    purchase_date: number
    card_color: number
    created_by: number
    owner_email: number
    created_date: number
    updated_date: number
    _all: number
  }


  export type GiftCardAvgAggregateInputType = {
    id?: true
    balance?: true
  }

  export type GiftCardSumAggregateInputType = {
    id?: true
    balance?: true
  }

  export type GiftCardMinAggregateInputType = {
    id?: true
    card_name?: true
    vendor?: true
    balance?: true
    expiry_date?: true
    is_archived?: true
    card_type?: true
    card_number?: true
    cvv?: true
    activation_code?: true
    online_page_url?: true
    notes?: true
    card_image_url?: true
    purchase_date?: true
    card_color?: true
    created_by?: true
    owner_email?: true
    created_date?: true
    updated_date?: true
  }

  export type GiftCardMaxAggregateInputType = {
    id?: true
    card_name?: true
    vendor?: true
    balance?: true
    expiry_date?: true
    is_archived?: true
    card_type?: true
    card_number?: true
    cvv?: true
    activation_code?: true
    online_page_url?: true
    notes?: true
    card_image_url?: true
    purchase_date?: true
    card_color?: true
    created_by?: true
    owner_email?: true
    created_date?: true
    updated_date?: true
  }

  export type GiftCardCountAggregateInputType = {
    id?: true
    card_name?: true
    vendor?: true
    balance?: true
    expiry_date?: true
    is_archived?: true
    card_type?: true
    card_number?: true
    cvv?: true
    activation_code?: true
    online_page_url?: true
    notes?: true
    card_image_url?: true
    purchase_date?: true
    card_color?: true
    created_by?: true
    owner_email?: true
    created_date?: true
    updated_date?: true
    _all?: true
  }

  export type GiftCardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GiftCard to aggregate.
     */
    where?: GiftCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GiftCards to fetch.
     */
    orderBy?: GiftCardOrderByWithRelationInput | GiftCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GiftCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GiftCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GiftCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GiftCards
    **/
    _count?: true | GiftCardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GiftCardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GiftCardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GiftCardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GiftCardMaxAggregateInputType
  }

  export type GetGiftCardAggregateType<T extends GiftCardAggregateArgs> = {
        [P in keyof T & keyof AggregateGiftCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGiftCard[P]>
      : GetScalarType<T[P], AggregateGiftCard[P]>
  }




  export type GiftCardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GiftCardWhereInput
    orderBy?: GiftCardOrderByWithAggregationInput | GiftCardOrderByWithAggregationInput[]
    by: GiftCardScalarFieldEnum[] | GiftCardScalarFieldEnum
    having?: GiftCardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GiftCardCountAggregateInputType | true
    _avg?: GiftCardAvgAggregateInputType
    _sum?: GiftCardSumAggregateInputType
    _min?: GiftCardMinAggregateInputType
    _max?: GiftCardMaxAggregateInputType
  }

  export type GiftCardGroupByOutputType = {
    id: number
    card_name: string
    vendor: string | null
    balance: number | null
    expiry_date: Date | null
    is_archived: boolean
    card_type: string | null
    card_number: string | null
    cvv: string | null
    activation_code: string | null
    online_page_url: string | null
    notes: string | null
    card_image_url: string | null
    purchase_date: Date | null
    card_color: string | null
    created_by: string | null
    owner_email: string | null
    created_date: Date
    updated_date: Date
    _count: GiftCardCountAggregateOutputType | null
    _avg: GiftCardAvgAggregateOutputType | null
    _sum: GiftCardSumAggregateOutputType | null
    _min: GiftCardMinAggregateOutputType | null
    _max: GiftCardMaxAggregateOutputType | null
  }

  type GetGiftCardGroupByPayload<T extends GiftCardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GiftCardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GiftCardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GiftCardGroupByOutputType[P]>
            : GetScalarType<T[P], GiftCardGroupByOutputType[P]>
        }
      >
    >


  export type GiftCardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    card_name?: boolean
    vendor?: boolean
    balance?: boolean
    expiry_date?: boolean
    is_archived?: boolean
    card_type?: boolean
    card_number?: boolean
    cvv?: boolean
    activation_code?: boolean
    online_page_url?: boolean
    notes?: boolean
    card_image_url?: boolean
    purchase_date?: boolean
    card_color?: boolean
    created_by?: boolean
    owner_email?: boolean
    created_date?: boolean
    updated_date?: boolean
  }, ExtArgs["result"]["giftCard"]>

  export type GiftCardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    card_name?: boolean
    vendor?: boolean
    balance?: boolean
    expiry_date?: boolean
    is_archived?: boolean
    card_type?: boolean
    card_number?: boolean
    cvv?: boolean
    activation_code?: boolean
    online_page_url?: boolean
    notes?: boolean
    card_image_url?: boolean
    purchase_date?: boolean
    card_color?: boolean
    created_by?: boolean
    owner_email?: boolean
    created_date?: boolean
    updated_date?: boolean
  }, ExtArgs["result"]["giftCard"]>

  export type GiftCardSelectScalar = {
    id?: boolean
    card_name?: boolean
    vendor?: boolean
    balance?: boolean
    expiry_date?: boolean
    is_archived?: boolean
    card_type?: boolean
    card_number?: boolean
    cvv?: boolean
    activation_code?: boolean
    online_page_url?: boolean
    notes?: boolean
    card_image_url?: boolean
    purchase_date?: boolean
    card_color?: boolean
    created_by?: boolean
    owner_email?: boolean
    created_date?: boolean
    updated_date?: boolean
  }


  export type $GiftCardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GiftCard"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      card_name: string
      vendor: string | null
      balance: number | null
      expiry_date: Date | null
      is_archived: boolean
      card_type: string | null
      card_number: string | null
      cvv: string | null
      activation_code: string | null
      online_page_url: string | null
      notes: string | null
      card_image_url: string | null
      purchase_date: Date | null
      card_color: string | null
      created_by: string | null
      owner_email: string | null
      created_date: Date
      updated_date: Date
    }, ExtArgs["result"]["giftCard"]>
    composites: {}
  }

  type GiftCardGetPayload<S extends boolean | null | undefined | GiftCardDefaultArgs> = $Result.GetResult<Prisma.$GiftCardPayload, S>

  type GiftCardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GiftCardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GiftCardCountAggregateInputType | true
    }

  export interface GiftCardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GiftCard'], meta: { name: 'GiftCard' } }
    /**
     * Find zero or one GiftCard that matches the filter.
     * @param {GiftCardFindUniqueArgs} args - Arguments to find a GiftCard
     * @example
     * // Get one GiftCard
     * const giftCard = await prisma.giftCard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GiftCardFindUniqueArgs>(args: SelectSubset<T, GiftCardFindUniqueArgs<ExtArgs>>): Prisma__GiftCardClient<$Result.GetResult<Prisma.$GiftCardPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GiftCard that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GiftCardFindUniqueOrThrowArgs} args - Arguments to find a GiftCard
     * @example
     * // Get one GiftCard
     * const giftCard = await prisma.giftCard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GiftCardFindUniqueOrThrowArgs>(args: SelectSubset<T, GiftCardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GiftCardClient<$Result.GetResult<Prisma.$GiftCardPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GiftCard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiftCardFindFirstArgs} args - Arguments to find a GiftCard
     * @example
     * // Get one GiftCard
     * const giftCard = await prisma.giftCard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GiftCardFindFirstArgs>(args?: SelectSubset<T, GiftCardFindFirstArgs<ExtArgs>>): Prisma__GiftCardClient<$Result.GetResult<Prisma.$GiftCardPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GiftCard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiftCardFindFirstOrThrowArgs} args - Arguments to find a GiftCard
     * @example
     * // Get one GiftCard
     * const giftCard = await prisma.giftCard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GiftCardFindFirstOrThrowArgs>(args?: SelectSubset<T, GiftCardFindFirstOrThrowArgs<ExtArgs>>): Prisma__GiftCardClient<$Result.GetResult<Prisma.$GiftCardPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GiftCards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiftCardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GiftCards
     * const giftCards = await prisma.giftCard.findMany()
     * 
     * // Get first 10 GiftCards
     * const giftCards = await prisma.giftCard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const giftCardWithIdOnly = await prisma.giftCard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GiftCardFindManyArgs>(args?: SelectSubset<T, GiftCardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GiftCardPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GiftCard.
     * @param {GiftCardCreateArgs} args - Arguments to create a GiftCard.
     * @example
     * // Create one GiftCard
     * const GiftCard = await prisma.giftCard.create({
     *   data: {
     *     // ... data to create a GiftCard
     *   }
     * })
     * 
     */
    create<T extends GiftCardCreateArgs>(args: SelectSubset<T, GiftCardCreateArgs<ExtArgs>>): Prisma__GiftCardClient<$Result.GetResult<Prisma.$GiftCardPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GiftCards.
     * @param {GiftCardCreateManyArgs} args - Arguments to create many GiftCards.
     * @example
     * // Create many GiftCards
     * const giftCard = await prisma.giftCard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GiftCardCreateManyArgs>(args?: SelectSubset<T, GiftCardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GiftCards and returns the data saved in the database.
     * @param {GiftCardCreateManyAndReturnArgs} args - Arguments to create many GiftCards.
     * @example
     * // Create many GiftCards
     * const giftCard = await prisma.giftCard.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GiftCards and only return the `id`
     * const giftCardWithIdOnly = await prisma.giftCard.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GiftCardCreateManyAndReturnArgs>(args?: SelectSubset<T, GiftCardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GiftCardPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GiftCard.
     * @param {GiftCardDeleteArgs} args - Arguments to delete one GiftCard.
     * @example
     * // Delete one GiftCard
     * const GiftCard = await prisma.giftCard.delete({
     *   where: {
     *     // ... filter to delete one GiftCard
     *   }
     * })
     * 
     */
    delete<T extends GiftCardDeleteArgs>(args: SelectSubset<T, GiftCardDeleteArgs<ExtArgs>>): Prisma__GiftCardClient<$Result.GetResult<Prisma.$GiftCardPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GiftCard.
     * @param {GiftCardUpdateArgs} args - Arguments to update one GiftCard.
     * @example
     * // Update one GiftCard
     * const giftCard = await prisma.giftCard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GiftCardUpdateArgs>(args: SelectSubset<T, GiftCardUpdateArgs<ExtArgs>>): Prisma__GiftCardClient<$Result.GetResult<Prisma.$GiftCardPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GiftCards.
     * @param {GiftCardDeleteManyArgs} args - Arguments to filter GiftCards to delete.
     * @example
     * // Delete a few GiftCards
     * const { count } = await prisma.giftCard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GiftCardDeleteManyArgs>(args?: SelectSubset<T, GiftCardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GiftCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiftCardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GiftCards
     * const giftCard = await prisma.giftCard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GiftCardUpdateManyArgs>(args: SelectSubset<T, GiftCardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GiftCard.
     * @param {GiftCardUpsertArgs} args - Arguments to update or create a GiftCard.
     * @example
     * // Update or create a GiftCard
     * const giftCard = await prisma.giftCard.upsert({
     *   create: {
     *     // ... data to create a GiftCard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GiftCard we want to update
     *   }
     * })
     */
    upsert<T extends GiftCardUpsertArgs>(args: SelectSubset<T, GiftCardUpsertArgs<ExtArgs>>): Prisma__GiftCardClient<$Result.GetResult<Prisma.$GiftCardPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GiftCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiftCardCountArgs} args - Arguments to filter GiftCards to count.
     * @example
     * // Count the number of GiftCards
     * const count = await prisma.giftCard.count({
     *   where: {
     *     // ... the filter for the GiftCards we want to count
     *   }
     * })
    **/
    count<T extends GiftCardCountArgs>(
      args?: Subset<T, GiftCardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GiftCardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GiftCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiftCardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GiftCardAggregateArgs>(args: Subset<T, GiftCardAggregateArgs>): Prisma.PrismaPromise<GetGiftCardAggregateType<T>>

    /**
     * Group by GiftCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiftCardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GiftCardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GiftCardGroupByArgs['orderBy'] }
        : { orderBy?: GiftCardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GiftCardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGiftCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GiftCard model
   */
  readonly fields: GiftCardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GiftCard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GiftCardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GiftCard model
   */ 
  interface GiftCardFieldRefs {
    readonly id: FieldRef<"GiftCard", 'Int'>
    readonly card_name: FieldRef<"GiftCard", 'String'>
    readonly vendor: FieldRef<"GiftCard", 'String'>
    readonly balance: FieldRef<"GiftCard", 'Int'>
    readonly expiry_date: FieldRef<"GiftCard", 'DateTime'>
    readonly is_archived: FieldRef<"GiftCard", 'Boolean'>
    readonly card_type: FieldRef<"GiftCard", 'String'>
    readonly card_number: FieldRef<"GiftCard", 'String'>
    readonly cvv: FieldRef<"GiftCard", 'String'>
    readonly activation_code: FieldRef<"GiftCard", 'String'>
    readonly online_page_url: FieldRef<"GiftCard", 'String'>
    readonly notes: FieldRef<"GiftCard", 'String'>
    readonly card_image_url: FieldRef<"GiftCard", 'String'>
    readonly purchase_date: FieldRef<"GiftCard", 'DateTime'>
    readonly card_color: FieldRef<"GiftCard", 'String'>
    readonly created_by: FieldRef<"GiftCard", 'String'>
    readonly owner_email: FieldRef<"GiftCard", 'String'>
    readonly created_date: FieldRef<"GiftCard", 'DateTime'>
    readonly updated_date: FieldRef<"GiftCard", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GiftCard findUnique
   */
  export type GiftCardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GiftCard
     */
    select?: GiftCardSelect<ExtArgs> | null
    /**
     * Filter, which GiftCard to fetch.
     */
    where: GiftCardWhereUniqueInput
  }

  /**
   * GiftCard findUniqueOrThrow
   */
  export type GiftCardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GiftCard
     */
    select?: GiftCardSelect<ExtArgs> | null
    /**
     * Filter, which GiftCard to fetch.
     */
    where: GiftCardWhereUniqueInput
  }

  /**
   * GiftCard findFirst
   */
  export type GiftCardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GiftCard
     */
    select?: GiftCardSelect<ExtArgs> | null
    /**
     * Filter, which GiftCard to fetch.
     */
    where?: GiftCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GiftCards to fetch.
     */
    orderBy?: GiftCardOrderByWithRelationInput | GiftCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GiftCards.
     */
    cursor?: GiftCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GiftCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GiftCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GiftCards.
     */
    distinct?: GiftCardScalarFieldEnum | GiftCardScalarFieldEnum[]
  }

  /**
   * GiftCard findFirstOrThrow
   */
  export type GiftCardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GiftCard
     */
    select?: GiftCardSelect<ExtArgs> | null
    /**
     * Filter, which GiftCard to fetch.
     */
    where?: GiftCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GiftCards to fetch.
     */
    orderBy?: GiftCardOrderByWithRelationInput | GiftCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GiftCards.
     */
    cursor?: GiftCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GiftCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GiftCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GiftCards.
     */
    distinct?: GiftCardScalarFieldEnum | GiftCardScalarFieldEnum[]
  }

  /**
   * GiftCard findMany
   */
  export type GiftCardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GiftCard
     */
    select?: GiftCardSelect<ExtArgs> | null
    /**
     * Filter, which GiftCards to fetch.
     */
    where?: GiftCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GiftCards to fetch.
     */
    orderBy?: GiftCardOrderByWithRelationInput | GiftCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GiftCards.
     */
    cursor?: GiftCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GiftCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GiftCards.
     */
    skip?: number
    distinct?: GiftCardScalarFieldEnum | GiftCardScalarFieldEnum[]
  }

  /**
   * GiftCard create
   */
  export type GiftCardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GiftCard
     */
    select?: GiftCardSelect<ExtArgs> | null
    /**
     * The data needed to create a GiftCard.
     */
    data: XOR<GiftCardCreateInput, GiftCardUncheckedCreateInput>
  }

  /**
   * GiftCard createMany
   */
  export type GiftCardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GiftCards.
     */
    data: GiftCardCreateManyInput | GiftCardCreateManyInput[]
  }

  /**
   * GiftCard createManyAndReturn
   */
  export type GiftCardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GiftCard
     */
    select?: GiftCardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GiftCards.
     */
    data: GiftCardCreateManyInput | GiftCardCreateManyInput[]
  }

  /**
   * GiftCard update
   */
  export type GiftCardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GiftCard
     */
    select?: GiftCardSelect<ExtArgs> | null
    /**
     * The data needed to update a GiftCard.
     */
    data: XOR<GiftCardUpdateInput, GiftCardUncheckedUpdateInput>
    /**
     * Choose, which GiftCard to update.
     */
    where: GiftCardWhereUniqueInput
  }

  /**
   * GiftCard updateMany
   */
  export type GiftCardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GiftCards.
     */
    data: XOR<GiftCardUpdateManyMutationInput, GiftCardUncheckedUpdateManyInput>
    /**
     * Filter which GiftCards to update
     */
    where?: GiftCardWhereInput
  }

  /**
   * GiftCard upsert
   */
  export type GiftCardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GiftCard
     */
    select?: GiftCardSelect<ExtArgs> | null
    /**
     * The filter to search for the GiftCard to update in case it exists.
     */
    where: GiftCardWhereUniqueInput
    /**
     * In case the GiftCard found by the `where` argument doesn't exist, create a new GiftCard with this data.
     */
    create: XOR<GiftCardCreateInput, GiftCardUncheckedCreateInput>
    /**
     * In case the GiftCard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GiftCardUpdateInput, GiftCardUncheckedUpdateInput>
  }

  /**
   * GiftCard delete
   */
  export type GiftCardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GiftCard
     */
    select?: GiftCardSelect<ExtArgs> | null
    /**
     * Filter which GiftCard to delete.
     */
    where: GiftCardWhereUniqueInput
  }

  /**
   * GiftCard deleteMany
   */
  export type GiftCardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GiftCards to delete
     */
    where?: GiftCardWhereInput
  }

  /**
   * GiftCard without action
   */
  export type GiftCardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GiftCard
     */
    select?: GiftCardSelect<ExtArgs> | null
  }


  /**
   * Model Transaction
   */

  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    id: number | null
    gift_card_id: number | null
    amount: number | null
  }

  export type TransactionSumAggregateOutputType = {
    id: number | null
    gift_card_id: number | null
    amount: number | null
  }

  export type TransactionMinAggregateOutputType = {
    id: number | null
    gift_card_id: number | null
    amount: number | null
    note: string | null
    user_email: string | null
    timestamp: Date | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: number | null
    gift_card_id: number | null
    amount: number | null
    note: string | null
    user_email: string | null
    timestamp: Date | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    gift_card_id: number
    amount: number
    note: number
    user_email: number
    timestamp: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    id?: true
    gift_card_id?: true
    amount?: true
  }

  export type TransactionSumAggregateInputType = {
    id?: true
    gift_card_id?: true
    amount?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    gift_card_id?: true
    amount?: true
    note?: true
    user_email?: true
    timestamp?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    gift_card_id?: true
    amount?: true
    note?: true
    user_email?: true
    timestamp?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    gift_card_id?: true
    amount?: true
    note?: true
    user_email?: true
    timestamp?: true
    _all?: true
  }

  export type TransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithAggregationInput | TransactionOrderByWithAggregationInput[]
    by: TransactionScalarFieldEnum[] | TransactionScalarFieldEnum
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }

  export type TransactionGroupByOutputType = {
    id: number
    gift_card_id: number
    amount: number
    note: string | null
    user_email: string | null
    timestamp: Date
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gift_card_id?: boolean
    amount?: boolean
    note?: boolean
    user_email?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gift_card_id?: boolean
    amount?: boolean
    note?: boolean
    user_email?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectScalar = {
    id?: boolean
    gift_card_id?: boolean
    amount?: boolean
    note?: boolean
    user_email?: boolean
    timestamp?: boolean
  }


  export type $TransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaction"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      gift_card_id: number
      amount: number
      note: string | null
      user_email: string | null
      timestamp: Date
    }, ExtArgs["result"]["transaction"]>
    composites: {}
  }

  type TransactionGetPayload<S extends boolean | null | undefined | TransactionDefaultArgs> = $Result.GetResult<Prisma.$TransactionPayload, S>

  type TransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TransactionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionFindUniqueArgs>(args: SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Transaction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionFindFirstArgs>(args?: SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Transaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionFindManyArgs>(args?: SelectSubset<T, TransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
     */
    create<T extends TransactionCreateArgs>(args: SelectSubset<T, TransactionCreateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Transactions.
     * @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionCreateManyArgs>(args?: SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transactions and returns the data saved in the database.
     * @param {TransactionCreateManyAndReturnArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, TransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
     */
    delete<T extends TransactionDeleteArgs>(args: SelectSubset<T, TransactionDeleteArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionUpdateArgs>(args: SelectSubset<T, TransactionUpdateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionDeleteManyArgs>(args?: SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionUpdateManyArgs>(args: SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
     */
    upsert<T extends TransactionUpsertArgs>(args: SelectSubset<T, TransactionUpsertArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaction model
   */
  readonly fields: TransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transaction model
   */ 
  interface TransactionFieldRefs {
    readonly id: FieldRef<"Transaction", 'Int'>
    readonly gift_card_id: FieldRef<"Transaction", 'Int'>
    readonly amount: FieldRef<"Transaction", 'Int'>
    readonly note: FieldRef<"Transaction", 'String'>
    readonly user_email: FieldRef<"Transaction", 'String'>
    readonly timestamp: FieldRef<"Transaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction create
   */
  export type TransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }

  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
  }

  /**
   * Transaction createManyAndReturn
   */
  export type TransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
  }

  /**
   * Transaction update
   */
  export type TransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
  }

  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }

  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
  }

  /**
   * Transaction without action
   */
  export type TransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
  }


  /**
   * Model GiftCardType
   */

  export type AggregateGiftCardType = {
    _count: GiftCardTypeCountAggregateOutputType | null
    _avg: GiftCardTypeAvgAggregateOutputType | null
    _sum: GiftCardTypeSumAggregateOutputType | null
    _min: GiftCardTypeMinAggregateOutputType | null
    _max: GiftCardTypeMaxAggregateOutputType | null
  }

  export type GiftCardTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type GiftCardTypeSumAggregateOutputType = {
    id: number | null
  }

  export type GiftCardTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
    color: string | null
  }

  export type GiftCardTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    color: string | null
  }

  export type GiftCardTypeCountAggregateOutputType = {
    id: number
    name: number
    color: number
    _all: number
  }


  export type GiftCardTypeAvgAggregateInputType = {
    id?: true
  }

  export type GiftCardTypeSumAggregateInputType = {
    id?: true
  }

  export type GiftCardTypeMinAggregateInputType = {
    id?: true
    name?: true
    color?: true
  }

  export type GiftCardTypeMaxAggregateInputType = {
    id?: true
    name?: true
    color?: true
  }

  export type GiftCardTypeCountAggregateInputType = {
    id?: true
    name?: true
    color?: true
    _all?: true
  }

  export type GiftCardTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GiftCardType to aggregate.
     */
    where?: GiftCardTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GiftCardTypes to fetch.
     */
    orderBy?: GiftCardTypeOrderByWithRelationInput | GiftCardTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GiftCardTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GiftCardTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GiftCardTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GiftCardTypes
    **/
    _count?: true | GiftCardTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GiftCardTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GiftCardTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GiftCardTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GiftCardTypeMaxAggregateInputType
  }

  export type GetGiftCardTypeAggregateType<T extends GiftCardTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateGiftCardType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGiftCardType[P]>
      : GetScalarType<T[P], AggregateGiftCardType[P]>
  }




  export type GiftCardTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GiftCardTypeWhereInput
    orderBy?: GiftCardTypeOrderByWithAggregationInput | GiftCardTypeOrderByWithAggregationInput[]
    by: GiftCardTypeScalarFieldEnum[] | GiftCardTypeScalarFieldEnum
    having?: GiftCardTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GiftCardTypeCountAggregateInputType | true
    _avg?: GiftCardTypeAvgAggregateInputType
    _sum?: GiftCardTypeSumAggregateInputType
    _min?: GiftCardTypeMinAggregateInputType
    _max?: GiftCardTypeMaxAggregateInputType
  }

  export type GiftCardTypeGroupByOutputType = {
    id: number
    name: string
    color: string | null
    _count: GiftCardTypeCountAggregateOutputType | null
    _avg: GiftCardTypeAvgAggregateOutputType | null
    _sum: GiftCardTypeSumAggregateOutputType | null
    _min: GiftCardTypeMinAggregateOutputType | null
    _max: GiftCardTypeMaxAggregateOutputType | null
  }

  type GetGiftCardTypeGroupByPayload<T extends GiftCardTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GiftCardTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GiftCardTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GiftCardTypeGroupByOutputType[P]>
            : GetScalarType<T[P], GiftCardTypeGroupByOutputType[P]>
        }
      >
    >


  export type GiftCardTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    color?: boolean
  }, ExtArgs["result"]["giftCardType"]>

  export type GiftCardTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    color?: boolean
  }, ExtArgs["result"]["giftCardType"]>

  export type GiftCardTypeSelectScalar = {
    id?: boolean
    name?: boolean
    color?: boolean
  }


  export type $GiftCardTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GiftCardType"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      color: string | null
    }, ExtArgs["result"]["giftCardType"]>
    composites: {}
  }

  type GiftCardTypeGetPayload<S extends boolean | null | undefined | GiftCardTypeDefaultArgs> = $Result.GetResult<Prisma.$GiftCardTypePayload, S>

  type GiftCardTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GiftCardTypeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GiftCardTypeCountAggregateInputType | true
    }

  export interface GiftCardTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GiftCardType'], meta: { name: 'GiftCardType' } }
    /**
     * Find zero or one GiftCardType that matches the filter.
     * @param {GiftCardTypeFindUniqueArgs} args - Arguments to find a GiftCardType
     * @example
     * // Get one GiftCardType
     * const giftCardType = await prisma.giftCardType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GiftCardTypeFindUniqueArgs>(args: SelectSubset<T, GiftCardTypeFindUniqueArgs<ExtArgs>>): Prisma__GiftCardTypeClient<$Result.GetResult<Prisma.$GiftCardTypePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GiftCardType that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GiftCardTypeFindUniqueOrThrowArgs} args - Arguments to find a GiftCardType
     * @example
     * // Get one GiftCardType
     * const giftCardType = await prisma.giftCardType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GiftCardTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, GiftCardTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GiftCardTypeClient<$Result.GetResult<Prisma.$GiftCardTypePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GiftCardType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiftCardTypeFindFirstArgs} args - Arguments to find a GiftCardType
     * @example
     * // Get one GiftCardType
     * const giftCardType = await prisma.giftCardType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GiftCardTypeFindFirstArgs>(args?: SelectSubset<T, GiftCardTypeFindFirstArgs<ExtArgs>>): Prisma__GiftCardTypeClient<$Result.GetResult<Prisma.$GiftCardTypePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GiftCardType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiftCardTypeFindFirstOrThrowArgs} args - Arguments to find a GiftCardType
     * @example
     * // Get one GiftCardType
     * const giftCardType = await prisma.giftCardType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GiftCardTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, GiftCardTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__GiftCardTypeClient<$Result.GetResult<Prisma.$GiftCardTypePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GiftCardTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiftCardTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GiftCardTypes
     * const giftCardTypes = await prisma.giftCardType.findMany()
     * 
     * // Get first 10 GiftCardTypes
     * const giftCardTypes = await prisma.giftCardType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const giftCardTypeWithIdOnly = await prisma.giftCardType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GiftCardTypeFindManyArgs>(args?: SelectSubset<T, GiftCardTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GiftCardTypePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GiftCardType.
     * @param {GiftCardTypeCreateArgs} args - Arguments to create a GiftCardType.
     * @example
     * // Create one GiftCardType
     * const GiftCardType = await prisma.giftCardType.create({
     *   data: {
     *     // ... data to create a GiftCardType
     *   }
     * })
     * 
     */
    create<T extends GiftCardTypeCreateArgs>(args: SelectSubset<T, GiftCardTypeCreateArgs<ExtArgs>>): Prisma__GiftCardTypeClient<$Result.GetResult<Prisma.$GiftCardTypePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GiftCardTypes.
     * @param {GiftCardTypeCreateManyArgs} args - Arguments to create many GiftCardTypes.
     * @example
     * // Create many GiftCardTypes
     * const giftCardType = await prisma.giftCardType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GiftCardTypeCreateManyArgs>(args?: SelectSubset<T, GiftCardTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GiftCardTypes and returns the data saved in the database.
     * @param {GiftCardTypeCreateManyAndReturnArgs} args - Arguments to create many GiftCardTypes.
     * @example
     * // Create many GiftCardTypes
     * const giftCardType = await prisma.giftCardType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GiftCardTypes and only return the `id`
     * const giftCardTypeWithIdOnly = await prisma.giftCardType.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GiftCardTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, GiftCardTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GiftCardTypePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GiftCardType.
     * @param {GiftCardTypeDeleteArgs} args - Arguments to delete one GiftCardType.
     * @example
     * // Delete one GiftCardType
     * const GiftCardType = await prisma.giftCardType.delete({
     *   where: {
     *     // ... filter to delete one GiftCardType
     *   }
     * })
     * 
     */
    delete<T extends GiftCardTypeDeleteArgs>(args: SelectSubset<T, GiftCardTypeDeleteArgs<ExtArgs>>): Prisma__GiftCardTypeClient<$Result.GetResult<Prisma.$GiftCardTypePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GiftCardType.
     * @param {GiftCardTypeUpdateArgs} args - Arguments to update one GiftCardType.
     * @example
     * // Update one GiftCardType
     * const giftCardType = await prisma.giftCardType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GiftCardTypeUpdateArgs>(args: SelectSubset<T, GiftCardTypeUpdateArgs<ExtArgs>>): Prisma__GiftCardTypeClient<$Result.GetResult<Prisma.$GiftCardTypePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GiftCardTypes.
     * @param {GiftCardTypeDeleteManyArgs} args - Arguments to filter GiftCardTypes to delete.
     * @example
     * // Delete a few GiftCardTypes
     * const { count } = await prisma.giftCardType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GiftCardTypeDeleteManyArgs>(args?: SelectSubset<T, GiftCardTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GiftCardTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiftCardTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GiftCardTypes
     * const giftCardType = await prisma.giftCardType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GiftCardTypeUpdateManyArgs>(args: SelectSubset<T, GiftCardTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GiftCardType.
     * @param {GiftCardTypeUpsertArgs} args - Arguments to update or create a GiftCardType.
     * @example
     * // Update or create a GiftCardType
     * const giftCardType = await prisma.giftCardType.upsert({
     *   create: {
     *     // ... data to create a GiftCardType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GiftCardType we want to update
     *   }
     * })
     */
    upsert<T extends GiftCardTypeUpsertArgs>(args: SelectSubset<T, GiftCardTypeUpsertArgs<ExtArgs>>): Prisma__GiftCardTypeClient<$Result.GetResult<Prisma.$GiftCardTypePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GiftCardTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiftCardTypeCountArgs} args - Arguments to filter GiftCardTypes to count.
     * @example
     * // Count the number of GiftCardTypes
     * const count = await prisma.giftCardType.count({
     *   where: {
     *     // ... the filter for the GiftCardTypes we want to count
     *   }
     * })
    **/
    count<T extends GiftCardTypeCountArgs>(
      args?: Subset<T, GiftCardTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GiftCardTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GiftCardType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiftCardTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GiftCardTypeAggregateArgs>(args: Subset<T, GiftCardTypeAggregateArgs>): Prisma.PrismaPromise<GetGiftCardTypeAggregateType<T>>

    /**
     * Group by GiftCardType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GiftCardTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GiftCardTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GiftCardTypeGroupByArgs['orderBy'] }
        : { orderBy?: GiftCardTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GiftCardTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGiftCardTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GiftCardType model
   */
  readonly fields: GiftCardTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GiftCardType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GiftCardTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GiftCardType model
   */ 
  interface GiftCardTypeFieldRefs {
    readonly id: FieldRef<"GiftCardType", 'Int'>
    readonly name: FieldRef<"GiftCardType", 'String'>
    readonly color: FieldRef<"GiftCardType", 'String'>
  }
    

  // Custom InputTypes
  /**
   * GiftCardType findUnique
   */
  export type GiftCardTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GiftCardType
     */
    select?: GiftCardTypeSelect<ExtArgs> | null
    /**
     * Filter, which GiftCardType to fetch.
     */
    where: GiftCardTypeWhereUniqueInput
  }

  /**
   * GiftCardType findUniqueOrThrow
   */
  export type GiftCardTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GiftCardType
     */
    select?: GiftCardTypeSelect<ExtArgs> | null
    /**
     * Filter, which GiftCardType to fetch.
     */
    where: GiftCardTypeWhereUniqueInput
  }

  /**
   * GiftCardType findFirst
   */
  export type GiftCardTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GiftCardType
     */
    select?: GiftCardTypeSelect<ExtArgs> | null
    /**
     * Filter, which GiftCardType to fetch.
     */
    where?: GiftCardTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GiftCardTypes to fetch.
     */
    orderBy?: GiftCardTypeOrderByWithRelationInput | GiftCardTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GiftCardTypes.
     */
    cursor?: GiftCardTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GiftCardTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GiftCardTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GiftCardTypes.
     */
    distinct?: GiftCardTypeScalarFieldEnum | GiftCardTypeScalarFieldEnum[]
  }

  /**
   * GiftCardType findFirstOrThrow
   */
  export type GiftCardTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GiftCardType
     */
    select?: GiftCardTypeSelect<ExtArgs> | null
    /**
     * Filter, which GiftCardType to fetch.
     */
    where?: GiftCardTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GiftCardTypes to fetch.
     */
    orderBy?: GiftCardTypeOrderByWithRelationInput | GiftCardTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GiftCardTypes.
     */
    cursor?: GiftCardTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GiftCardTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GiftCardTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GiftCardTypes.
     */
    distinct?: GiftCardTypeScalarFieldEnum | GiftCardTypeScalarFieldEnum[]
  }

  /**
   * GiftCardType findMany
   */
  export type GiftCardTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GiftCardType
     */
    select?: GiftCardTypeSelect<ExtArgs> | null
    /**
     * Filter, which GiftCardTypes to fetch.
     */
    where?: GiftCardTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GiftCardTypes to fetch.
     */
    orderBy?: GiftCardTypeOrderByWithRelationInput | GiftCardTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GiftCardTypes.
     */
    cursor?: GiftCardTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GiftCardTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GiftCardTypes.
     */
    skip?: number
    distinct?: GiftCardTypeScalarFieldEnum | GiftCardTypeScalarFieldEnum[]
  }

  /**
   * GiftCardType create
   */
  export type GiftCardTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GiftCardType
     */
    select?: GiftCardTypeSelect<ExtArgs> | null
    /**
     * The data needed to create a GiftCardType.
     */
    data: XOR<GiftCardTypeCreateInput, GiftCardTypeUncheckedCreateInput>
  }

  /**
   * GiftCardType createMany
   */
  export type GiftCardTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GiftCardTypes.
     */
    data: GiftCardTypeCreateManyInput | GiftCardTypeCreateManyInput[]
  }

  /**
   * GiftCardType createManyAndReturn
   */
  export type GiftCardTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GiftCardType
     */
    select?: GiftCardTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GiftCardTypes.
     */
    data: GiftCardTypeCreateManyInput | GiftCardTypeCreateManyInput[]
  }

  /**
   * GiftCardType update
   */
  export type GiftCardTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GiftCardType
     */
    select?: GiftCardTypeSelect<ExtArgs> | null
    /**
     * The data needed to update a GiftCardType.
     */
    data: XOR<GiftCardTypeUpdateInput, GiftCardTypeUncheckedUpdateInput>
    /**
     * Choose, which GiftCardType to update.
     */
    where: GiftCardTypeWhereUniqueInput
  }

  /**
   * GiftCardType updateMany
   */
  export type GiftCardTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GiftCardTypes.
     */
    data: XOR<GiftCardTypeUpdateManyMutationInput, GiftCardTypeUncheckedUpdateManyInput>
    /**
     * Filter which GiftCardTypes to update
     */
    where?: GiftCardTypeWhereInput
  }

  /**
   * GiftCardType upsert
   */
  export type GiftCardTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GiftCardType
     */
    select?: GiftCardTypeSelect<ExtArgs> | null
    /**
     * The filter to search for the GiftCardType to update in case it exists.
     */
    where: GiftCardTypeWhereUniqueInput
    /**
     * In case the GiftCardType found by the `where` argument doesn't exist, create a new GiftCardType with this data.
     */
    create: XOR<GiftCardTypeCreateInput, GiftCardTypeUncheckedCreateInput>
    /**
     * In case the GiftCardType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GiftCardTypeUpdateInput, GiftCardTypeUncheckedUpdateInput>
  }

  /**
   * GiftCardType delete
   */
  export type GiftCardTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GiftCardType
     */
    select?: GiftCardTypeSelect<ExtArgs> | null
    /**
     * Filter which GiftCardType to delete.
     */
    where: GiftCardTypeWhereUniqueInput
  }

  /**
   * GiftCardType deleteMany
   */
  export type GiftCardTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GiftCardTypes to delete
     */
    where?: GiftCardTypeWhereInput
  }

  /**
   * GiftCardType without action
   */
  export type GiftCardTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GiftCardType
     */
    select?: GiftCardTypeSelect<ExtArgs> | null
  }


  /**
   * Model ArchivedCard
   */

  export type AggregateArchivedCard = {
    _count: ArchivedCardCountAggregateOutputType | null
    _avg: ArchivedCardAvgAggregateOutputType | null
    _sum: ArchivedCardSumAggregateOutputType | null
    _min: ArchivedCardMinAggregateOutputType | null
    _max: ArchivedCardMaxAggregateOutputType | null
  }

  export type ArchivedCardAvgAggregateOutputType = {
    id: number | null
    original_card_id: number | null
    shared_with_group_id: number | null
  }

  export type ArchivedCardSumAggregateOutputType = {
    id: number | null
    original_card_id: number | null
    shared_with_group_id: number | null
  }

  export type ArchivedCardMinAggregateOutputType = {
    id: number | null
    original_card_id: number | null
    card_name: string | null
    shared_with_email: string | null
    shared_with_group_id: number | null
    created_by: string | null
    data: string | null
    archived_date: Date | null
    created_date: Date | null
  }

  export type ArchivedCardMaxAggregateOutputType = {
    id: number | null
    original_card_id: number | null
    card_name: string | null
    shared_with_email: string | null
    shared_with_group_id: number | null
    created_by: string | null
    data: string | null
    archived_date: Date | null
    created_date: Date | null
  }

  export type ArchivedCardCountAggregateOutputType = {
    id: number
    original_card_id: number
    card_name: number
    shared_with_email: number
    shared_with_group_id: number
    created_by: number
    data: number
    archived_date: number
    created_date: number
    _all: number
  }


  export type ArchivedCardAvgAggregateInputType = {
    id?: true
    original_card_id?: true
    shared_with_group_id?: true
  }

  export type ArchivedCardSumAggregateInputType = {
    id?: true
    original_card_id?: true
    shared_with_group_id?: true
  }

  export type ArchivedCardMinAggregateInputType = {
    id?: true
    original_card_id?: true
    card_name?: true
    shared_with_email?: true
    shared_with_group_id?: true
    created_by?: true
    data?: true
    archived_date?: true
    created_date?: true
  }

  export type ArchivedCardMaxAggregateInputType = {
    id?: true
    original_card_id?: true
    card_name?: true
    shared_with_email?: true
    shared_with_group_id?: true
    created_by?: true
    data?: true
    archived_date?: true
    created_date?: true
  }

  export type ArchivedCardCountAggregateInputType = {
    id?: true
    original_card_id?: true
    card_name?: true
    shared_with_email?: true
    shared_with_group_id?: true
    created_by?: true
    data?: true
    archived_date?: true
    created_date?: true
    _all?: true
  }

  export type ArchivedCardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArchivedCard to aggregate.
     */
    where?: ArchivedCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchivedCards to fetch.
     */
    orderBy?: ArchivedCardOrderByWithRelationInput | ArchivedCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArchivedCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchivedCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchivedCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ArchivedCards
    **/
    _count?: true | ArchivedCardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArchivedCardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArchivedCardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArchivedCardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArchivedCardMaxAggregateInputType
  }

  export type GetArchivedCardAggregateType<T extends ArchivedCardAggregateArgs> = {
        [P in keyof T & keyof AggregateArchivedCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArchivedCard[P]>
      : GetScalarType<T[P], AggregateArchivedCard[P]>
  }




  export type ArchivedCardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArchivedCardWhereInput
    orderBy?: ArchivedCardOrderByWithAggregationInput | ArchivedCardOrderByWithAggregationInput[]
    by: ArchivedCardScalarFieldEnum[] | ArchivedCardScalarFieldEnum
    having?: ArchivedCardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArchivedCardCountAggregateInputType | true
    _avg?: ArchivedCardAvgAggregateInputType
    _sum?: ArchivedCardSumAggregateInputType
    _min?: ArchivedCardMinAggregateInputType
    _max?: ArchivedCardMaxAggregateInputType
  }

  export type ArchivedCardGroupByOutputType = {
    id: number
    original_card_id: number | null
    card_name: string | null
    shared_with_email: string | null
    shared_with_group_id: number | null
    created_by: string | null
    data: string | null
    archived_date: Date
    created_date: Date
    _count: ArchivedCardCountAggregateOutputType | null
    _avg: ArchivedCardAvgAggregateOutputType | null
    _sum: ArchivedCardSumAggregateOutputType | null
    _min: ArchivedCardMinAggregateOutputType | null
    _max: ArchivedCardMaxAggregateOutputType | null
  }

  type GetArchivedCardGroupByPayload<T extends ArchivedCardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArchivedCardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArchivedCardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArchivedCardGroupByOutputType[P]>
            : GetScalarType<T[P], ArchivedCardGroupByOutputType[P]>
        }
      >
    >


  export type ArchivedCardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    original_card_id?: boolean
    card_name?: boolean
    shared_with_email?: boolean
    shared_with_group_id?: boolean
    created_by?: boolean
    data?: boolean
    archived_date?: boolean
    created_date?: boolean
  }, ExtArgs["result"]["archivedCard"]>

  export type ArchivedCardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    original_card_id?: boolean
    card_name?: boolean
    shared_with_email?: boolean
    shared_with_group_id?: boolean
    created_by?: boolean
    data?: boolean
    archived_date?: boolean
    created_date?: boolean
  }, ExtArgs["result"]["archivedCard"]>

  export type ArchivedCardSelectScalar = {
    id?: boolean
    original_card_id?: boolean
    card_name?: boolean
    shared_with_email?: boolean
    shared_with_group_id?: boolean
    created_by?: boolean
    data?: boolean
    archived_date?: boolean
    created_date?: boolean
  }


  export type $ArchivedCardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ArchivedCard"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      original_card_id: number | null
      card_name: string | null
      shared_with_email: string | null
      shared_with_group_id: number | null
      created_by: string | null
      data: string | null
      archived_date: Date
      created_date: Date
    }, ExtArgs["result"]["archivedCard"]>
    composites: {}
  }

  type ArchivedCardGetPayload<S extends boolean | null | undefined | ArchivedCardDefaultArgs> = $Result.GetResult<Prisma.$ArchivedCardPayload, S>

  type ArchivedCardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ArchivedCardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ArchivedCardCountAggregateInputType | true
    }

  export interface ArchivedCardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ArchivedCard'], meta: { name: 'ArchivedCard' } }
    /**
     * Find zero or one ArchivedCard that matches the filter.
     * @param {ArchivedCardFindUniqueArgs} args - Arguments to find a ArchivedCard
     * @example
     * // Get one ArchivedCard
     * const archivedCard = await prisma.archivedCard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ArchivedCardFindUniqueArgs>(args: SelectSubset<T, ArchivedCardFindUniqueArgs<ExtArgs>>): Prisma__ArchivedCardClient<$Result.GetResult<Prisma.$ArchivedCardPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ArchivedCard that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ArchivedCardFindUniqueOrThrowArgs} args - Arguments to find a ArchivedCard
     * @example
     * // Get one ArchivedCard
     * const archivedCard = await prisma.archivedCard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ArchivedCardFindUniqueOrThrowArgs>(args: SelectSubset<T, ArchivedCardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ArchivedCardClient<$Result.GetResult<Prisma.$ArchivedCardPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ArchivedCard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedCardFindFirstArgs} args - Arguments to find a ArchivedCard
     * @example
     * // Get one ArchivedCard
     * const archivedCard = await prisma.archivedCard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ArchivedCardFindFirstArgs>(args?: SelectSubset<T, ArchivedCardFindFirstArgs<ExtArgs>>): Prisma__ArchivedCardClient<$Result.GetResult<Prisma.$ArchivedCardPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ArchivedCard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedCardFindFirstOrThrowArgs} args - Arguments to find a ArchivedCard
     * @example
     * // Get one ArchivedCard
     * const archivedCard = await prisma.archivedCard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ArchivedCardFindFirstOrThrowArgs>(args?: SelectSubset<T, ArchivedCardFindFirstOrThrowArgs<ExtArgs>>): Prisma__ArchivedCardClient<$Result.GetResult<Prisma.$ArchivedCardPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ArchivedCards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedCardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ArchivedCards
     * const archivedCards = await prisma.archivedCard.findMany()
     * 
     * // Get first 10 ArchivedCards
     * const archivedCards = await prisma.archivedCard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const archivedCardWithIdOnly = await prisma.archivedCard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ArchivedCardFindManyArgs>(args?: SelectSubset<T, ArchivedCardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArchivedCardPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ArchivedCard.
     * @param {ArchivedCardCreateArgs} args - Arguments to create a ArchivedCard.
     * @example
     * // Create one ArchivedCard
     * const ArchivedCard = await prisma.archivedCard.create({
     *   data: {
     *     // ... data to create a ArchivedCard
     *   }
     * })
     * 
     */
    create<T extends ArchivedCardCreateArgs>(args: SelectSubset<T, ArchivedCardCreateArgs<ExtArgs>>): Prisma__ArchivedCardClient<$Result.GetResult<Prisma.$ArchivedCardPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ArchivedCards.
     * @param {ArchivedCardCreateManyArgs} args - Arguments to create many ArchivedCards.
     * @example
     * // Create many ArchivedCards
     * const archivedCard = await prisma.archivedCard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ArchivedCardCreateManyArgs>(args?: SelectSubset<T, ArchivedCardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ArchivedCards and returns the data saved in the database.
     * @param {ArchivedCardCreateManyAndReturnArgs} args - Arguments to create many ArchivedCards.
     * @example
     * // Create many ArchivedCards
     * const archivedCard = await prisma.archivedCard.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ArchivedCards and only return the `id`
     * const archivedCardWithIdOnly = await prisma.archivedCard.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ArchivedCardCreateManyAndReturnArgs>(args?: SelectSubset<T, ArchivedCardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArchivedCardPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ArchivedCard.
     * @param {ArchivedCardDeleteArgs} args - Arguments to delete one ArchivedCard.
     * @example
     * // Delete one ArchivedCard
     * const ArchivedCard = await prisma.archivedCard.delete({
     *   where: {
     *     // ... filter to delete one ArchivedCard
     *   }
     * })
     * 
     */
    delete<T extends ArchivedCardDeleteArgs>(args: SelectSubset<T, ArchivedCardDeleteArgs<ExtArgs>>): Prisma__ArchivedCardClient<$Result.GetResult<Prisma.$ArchivedCardPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ArchivedCard.
     * @param {ArchivedCardUpdateArgs} args - Arguments to update one ArchivedCard.
     * @example
     * // Update one ArchivedCard
     * const archivedCard = await prisma.archivedCard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ArchivedCardUpdateArgs>(args: SelectSubset<T, ArchivedCardUpdateArgs<ExtArgs>>): Prisma__ArchivedCardClient<$Result.GetResult<Prisma.$ArchivedCardPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ArchivedCards.
     * @param {ArchivedCardDeleteManyArgs} args - Arguments to filter ArchivedCards to delete.
     * @example
     * // Delete a few ArchivedCards
     * const { count } = await prisma.archivedCard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ArchivedCardDeleteManyArgs>(args?: SelectSubset<T, ArchivedCardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ArchivedCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedCardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ArchivedCards
     * const archivedCard = await prisma.archivedCard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ArchivedCardUpdateManyArgs>(args: SelectSubset<T, ArchivedCardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ArchivedCard.
     * @param {ArchivedCardUpsertArgs} args - Arguments to update or create a ArchivedCard.
     * @example
     * // Update or create a ArchivedCard
     * const archivedCard = await prisma.archivedCard.upsert({
     *   create: {
     *     // ... data to create a ArchivedCard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ArchivedCard we want to update
     *   }
     * })
     */
    upsert<T extends ArchivedCardUpsertArgs>(args: SelectSubset<T, ArchivedCardUpsertArgs<ExtArgs>>): Prisma__ArchivedCardClient<$Result.GetResult<Prisma.$ArchivedCardPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ArchivedCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedCardCountArgs} args - Arguments to filter ArchivedCards to count.
     * @example
     * // Count the number of ArchivedCards
     * const count = await prisma.archivedCard.count({
     *   where: {
     *     // ... the filter for the ArchivedCards we want to count
     *   }
     * })
    **/
    count<T extends ArchivedCardCountArgs>(
      args?: Subset<T, ArchivedCardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArchivedCardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ArchivedCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedCardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArchivedCardAggregateArgs>(args: Subset<T, ArchivedCardAggregateArgs>): Prisma.PrismaPromise<GetArchivedCardAggregateType<T>>

    /**
     * Group by ArchivedCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchivedCardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArchivedCardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArchivedCardGroupByArgs['orderBy'] }
        : { orderBy?: ArchivedCardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArchivedCardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArchivedCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ArchivedCard model
   */
  readonly fields: ArchivedCardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ArchivedCard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArchivedCardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ArchivedCard model
   */ 
  interface ArchivedCardFieldRefs {
    readonly id: FieldRef<"ArchivedCard", 'Int'>
    readonly original_card_id: FieldRef<"ArchivedCard", 'Int'>
    readonly card_name: FieldRef<"ArchivedCard", 'String'>
    readonly shared_with_email: FieldRef<"ArchivedCard", 'String'>
    readonly shared_with_group_id: FieldRef<"ArchivedCard", 'Int'>
    readonly created_by: FieldRef<"ArchivedCard", 'String'>
    readonly data: FieldRef<"ArchivedCard", 'String'>
    readonly archived_date: FieldRef<"ArchivedCard", 'DateTime'>
    readonly created_date: FieldRef<"ArchivedCard", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ArchivedCard findUnique
   */
  export type ArchivedCardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedCard
     */
    select?: ArchivedCardSelect<ExtArgs> | null
    /**
     * Filter, which ArchivedCard to fetch.
     */
    where: ArchivedCardWhereUniqueInput
  }

  /**
   * ArchivedCard findUniqueOrThrow
   */
  export type ArchivedCardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedCard
     */
    select?: ArchivedCardSelect<ExtArgs> | null
    /**
     * Filter, which ArchivedCard to fetch.
     */
    where: ArchivedCardWhereUniqueInput
  }

  /**
   * ArchivedCard findFirst
   */
  export type ArchivedCardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedCard
     */
    select?: ArchivedCardSelect<ExtArgs> | null
    /**
     * Filter, which ArchivedCard to fetch.
     */
    where?: ArchivedCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchivedCards to fetch.
     */
    orderBy?: ArchivedCardOrderByWithRelationInput | ArchivedCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArchivedCards.
     */
    cursor?: ArchivedCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchivedCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchivedCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArchivedCards.
     */
    distinct?: ArchivedCardScalarFieldEnum | ArchivedCardScalarFieldEnum[]
  }

  /**
   * ArchivedCard findFirstOrThrow
   */
  export type ArchivedCardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedCard
     */
    select?: ArchivedCardSelect<ExtArgs> | null
    /**
     * Filter, which ArchivedCard to fetch.
     */
    where?: ArchivedCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchivedCards to fetch.
     */
    orderBy?: ArchivedCardOrderByWithRelationInput | ArchivedCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArchivedCards.
     */
    cursor?: ArchivedCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchivedCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchivedCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArchivedCards.
     */
    distinct?: ArchivedCardScalarFieldEnum | ArchivedCardScalarFieldEnum[]
  }

  /**
   * ArchivedCard findMany
   */
  export type ArchivedCardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedCard
     */
    select?: ArchivedCardSelect<ExtArgs> | null
    /**
     * Filter, which ArchivedCards to fetch.
     */
    where?: ArchivedCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchivedCards to fetch.
     */
    orderBy?: ArchivedCardOrderByWithRelationInput | ArchivedCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ArchivedCards.
     */
    cursor?: ArchivedCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchivedCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchivedCards.
     */
    skip?: number
    distinct?: ArchivedCardScalarFieldEnum | ArchivedCardScalarFieldEnum[]
  }

  /**
   * ArchivedCard create
   */
  export type ArchivedCardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedCard
     */
    select?: ArchivedCardSelect<ExtArgs> | null
    /**
     * The data needed to create a ArchivedCard.
     */
    data?: XOR<ArchivedCardCreateInput, ArchivedCardUncheckedCreateInput>
  }

  /**
   * ArchivedCard createMany
   */
  export type ArchivedCardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ArchivedCards.
     */
    data: ArchivedCardCreateManyInput | ArchivedCardCreateManyInput[]
  }

  /**
   * ArchivedCard createManyAndReturn
   */
  export type ArchivedCardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedCard
     */
    select?: ArchivedCardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ArchivedCards.
     */
    data: ArchivedCardCreateManyInput | ArchivedCardCreateManyInput[]
  }

  /**
   * ArchivedCard update
   */
  export type ArchivedCardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedCard
     */
    select?: ArchivedCardSelect<ExtArgs> | null
    /**
     * The data needed to update a ArchivedCard.
     */
    data: XOR<ArchivedCardUpdateInput, ArchivedCardUncheckedUpdateInput>
    /**
     * Choose, which ArchivedCard to update.
     */
    where: ArchivedCardWhereUniqueInput
  }

  /**
   * ArchivedCard updateMany
   */
  export type ArchivedCardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ArchivedCards.
     */
    data: XOR<ArchivedCardUpdateManyMutationInput, ArchivedCardUncheckedUpdateManyInput>
    /**
     * Filter which ArchivedCards to update
     */
    where?: ArchivedCardWhereInput
  }

  /**
   * ArchivedCard upsert
   */
  export type ArchivedCardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedCard
     */
    select?: ArchivedCardSelect<ExtArgs> | null
    /**
     * The filter to search for the ArchivedCard to update in case it exists.
     */
    where: ArchivedCardWhereUniqueInput
    /**
     * In case the ArchivedCard found by the `where` argument doesn't exist, create a new ArchivedCard with this data.
     */
    create: XOR<ArchivedCardCreateInput, ArchivedCardUncheckedCreateInput>
    /**
     * In case the ArchivedCard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArchivedCardUpdateInput, ArchivedCardUncheckedUpdateInput>
  }

  /**
   * ArchivedCard delete
   */
  export type ArchivedCardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedCard
     */
    select?: ArchivedCardSelect<ExtArgs> | null
    /**
     * Filter which ArchivedCard to delete.
     */
    where: ArchivedCardWhereUniqueInput
  }

  /**
   * ArchivedCard deleteMany
   */
  export type ArchivedCardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArchivedCards to delete
     */
    where?: ArchivedCardWhereInput
  }

  /**
   * ArchivedCard without action
   */
  export type ArchivedCardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchivedCard
     */
    select?: ArchivedCardSelect<ExtArgs> | null
  }


  /**
   * Model SharedCard
   */

  export type AggregateSharedCard = {
    _count: SharedCardCountAggregateOutputType | null
    _avg: SharedCardAvgAggregateOutputType | null
    _sum: SharedCardSumAggregateOutputType | null
    _min: SharedCardMinAggregateOutputType | null
    _max: SharedCardMaxAggregateOutputType | null
  }

  export type SharedCardAvgAggregateOutputType = {
    id: number | null
    card_id: number | null
    group_id: number | null
    shared_with_group_id: number | null
    balance: number | null
  }

  export type SharedCardSumAggregateOutputType = {
    id: number | null
    card_id: number | null
    group_id: number | null
    shared_with_group_id: number | null
    balance: number | null
  }

  export type SharedCardMinAggregateOutputType = {
    id: number | null
    card_id: number | null
    user_email: string | null
    shared_with: string | null
    group_id: number | null
    shared_with_group_id: number | null
    created_by: string | null
    balance: number | null
    card_name: string | null
    vendor: string | null
    expiry_date: Date | null
    card_type: string | null
    card_number: string | null
    cvv: string | null
    activation_code: string | null
    online_page_url: string | null
    notes: string | null
    card_image_url: string | null
    purchase_date: Date | null
    card_color: string | null
    data: string | null
    created_date: Date | null
  }

  export type SharedCardMaxAggregateOutputType = {
    id: number | null
    card_id: number | null
    user_email: string | null
    shared_with: string | null
    group_id: number | null
    shared_with_group_id: number | null
    created_by: string | null
    balance: number | null
    card_name: string | null
    vendor: string | null
    expiry_date: Date | null
    card_type: string | null
    card_number: string | null
    cvv: string | null
    activation_code: string | null
    online_page_url: string | null
    notes: string | null
    card_image_url: string | null
    purchase_date: Date | null
    card_color: string | null
    data: string | null
    created_date: Date | null
  }

  export type SharedCardCountAggregateOutputType = {
    id: number
    card_id: number
    user_email: number
    shared_with: number
    group_id: number
    shared_with_group_id: number
    created_by: number
    balance: number
    card_name: number
    vendor: number
    expiry_date: number
    card_type: number
    card_number: number
    cvv: number
    activation_code: number
    online_page_url: number
    notes: number
    card_image_url: number
    purchase_date: number
    card_color: number
    data: number
    created_date: number
    _all: number
  }


  export type SharedCardAvgAggregateInputType = {
    id?: true
    card_id?: true
    group_id?: true
    shared_with_group_id?: true
    balance?: true
  }

  export type SharedCardSumAggregateInputType = {
    id?: true
    card_id?: true
    group_id?: true
    shared_with_group_id?: true
    balance?: true
  }

  export type SharedCardMinAggregateInputType = {
    id?: true
    card_id?: true
    user_email?: true
    shared_with?: true
    group_id?: true
    shared_with_group_id?: true
    created_by?: true
    balance?: true
    card_name?: true
    vendor?: true
    expiry_date?: true
    card_type?: true
    card_number?: true
    cvv?: true
    activation_code?: true
    online_page_url?: true
    notes?: true
    card_image_url?: true
    purchase_date?: true
    card_color?: true
    data?: true
    created_date?: true
  }

  export type SharedCardMaxAggregateInputType = {
    id?: true
    card_id?: true
    user_email?: true
    shared_with?: true
    group_id?: true
    shared_with_group_id?: true
    created_by?: true
    balance?: true
    card_name?: true
    vendor?: true
    expiry_date?: true
    card_type?: true
    card_number?: true
    cvv?: true
    activation_code?: true
    online_page_url?: true
    notes?: true
    card_image_url?: true
    purchase_date?: true
    card_color?: true
    data?: true
    created_date?: true
  }

  export type SharedCardCountAggregateInputType = {
    id?: true
    card_id?: true
    user_email?: true
    shared_with?: true
    group_id?: true
    shared_with_group_id?: true
    created_by?: true
    balance?: true
    card_name?: true
    vendor?: true
    expiry_date?: true
    card_type?: true
    card_number?: true
    cvv?: true
    activation_code?: true
    online_page_url?: true
    notes?: true
    card_image_url?: true
    purchase_date?: true
    card_color?: true
    data?: true
    created_date?: true
    _all?: true
  }

  export type SharedCardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SharedCard to aggregate.
     */
    where?: SharedCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SharedCards to fetch.
     */
    orderBy?: SharedCardOrderByWithRelationInput | SharedCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SharedCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SharedCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SharedCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SharedCards
    **/
    _count?: true | SharedCardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SharedCardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SharedCardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SharedCardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SharedCardMaxAggregateInputType
  }

  export type GetSharedCardAggregateType<T extends SharedCardAggregateArgs> = {
        [P in keyof T & keyof AggregateSharedCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSharedCard[P]>
      : GetScalarType<T[P], AggregateSharedCard[P]>
  }




  export type SharedCardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SharedCardWhereInput
    orderBy?: SharedCardOrderByWithAggregationInput | SharedCardOrderByWithAggregationInput[]
    by: SharedCardScalarFieldEnum[] | SharedCardScalarFieldEnum
    having?: SharedCardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SharedCardCountAggregateInputType | true
    _avg?: SharedCardAvgAggregateInputType
    _sum?: SharedCardSumAggregateInputType
    _min?: SharedCardMinAggregateInputType
    _max?: SharedCardMaxAggregateInputType
  }

  export type SharedCardGroupByOutputType = {
    id: number
    card_id: number
    user_email: string | null
    shared_with: string | null
    group_id: number | null
    shared_with_group_id: number | null
    created_by: string | null
    balance: number | null
    card_name: string | null
    vendor: string | null
    expiry_date: Date | null
    card_type: string | null
    card_number: string | null
    cvv: string | null
    activation_code: string | null
    online_page_url: string | null
    notes: string | null
    card_image_url: string | null
    purchase_date: Date | null
    card_color: string | null
    data: string | null
    created_date: Date
    _count: SharedCardCountAggregateOutputType | null
    _avg: SharedCardAvgAggregateOutputType | null
    _sum: SharedCardSumAggregateOutputType | null
    _min: SharedCardMinAggregateOutputType | null
    _max: SharedCardMaxAggregateOutputType | null
  }

  type GetSharedCardGroupByPayload<T extends SharedCardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SharedCardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SharedCardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SharedCardGroupByOutputType[P]>
            : GetScalarType<T[P], SharedCardGroupByOutputType[P]>
        }
      >
    >


  export type SharedCardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    card_id?: boolean
    user_email?: boolean
    shared_with?: boolean
    group_id?: boolean
    shared_with_group_id?: boolean
    created_by?: boolean
    balance?: boolean
    card_name?: boolean
    vendor?: boolean
    expiry_date?: boolean
    card_type?: boolean
    card_number?: boolean
    cvv?: boolean
    activation_code?: boolean
    online_page_url?: boolean
    notes?: boolean
    card_image_url?: boolean
    purchase_date?: boolean
    card_color?: boolean
    data?: boolean
    created_date?: boolean
  }, ExtArgs["result"]["sharedCard"]>

  export type SharedCardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    card_id?: boolean
    user_email?: boolean
    shared_with?: boolean
    group_id?: boolean
    shared_with_group_id?: boolean
    created_by?: boolean
    balance?: boolean
    card_name?: boolean
    vendor?: boolean
    expiry_date?: boolean
    card_type?: boolean
    card_number?: boolean
    cvv?: boolean
    activation_code?: boolean
    online_page_url?: boolean
    notes?: boolean
    card_image_url?: boolean
    purchase_date?: boolean
    card_color?: boolean
    data?: boolean
    created_date?: boolean
  }, ExtArgs["result"]["sharedCard"]>

  export type SharedCardSelectScalar = {
    id?: boolean
    card_id?: boolean
    user_email?: boolean
    shared_with?: boolean
    group_id?: boolean
    shared_with_group_id?: boolean
    created_by?: boolean
    balance?: boolean
    card_name?: boolean
    vendor?: boolean
    expiry_date?: boolean
    card_type?: boolean
    card_number?: boolean
    cvv?: boolean
    activation_code?: boolean
    online_page_url?: boolean
    notes?: boolean
    card_image_url?: boolean
    purchase_date?: boolean
    card_color?: boolean
    data?: boolean
    created_date?: boolean
  }


  export type $SharedCardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SharedCard"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      card_id: number
      user_email: string | null
      shared_with: string | null
      group_id: number | null
      shared_with_group_id: number | null
      created_by: string | null
      balance: number | null
      card_name: string | null
      vendor: string | null
      expiry_date: Date | null
      card_type: string | null
      card_number: string | null
      cvv: string | null
      activation_code: string | null
      online_page_url: string | null
      notes: string | null
      card_image_url: string | null
      purchase_date: Date | null
      card_color: string | null
      data: string | null
      created_date: Date
    }, ExtArgs["result"]["sharedCard"]>
    composites: {}
  }

  type SharedCardGetPayload<S extends boolean | null | undefined | SharedCardDefaultArgs> = $Result.GetResult<Prisma.$SharedCardPayload, S>

  type SharedCardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SharedCardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SharedCardCountAggregateInputType | true
    }

  export interface SharedCardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SharedCard'], meta: { name: 'SharedCard' } }
    /**
     * Find zero or one SharedCard that matches the filter.
     * @param {SharedCardFindUniqueArgs} args - Arguments to find a SharedCard
     * @example
     * // Get one SharedCard
     * const sharedCard = await prisma.sharedCard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SharedCardFindUniqueArgs>(args: SelectSubset<T, SharedCardFindUniqueArgs<ExtArgs>>): Prisma__SharedCardClient<$Result.GetResult<Prisma.$SharedCardPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SharedCard that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SharedCardFindUniqueOrThrowArgs} args - Arguments to find a SharedCard
     * @example
     * // Get one SharedCard
     * const sharedCard = await prisma.sharedCard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SharedCardFindUniqueOrThrowArgs>(args: SelectSubset<T, SharedCardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SharedCardClient<$Result.GetResult<Prisma.$SharedCardPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SharedCard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedCardFindFirstArgs} args - Arguments to find a SharedCard
     * @example
     * // Get one SharedCard
     * const sharedCard = await prisma.sharedCard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SharedCardFindFirstArgs>(args?: SelectSubset<T, SharedCardFindFirstArgs<ExtArgs>>): Prisma__SharedCardClient<$Result.GetResult<Prisma.$SharedCardPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SharedCard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedCardFindFirstOrThrowArgs} args - Arguments to find a SharedCard
     * @example
     * // Get one SharedCard
     * const sharedCard = await prisma.sharedCard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SharedCardFindFirstOrThrowArgs>(args?: SelectSubset<T, SharedCardFindFirstOrThrowArgs<ExtArgs>>): Prisma__SharedCardClient<$Result.GetResult<Prisma.$SharedCardPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SharedCards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedCardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SharedCards
     * const sharedCards = await prisma.sharedCard.findMany()
     * 
     * // Get first 10 SharedCards
     * const sharedCards = await prisma.sharedCard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sharedCardWithIdOnly = await prisma.sharedCard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SharedCardFindManyArgs>(args?: SelectSubset<T, SharedCardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SharedCardPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SharedCard.
     * @param {SharedCardCreateArgs} args - Arguments to create a SharedCard.
     * @example
     * // Create one SharedCard
     * const SharedCard = await prisma.sharedCard.create({
     *   data: {
     *     // ... data to create a SharedCard
     *   }
     * })
     * 
     */
    create<T extends SharedCardCreateArgs>(args: SelectSubset<T, SharedCardCreateArgs<ExtArgs>>): Prisma__SharedCardClient<$Result.GetResult<Prisma.$SharedCardPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SharedCards.
     * @param {SharedCardCreateManyArgs} args - Arguments to create many SharedCards.
     * @example
     * // Create many SharedCards
     * const sharedCard = await prisma.sharedCard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SharedCardCreateManyArgs>(args?: SelectSubset<T, SharedCardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SharedCards and returns the data saved in the database.
     * @param {SharedCardCreateManyAndReturnArgs} args - Arguments to create many SharedCards.
     * @example
     * // Create many SharedCards
     * const sharedCard = await prisma.sharedCard.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SharedCards and only return the `id`
     * const sharedCardWithIdOnly = await prisma.sharedCard.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SharedCardCreateManyAndReturnArgs>(args?: SelectSubset<T, SharedCardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SharedCardPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SharedCard.
     * @param {SharedCardDeleteArgs} args - Arguments to delete one SharedCard.
     * @example
     * // Delete one SharedCard
     * const SharedCard = await prisma.sharedCard.delete({
     *   where: {
     *     // ... filter to delete one SharedCard
     *   }
     * })
     * 
     */
    delete<T extends SharedCardDeleteArgs>(args: SelectSubset<T, SharedCardDeleteArgs<ExtArgs>>): Prisma__SharedCardClient<$Result.GetResult<Prisma.$SharedCardPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SharedCard.
     * @param {SharedCardUpdateArgs} args - Arguments to update one SharedCard.
     * @example
     * // Update one SharedCard
     * const sharedCard = await prisma.sharedCard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SharedCardUpdateArgs>(args: SelectSubset<T, SharedCardUpdateArgs<ExtArgs>>): Prisma__SharedCardClient<$Result.GetResult<Prisma.$SharedCardPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SharedCards.
     * @param {SharedCardDeleteManyArgs} args - Arguments to filter SharedCards to delete.
     * @example
     * // Delete a few SharedCards
     * const { count } = await prisma.sharedCard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SharedCardDeleteManyArgs>(args?: SelectSubset<T, SharedCardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SharedCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedCardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SharedCards
     * const sharedCard = await prisma.sharedCard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SharedCardUpdateManyArgs>(args: SelectSubset<T, SharedCardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SharedCard.
     * @param {SharedCardUpsertArgs} args - Arguments to update or create a SharedCard.
     * @example
     * // Update or create a SharedCard
     * const sharedCard = await prisma.sharedCard.upsert({
     *   create: {
     *     // ... data to create a SharedCard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SharedCard we want to update
     *   }
     * })
     */
    upsert<T extends SharedCardUpsertArgs>(args: SelectSubset<T, SharedCardUpsertArgs<ExtArgs>>): Prisma__SharedCardClient<$Result.GetResult<Prisma.$SharedCardPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SharedCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedCardCountArgs} args - Arguments to filter SharedCards to count.
     * @example
     * // Count the number of SharedCards
     * const count = await prisma.sharedCard.count({
     *   where: {
     *     // ... the filter for the SharedCards we want to count
     *   }
     * })
    **/
    count<T extends SharedCardCountArgs>(
      args?: Subset<T, SharedCardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SharedCardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SharedCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedCardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SharedCardAggregateArgs>(args: Subset<T, SharedCardAggregateArgs>): Prisma.PrismaPromise<GetSharedCardAggregateType<T>>

    /**
     * Group by SharedCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedCardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SharedCardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SharedCardGroupByArgs['orderBy'] }
        : { orderBy?: SharedCardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SharedCardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSharedCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SharedCard model
   */
  readonly fields: SharedCardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SharedCard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SharedCardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SharedCard model
   */ 
  interface SharedCardFieldRefs {
    readonly id: FieldRef<"SharedCard", 'Int'>
    readonly card_id: FieldRef<"SharedCard", 'Int'>
    readonly user_email: FieldRef<"SharedCard", 'String'>
    readonly shared_with: FieldRef<"SharedCard", 'String'>
    readonly group_id: FieldRef<"SharedCard", 'Int'>
    readonly shared_with_group_id: FieldRef<"SharedCard", 'Int'>
    readonly created_by: FieldRef<"SharedCard", 'String'>
    readonly balance: FieldRef<"SharedCard", 'Int'>
    readonly card_name: FieldRef<"SharedCard", 'String'>
    readonly vendor: FieldRef<"SharedCard", 'String'>
    readonly expiry_date: FieldRef<"SharedCard", 'DateTime'>
    readonly card_type: FieldRef<"SharedCard", 'String'>
    readonly card_number: FieldRef<"SharedCard", 'String'>
    readonly cvv: FieldRef<"SharedCard", 'String'>
    readonly activation_code: FieldRef<"SharedCard", 'String'>
    readonly online_page_url: FieldRef<"SharedCard", 'String'>
    readonly notes: FieldRef<"SharedCard", 'String'>
    readonly card_image_url: FieldRef<"SharedCard", 'String'>
    readonly purchase_date: FieldRef<"SharedCard", 'DateTime'>
    readonly card_color: FieldRef<"SharedCard", 'String'>
    readonly data: FieldRef<"SharedCard", 'String'>
    readonly created_date: FieldRef<"SharedCard", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SharedCard findUnique
   */
  export type SharedCardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SharedCard
     */
    select?: SharedCardSelect<ExtArgs> | null
    /**
     * Filter, which SharedCard to fetch.
     */
    where: SharedCardWhereUniqueInput
  }

  /**
   * SharedCard findUniqueOrThrow
   */
  export type SharedCardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SharedCard
     */
    select?: SharedCardSelect<ExtArgs> | null
    /**
     * Filter, which SharedCard to fetch.
     */
    where: SharedCardWhereUniqueInput
  }

  /**
   * SharedCard findFirst
   */
  export type SharedCardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SharedCard
     */
    select?: SharedCardSelect<ExtArgs> | null
    /**
     * Filter, which SharedCard to fetch.
     */
    where?: SharedCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SharedCards to fetch.
     */
    orderBy?: SharedCardOrderByWithRelationInput | SharedCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SharedCards.
     */
    cursor?: SharedCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SharedCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SharedCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SharedCards.
     */
    distinct?: SharedCardScalarFieldEnum | SharedCardScalarFieldEnum[]
  }

  /**
   * SharedCard findFirstOrThrow
   */
  export type SharedCardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SharedCard
     */
    select?: SharedCardSelect<ExtArgs> | null
    /**
     * Filter, which SharedCard to fetch.
     */
    where?: SharedCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SharedCards to fetch.
     */
    orderBy?: SharedCardOrderByWithRelationInput | SharedCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SharedCards.
     */
    cursor?: SharedCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SharedCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SharedCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SharedCards.
     */
    distinct?: SharedCardScalarFieldEnum | SharedCardScalarFieldEnum[]
  }

  /**
   * SharedCard findMany
   */
  export type SharedCardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SharedCard
     */
    select?: SharedCardSelect<ExtArgs> | null
    /**
     * Filter, which SharedCards to fetch.
     */
    where?: SharedCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SharedCards to fetch.
     */
    orderBy?: SharedCardOrderByWithRelationInput | SharedCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SharedCards.
     */
    cursor?: SharedCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SharedCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SharedCards.
     */
    skip?: number
    distinct?: SharedCardScalarFieldEnum | SharedCardScalarFieldEnum[]
  }

  /**
   * SharedCard create
   */
  export type SharedCardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SharedCard
     */
    select?: SharedCardSelect<ExtArgs> | null
    /**
     * The data needed to create a SharedCard.
     */
    data: XOR<SharedCardCreateInput, SharedCardUncheckedCreateInput>
  }

  /**
   * SharedCard createMany
   */
  export type SharedCardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SharedCards.
     */
    data: SharedCardCreateManyInput | SharedCardCreateManyInput[]
  }

  /**
   * SharedCard createManyAndReturn
   */
  export type SharedCardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SharedCard
     */
    select?: SharedCardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SharedCards.
     */
    data: SharedCardCreateManyInput | SharedCardCreateManyInput[]
  }

  /**
   * SharedCard update
   */
  export type SharedCardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SharedCard
     */
    select?: SharedCardSelect<ExtArgs> | null
    /**
     * The data needed to update a SharedCard.
     */
    data: XOR<SharedCardUpdateInput, SharedCardUncheckedUpdateInput>
    /**
     * Choose, which SharedCard to update.
     */
    where: SharedCardWhereUniqueInput
  }

  /**
   * SharedCard updateMany
   */
  export type SharedCardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SharedCards.
     */
    data: XOR<SharedCardUpdateManyMutationInput, SharedCardUncheckedUpdateManyInput>
    /**
     * Filter which SharedCards to update
     */
    where?: SharedCardWhereInput
  }

  /**
   * SharedCard upsert
   */
  export type SharedCardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SharedCard
     */
    select?: SharedCardSelect<ExtArgs> | null
    /**
     * The filter to search for the SharedCard to update in case it exists.
     */
    where: SharedCardWhereUniqueInput
    /**
     * In case the SharedCard found by the `where` argument doesn't exist, create a new SharedCard with this data.
     */
    create: XOR<SharedCardCreateInput, SharedCardUncheckedCreateInput>
    /**
     * In case the SharedCard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SharedCardUpdateInput, SharedCardUncheckedUpdateInput>
  }

  /**
   * SharedCard delete
   */
  export type SharedCardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SharedCard
     */
    select?: SharedCardSelect<ExtArgs> | null
    /**
     * Filter which SharedCard to delete.
     */
    where: SharedCardWhereUniqueInput
  }

  /**
   * SharedCard deleteMany
   */
  export type SharedCardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SharedCards to delete
     */
    where?: SharedCardWhereInput
  }

  /**
   * SharedCard without action
   */
  export type SharedCardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SharedCard
     */
    select?: SharedCardSelect<ExtArgs> | null
  }


  /**
   * Model UserCardType
   */

  export type AggregateUserCardType = {
    _count: UserCardTypeCountAggregateOutputType | null
    _avg: UserCardTypeAvgAggregateOutputType | null
    _sum: UserCardTypeSumAggregateOutputType | null
    _min: UserCardTypeMinAggregateOutputType | null
    _max: UserCardTypeMaxAggregateOutputType | null
  }

  export type UserCardTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type UserCardTypeSumAggregateOutputType = {
    id: number | null
  }

  export type UserCardTypeMinAggregateOutputType = {
    id: number | null
    user_email: string | null
    name: string | null
    color: string | null
    type_color: string | null
    supported_stores: string | null
  }

  export type UserCardTypeMaxAggregateOutputType = {
    id: number | null
    user_email: string | null
    name: string | null
    color: string | null
    type_color: string | null
    supported_stores: string | null
  }

  export type UserCardTypeCountAggregateOutputType = {
    id: number
    user_email: number
    name: number
    color: number
    type_color: number
    supported_stores: number
    _all: number
  }


  export type UserCardTypeAvgAggregateInputType = {
    id?: true
  }

  export type UserCardTypeSumAggregateInputType = {
    id?: true
  }

  export type UserCardTypeMinAggregateInputType = {
    id?: true
    user_email?: true
    name?: true
    color?: true
    type_color?: true
    supported_stores?: true
  }

  export type UserCardTypeMaxAggregateInputType = {
    id?: true
    user_email?: true
    name?: true
    color?: true
    type_color?: true
    supported_stores?: true
  }

  export type UserCardTypeCountAggregateInputType = {
    id?: true
    user_email?: true
    name?: true
    color?: true
    type_color?: true
    supported_stores?: true
    _all?: true
  }

  export type UserCardTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCardType to aggregate.
     */
    where?: UserCardTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCardTypes to fetch.
     */
    orderBy?: UserCardTypeOrderByWithRelationInput | UserCardTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserCardTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCardTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCardTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserCardTypes
    **/
    _count?: true | UserCardTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserCardTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserCardTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserCardTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserCardTypeMaxAggregateInputType
  }

  export type GetUserCardTypeAggregateType<T extends UserCardTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateUserCardType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserCardType[P]>
      : GetScalarType<T[P], AggregateUserCardType[P]>
  }




  export type UserCardTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCardTypeWhereInput
    orderBy?: UserCardTypeOrderByWithAggregationInput | UserCardTypeOrderByWithAggregationInput[]
    by: UserCardTypeScalarFieldEnum[] | UserCardTypeScalarFieldEnum
    having?: UserCardTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCardTypeCountAggregateInputType | true
    _avg?: UserCardTypeAvgAggregateInputType
    _sum?: UserCardTypeSumAggregateInputType
    _min?: UserCardTypeMinAggregateInputType
    _max?: UserCardTypeMaxAggregateInputType
  }

  export type UserCardTypeGroupByOutputType = {
    id: number
    user_email: string
    name: string | null
    color: string | null
    type_color: string | null
    supported_stores: string | null
    _count: UserCardTypeCountAggregateOutputType | null
    _avg: UserCardTypeAvgAggregateOutputType | null
    _sum: UserCardTypeSumAggregateOutputType | null
    _min: UserCardTypeMinAggregateOutputType | null
    _max: UserCardTypeMaxAggregateOutputType | null
  }

  type GetUserCardTypeGroupByPayload<T extends UserCardTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserCardTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserCardTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserCardTypeGroupByOutputType[P]>
            : GetScalarType<T[P], UserCardTypeGroupByOutputType[P]>
        }
      >
    >


  export type UserCardTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_email?: boolean
    name?: boolean
    color?: boolean
    type_color?: boolean
    supported_stores?: boolean
  }, ExtArgs["result"]["userCardType"]>

  export type UserCardTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_email?: boolean
    name?: boolean
    color?: boolean
    type_color?: boolean
    supported_stores?: boolean
  }, ExtArgs["result"]["userCardType"]>

  export type UserCardTypeSelectScalar = {
    id?: boolean
    user_email?: boolean
    name?: boolean
    color?: boolean
    type_color?: boolean
    supported_stores?: boolean
  }


  export type $UserCardTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserCardType"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_email: string
      name: string | null
      color: string | null
      type_color: string | null
      supported_stores: string | null
    }, ExtArgs["result"]["userCardType"]>
    composites: {}
  }

  type UserCardTypeGetPayload<S extends boolean | null | undefined | UserCardTypeDefaultArgs> = $Result.GetResult<Prisma.$UserCardTypePayload, S>

  type UserCardTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserCardTypeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCardTypeCountAggregateInputType | true
    }

  export interface UserCardTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserCardType'], meta: { name: 'UserCardType' } }
    /**
     * Find zero or one UserCardType that matches the filter.
     * @param {UserCardTypeFindUniqueArgs} args - Arguments to find a UserCardType
     * @example
     * // Get one UserCardType
     * const userCardType = await prisma.userCardType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserCardTypeFindUniqueArgs>(args: SelectSubset<T, UserCardTypeFindUniqueArgs<ExtArgs>>): Prisma__UserCardTypeClient<$Result.GetResult<Prisma.$UserCardTypePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserCardType that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserCardTypeFindUniqueOrThrowArgs} args - Arguments to find a UserCardType
     * @example
     * // Get one UserCardType
     * const userCardType = await prisma.userCardType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserCardTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, UserCardTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserCardTypeClient<$Result.GetResult<Prisma.$UserCardTypePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserCardType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardTypeFindFirstArgs} args - Arguments to find a UserCardType
     * @example
     * // Get one UserCardType
     * const userCardType = await prisma.userCardType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserCardTypeFindFirstArgs>(args?: SelectSubset<T, UserCardTypeFindFirstArgs<ExtArgs>>): Prisma__UserCardTypeClient<$Result.GetResult<Prisma.$UserCardTypePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserCardType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardTypeFindFirstOrThrowArgs} args - Arguments to find a UserCardType
     * @example
     * // Get one UserCardType
     * const userCardType = await prisma.userCardType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserCardTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, UserCardTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserCardTypeClient<$Result.GetResult<Prisma.$UserCardTypePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserCardTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserCardTypes
     * const userCardTypes = await prisma.userCardType.findMany()
     * 
     * // Get first 10 UserCardTypes
     * const userCardTypes = await prisma.userCardType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userCardTypeWithIdOnly = await prisma.userCardType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserCardTypeFindManyArgs>(args?: SelectSubset<T, UserCardTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCardTypePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserCardType.
     * @param {UserCardTypeCreateArgs} args - Arguments to create a UserCardType.
     * @example
     * // Create one UserCardType
     * const UserCardType = await prisma.userCardType.create({
     *   data: {
     *     // ... data to create a UserCardType
     *   }
     * })
     * 
     */
    create<T extends UserCardTypeCreateArgs>(args: SelectSubset<T, UserCardTypeCreateArgs<ExtArgs>>): Prisma__UserCardTypeClient<$Result.GetResult<Prisma.$UserCardTypePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserCardTypes.
     * @param {UserCardTypeCreateManyArgs} args - Arguments to create many UserCardTypes.
     * @example
     * // Create many UserCardTypes
     * const userCardType = await prisma.userCardType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCardTypeCreateManyArgs>(args?: SelectSubset<T, UserCardTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserCardTypes and returns the data saved in the database.
     * @param {UserCardTypeCreateManyAndReturnArgs} args - Arguments to create many UserCardTypes.
     * @example
     * // Create many UserCardTypes
     * const userCardType = await prisma.userCardType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserCardTypes and only return the `id`
     * const userCardTypeWithIdOnly = await prisma.userCardType.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCardTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCardTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCardTypePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserCardType.
     * @param {UserCardTypeDeleteArgs} args - Arguments to delete one UserCardType.
     * @example
     * // Delete one UserCardType
     * const UserCardType = await prisma.userCardType.delete({
     *   where: {
     *     // ... filter to delete one UserCardType
     *   }
     * })
     * 
     */
    delete<T extends UserCardTypeDeleteArgs>(args: SelectSubset<T, UserCardTypeDeleteArgs<ExtArgs>>): Prisma__UserCardTypeClient<$Result.GetResult<Prisma.$UserCardTypePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserCardType.
     * @param {UserCardTypeUpdateArgs} args - Arguments to update one UserCardType.
     * @example
     * // Update one UserCardType
     * const userCardType = await prisma.userCardType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserCardTypeUpdateArgs>(args: SelectSubset<T, UserCardTypeUpdateArgs<ExtArgs>>): Prisma__UserCardTypeClient<$Result.GetResult<Prisma.$UserCardTypePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserCardTypes.
     * @param {UserCardTypeDeleteManyArgs} args - Arguments to filter UserCardTypes to delete.
     * @example
     * // Delete a few UserCardTypes
     * const { count } = await prisma.userCardType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserCardTypeDeleteManyArgs>(args?: SelectSubset<T, UserCardTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserCardTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserCardTypes
     * const userCardType = await prisma.userCardType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserCardTypeUpdateManyArgs>(args: SelectSubset<T, UserCardTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserCardType.
     * @param {UserCardTypeUpsertArgs} args - Arguments to update or create a UserCardType.
     * @example
     * // Update or create a UserCardType
     * const userCardType = await prisma.userCardType.upsert({
     *   create: {
     *     // ... data to create a UserCardType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserCardType we want to update
     *   }
     * })
     */
    upsert<T extends UserCardTypeUpsertArgs>(args: SelectSubset<T, UserCardTypeUpsertArgs<ExtArgs>>): Prisma__UserCardTypeClient<$Result.GetResult<Prisma.$UserCardTypePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserCardTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardTypeCountArgs} args - Arguments to filter UserCardTypes to count.
     * @example
     * // Count the number of UserCardTypes
     * const count = await prisma.userCardType.count({
     *   where: {
     *     // ... the filter for the UserCardTypes we want to count
     *   }
     * })
    **/
    count<T extends UserCardTypeCountArgs>(
      args?: Subset<T, UserCardTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCardTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserCardType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserCardTypeAggregateArgs>(args: Subset<T, UserCardTypeAggregateArgs>): Prisma.PrismaPromise<GetUserCardTypeAggregateType<T>>

    /**
     * Group by UserCardType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserCardTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserCardTypeGroupByArgs['orderBy'] }
        : { orderBy?: UserCardTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserCardTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserCardTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserCardType model
   */
  readonly fields: UserCardTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserCardType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserCardTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserCardType model
   */ 
  interface UserCardTypeFieldRefs {
    readonly id: FieldRef<"UserCardType", 'Int'>
    readonly user_email: FieldRef<"UserCardType", 'String'>
    readonly name: FieldRef<"UserCardType", 'String'>
    readonly color: FieldRef<"UserCardType", 'String'>
    readonly type_color: FieldRef<"UserCardType", 'String'>
    readonly supported_stores: FieldRef<"UserCardType", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserCardType findUnique
   */
  export type UserCardTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardType
     */
    select?: UserCardTypeSelect<ExtArgs> | null
    /**
     * Filter, which UserCardType to fetch.
     */
    where: UserCardTypeWhereUniqueInput
  }

  /**
   * UserCardType findUniqueOrThrow
   */
  export type UserCardTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardType
     */
    select?: UserCardTypeSelect<ExtArgs> | null
    /**
     * Filter, which UserCardType to fetch.
     */
    where: UserCardTypeWhereUniqueInput
  }

  /**
   * UserCardType findFirst
   */
  export type UserCardTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardType
     */
    select?: UserCardTypeSelect<ExtArgs> | null
    /**
     * Filter, which UserCardType to fetch.
     */
    where?: UserCardTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCardTypes to fetch.
     */
    orderBy?: UserCardTypeOrderByWithRelationInput | UserCardTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCardTypes.
     */
    cursor?: UserCardTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCardTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCardTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCardTypes.
     */
    distinct?: UserCardTypeScalarFieldEnum | UserCardTypeScalarFieldEnum[]
  }

  /**
   * UserCardType findFirstOrThrow
   */
  export type UserCardTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardType
     */
    select?: UserCardTypeSelect<ExtArgs> | null
    /**
     * Filter, which UserCardType to fetch.
     */
    where?: UserCardTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCardTypes to fetch.
     */
    orderBy?: UserCardTypeOrderByWithRelationInput | UserCardTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCardTypes.
     */
    cursor?: UserCardTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCardTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCardTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCardTypes.
     */
    distinct?: UserCardTypeScalarFieldEnum | UserCardTypeScalarFieldEnum[]
  }

  /**
   * UserCardType findMany
   */
  export type UserCardTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardType
     */
    select?: UserCardTypeSelect<ExtArgs> | null
    /**
     * Filter, which UserCardTypes to fetch.
     */
    where?: UserCardTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCardTypes to fetch.
     */
    orderBy?: UserCardTypeOrderByWithRelationInput | UserCardTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserCardTypes.
     */
    cursor?: UserCardTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCardTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCardTypes.
     */
    skip?: number
    distinct?: UserCardTypeScalarFieldEnum | UserCardTypeScalarFieldEnum[]
  }

  /**
   * UserCardType create
   */
  export type UserCardTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardType
     */
    select?: UserCardTypeSelect<ExtArgs> | null
    /**
     * The data needed to create a UserCardType.
     */
    data: XOR<UserCardTypeCreateInput, UserCardTypeUncheckedCreateInput>
  }

  /**
   * UserCardType createMany
   */
  export type UserCardTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserCardTypes.
     */
    data: UserCardTypeCreateManyInput | UserCardTypeCreateManyInput[]
  }

  /**
   * UserCardType createManyAndReturn
   */
  export type UserCardTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardType
     */
    select?: UserCardTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserCardTypes.
     */
    data: UserCardTypeCreateManyInput | UserCardTypeCreateManyInput[]
  }

  /**
   * UserCardType update
   */
  export type UserCardTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardType
     */
    select?: UserCardTypeSelect<ExtArgs> | null
    /**
     * The data needed to update a UserCardType.
     */
    data: XOR<UserCardTypeUpdateInput, UserCardTypeUncheckedUpdateInput>
    /**
     * Choose, which UserCardType to update.
     */
    where: UserCardTypeWhereUniqueInput
  }

  /**
   * UserCardType updateMany
   */
  export type UserCardTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserCardTypes.
     */
    data: XOR<UserCardTypeUpdateManyMutationInput, UserCardTypeUncheckedUpdateManyInput>
    /**
     * Filter which UserCardTypes to update
     */
    where?: UserCardTypeWhereInput
  }

  /**
   * UserCardType upsert
   */
  export type UserCardTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardType
     */
    select?: UserCardTypeSelect<ExtArgs> | null
    /**
     * The filter to search for the UserCardType to update in case it exists.
     */
    where: UserCardTypeWhereUniqueInput
    /**
     * In case the UserCardType found by the `where` argument doesn't exist, create a new UserCardType with this data.
     */
    create: XOR<UserCardTypeCreateInput, UserCardTypeUncheckedCreateInput>
    /**
     * In case the UserCardType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserCardTypeUpdateInput, UserCardTypeUncheckedUpdateInput>
  }

  /**
   * UserCardType delete
   */
  export type UserCardTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardType
     */
    select?: UserCardTypeSelect<ExtArgs> | null
    /**
     * Filter which UserCardType to delete.
     */
    where: UserCardTypeWhereUniqueInput
  }

  /**
   * UserCardType deleteMany
   */
  export type UserCardTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCardTypes to delete
     */
    where?: UserCardTypeWhereInput
  }

  /**
   * UserCardType without action
   */
  export type UserCardTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCardType
     */
    select?: UserCardTypeSelect<ExtArgs> | null
  }


  /**
   * Model CardActivityLog
   */

  export type AggregateCardActivityLog = {
    _count: CardActivityLogCountAggregateOutputType | null
    _avg: CardActivityLogAvgAggregateOutputType | null
    _sum: CardActivityLogSumAggregateOutputType | null
    _min: CardActivityLogMinAggregateOutputType | null
    _max: CardActivityLogMaxAggregateOutputType | null
  }

  export type CardActivityLogAvgAggregateOutputType = {
    id: number | null
    card_id: number | null
  }

  export type CardActivityLogSumAggregateOutputType = {
    id: number | null
    card_id: number | null
  }

  export type CardActivityLogMinAggregateOutputType = {
    id: number | null
    card_id: number | null
    card_type_field: string | null
    action: string | null
    user_email: string | null
    user_name: string | null
    details: string | null
    card_data: string | null
    before_data: string | null
    timestamp: Date | null
  }

  export type CardActivityLogMaxAggregateOutputType = {
    id: number | null
    card_id: number | null
    card_type_field: string | null
    action: string | null
    user_email: string | null
    user_name: string | null
    details: string | null
    card_data: string | null
    before_data: string | null
    timestamp: Date | null
  }

  export type CardActivityLogCountAggregateOutputType = {
    id: number
    card_id: number
    card_type_field: number
    action: number
    user_email: number
    user_name: number
    details: number
    card_data: number
    before_data: number
    timestamp: number
    _all: number
  }


  export type CardActivityLogAvgAggregateInputType = {
    id?: true
    card_id?: true
  }

  export type CardActivityLogSumAggregateInputType = {
    id?: true
    card_id?: true
  }

  export type CardActivityLogMinAggregateInputType = {
    id?: true
    card_id?: true
    card_type_field?: true
    action?: true
    user_email?: true
    user_name?: true
    details?: true
    card_data?: true
    before_data?: true
    timestamp?: true
  }

  export type CardActivityLogMaxAggregateInputType = {
    id?: true
    card_id?: true
    card_type_field?: true
    action?: true
    user_email?: true
    user_name?: true
    details?: true
    card_data?: true
    before_data?: true
    timestamp?: true
  }

  export type CardActivityLogCountAggregateInputType = {
    id?: true
    card_id?: true
    card_type_field?: true
    action?: true
    user_email?: true
    user_name?: true
    details?: true
    card_data?: true
    before_data?: true
    timestamp?: true
    _all?: true
  }

  export type CardActivityLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CardActivityLog to aggregate.
     */
    where?: CardActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardActivityLogs to fetch.
     */
    orderBy?: CardActivityLogOrderByWithRelationInput | CardActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CardActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardActivityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CardActivityLogs
    **/
    _count?: true | CardActivityLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CardActivityLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CardActivityLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CardActivityLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CardActivityLogMaxAggregateInputType
  }

  export type GetCardActivityLogAggregateType<T extends CardActivityLogAggregateArgs> = {
        [P in keyof T & keyof AggregateCardActivityLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCardActivityLog[P]>
      : GetScalarType<T[P], AggregateCardActivityLog[P]>
  }




  export type CardActivityLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardActivityLogWhereInput
    orderBy?: CardActivityLogOrderByWithAggregationInput | CardActivityLogOrderByWithAggregationInput[]
    by: CardActivityLogScalarFieldEnum[] | CardActivityLogScalarFieldEnum
    having?: CardActivityLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CardActivityLogCountAggregateInputType | true
    _avg?: CardActivityLogAvgAggregateInputType
    _sum?: CardActivityLogSumAggregateInputType
    _min?: CardActivityLogMinAggregateInputType
    _max?: CardActivityLogMaxAggregateInputType
  }

  export type CardActivityLogGroupByOutputType = {
    id: number
    card_id: number | null
    card_type_field: string | null
    action: string
    user_email: string | null
    user_name: string | null
    details: string | null
    card_data: string | null
    before_data: string | null
    timestamp: Date
    _count: CardActivityLogCountAggregateOutputType | null
    _avg: CardActivityLogAvgAggregateOutputType | null
    _sum: CardActivityLogSumAggregateOutputType | null
    _min: CardActivityLogMinAggregateOutputType | null
    _max: CardActivityLogMaxAggregateOutputType | null
  }

  type GetCardActivityLogGroupByPayload<T extends CardActivityLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CardActivityLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CardActivityLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CardActivityLogGroupByOutputType[P]>
            : GetScalarType<T[P], CardActivityLogGroupByOutputType[P]>
        }
      >
    >


  export type CardActivityLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    card_id?: boolean
    card_type_field?: boolean
    action?: boolean
    user_email?: boolean
    user_name?: boolean
    details?: boolean
    card_data?: boolean
    before_data?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["cardActivityLog"]>

  export type CardActivityLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    card_id?: boolean
    card_type_field?: boolean
    action?: boolean
    user_email?: boolean
    user_name?: boolean
    details?: boolean
    card_data?: boolean
    before_data?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["cardActivityLog"]>

  export type CardActivityLogSelectScalar = {
    id?: boolean
    card_id?: boolean
    card_type_field?: boolean
    action?: boolean
    user_email?: boolean
    user_name?: boolean
    details?: boolean
    card_data?: boolean
    before_data?: boolean
    timestamp?: boolean
  }


  export type $CardActivityLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CardActivityLog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      card_id: number | null
      card_type_field: string | null
      action: string
      user_email: string | null
      user_name: string | null
      details: string | null
      card_data: string | null
      before_data: string | null
      timestamp: Date
    }, ExtArgs["result"]["cardActivityLog"]>
    composites: {}
  }

  type CardActivityLogGetPayload<S extends boolean | null | undefined | CardActivityLogDefaultArgs> = $Result.GetResult<Prisma.$CardActivityLogPayload, S>

  type CardActivityLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CardActivityLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CardActivityLogCountAggregateInputType | true
    }

  export interface CardActivityLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CardActivityLog'], meta: { name: 'CardActivityLog' } }
    /**
     * Find zero or one CardActivityLog that matches the filter.
     * @param {CardActivityLogFindUniqueArgs} args - Arguments to find a CardActivityLog
     * @example
     * // Get one CardActivityLog
     * const cardActivityLog = await prisma.cardActivityLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CardActivityLogFindUniqueArgs>(args: SelectSubset<T, CardActivityLogFindUniqueArgs<ExtArgs>>): Prisma__CardActivityLogClient<$Result.GetResult<Prisma.$CardActivityLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CardActivityLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CardActivityLogFindUniqueOrThrowArgs} args - Arguments to find a CardActivityLog
     * @example
     * // Get one CardActivityLog
     * const cardActivityLog = await prisma.cardActivityLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CardActivityLogFindUniqueOrThrowArgs>(args: SelectSubset<T, CardActivityLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CardActivityLogClient<$Result.GetResult<Prisma.$CardActivityLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CardActivityLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardActivityLogFindFirstArgs} args - Arguments to find a CardActivityLog
     * @example
     * // Get one CardActivityLog
     * const cardActivityLog = await prisma.cardActivityLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CardActivityLogFindFirstArgs>(args?: SelectSubset<T, CardActivityLogFindFirstArgs<ExtArgs>>): Prisma__CardActivityLogClient<$Result.GetResult<Prisma.$CardActivityLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CardActivityLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardActivityLogFindFirstOrThrowArgs} args - Arguments to find a CardActivityLog
     * @example
     * // Get one CardActivityLog
     * const cardActivityLog = await prisma.cardActivityLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CardActivityLogFindFirstOrThrowArgs>(args?: SelectSubset<T, CardActivityLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__CardActivityLogClient<$Result.GetResult<Prisma.$CardActivityLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CardActivityLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardActivityLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CardActivityLogs
     * const cardActivityLogs = await prisma.cardActivityLog.findMany()
     * 
     * // Get first 10 CardActivityLogs
     * const cardActivityLogs = await prisma.cardActivityLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cardActivityLogWithIdOnly = await prisma.cardActivityLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CardActivityLogFindManyArgs>(args?: SelectSubset<T, CardActivityLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardActivityLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CardActivityLog.
     * @param {CardActivityLogCreateArgs} args - Arguments to create a CardActivityLog.
     * @example
     * // Create one CardActivityLog
     * const CardActivityLog = await prisma.cardActivityLog.create({
     *   data: {
     *     // ... data to create a CardActivityLog
     *   }
     * })
     * 
     */
    create<T extends CardActivityLogCreateArgs>(args: SelectSubset<T, CardActivityLogCreateArgs<ExtArgs>>): Prisma__CardActivityLogClient<$Result.GetResult<Prisma.$CardActivityLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CardActivityLogs.
     * @param {CardActivityLogCreateManyArgs} args - Arguments to create many CardActivityLogs.
     * @example
     * // Create many CardActivityLogs
     * const cardActivityLog = await prisma.cardActivityLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CardActivityLogCreateManyArgs>(args?: SelectSubset<T, CardActivityLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CardActivityLogs and returns the data saved in the database.
     * @param {CardActivityLogCreateManyAndReturnArgs} args - Arguments to create many CardActivityLogs.
     * @example
     * // Create many CardActivityLogs
     * const cardActivityLog = await prisma.cardActivityLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CardActivityLogs and only return the `id`
     * const cardActivityLogWithIdOnly = await prisma.cardActivityLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CardActivityLogCreateManyAndReturnArgs>(args?: SelectSubset<T, CardActivityLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardActivityLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CardActivityLog.
     * @param {CardActivityLogDeleteArgs} args - Arguments to delete one CardActivityLog.
     * @example
     * // Delete one CardActivityLog
     * const CardActivityLog = await prisma.cardActivityLog.delete({
     *   where: {
     *     // ... filter to delete one CardActivityLog
     *   }
     * })
     * 
     */
    delete<T extends CardActivityLogDeleteArgs>(args: SelectSubset<T, CardActivityLogDeleteArgs<ExtArgs>>): Prisma__CardActivityLogClient<$Result.GetResult<Prisma.$CardActivityLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CardActivityLog.
     * @param {CardActivityLogUpdateArgs} args - Arguments to update one CardActivityLog.
     * @example
     * // Update one CardActivityLog
     * const cardActivityLog = await prisma.cardActivityLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CardActivityLogUpdateArgs>(args: SelectSubset<T, CardActivityLogUpdateArgs<ExtArgs>>): Prisma__CardActivityLogClient<$Result.GetResult<Prisma.$CardActivityLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CardActivityLogs.
     * @param {CardActivityLogDeleteManyArgs} args - Arguments to filter CardActivityLogs to delete.
     * @example
     * // Delete a few CardActivityLogs
     * const { count } = await prisma.cardActivityLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CardActivityLogDeleteManyArgs>(args?: SelectSubset<T, CardActivityLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CardActivityLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardActivityLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CardActivityLogs
     * const cardActivityLog = await prisma.cardActivityLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CardActivityLogUpdateManyArgs>(args: SelectSubset<T, CardActivityLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CardActivityLog.
     * @param {CardActivityLogUpsertArgs} args - Arguments to update or create a CardActivityLog.
     * @example
     * // Update or create a CardActivityLog
     * const cardActivityLog = await prisma.cardActivityLog.upsert({
     *   create: {
     *     // ... data to create a CardActivityLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CardActivityLog we want to update
     *   }
     * })
     */
    upsert<T extends CardActivityLogUpsertArgs>(args: SelectSubset<T, CardActivityLogUpsertArgs<ExtArgs>>): Prisma__CardActivityLogClient<$Result.GetResult<Prisma.$CardActivityLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CardActivityLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardActivityLogCountArgs} args - Arguments to filter CardActivityLogs to count.
     * @example
     * // Count the number of CardActivityLogs
     * const count = await prisma.cardActivityLog.count({
     *   where: {
     *     // ... the filter for the CardActivityLogs we want to count
     *   }
     * })
    **/
    count<T extends CardActivityLogCountArgs>(
      args?: Subset<T, CardActivityLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CardActivityLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CardActivityLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardActivityLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CardActivityLogAggregateArgs>(args: Subset<T, CardActivityLogAggregateArgs>): Prisma.PrismaPromise<GetCardActivityLogAggregateType<T>>

    /**
     * Group by CardActivityLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardActivityLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CardActivityLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CardActivityLogGroupByArgs['orderBy'] }
        : { orderBy?: CardActivityLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CardActivityLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCardActivityLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CardActivityLog model
   */
  readonly fields: CardActivityLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CardActivityLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CardActivityLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CardActivityLog model
   */ 
  interface CardActivityLogFieldRefs {
    readonly id: FieldRef<"CardActivityLog", 'Int'>
    readonly card_id: FieldRef<"CardActivityLog", 'Int'>
    readonly card_type_field: FieldRef<"CardActivityLog", 'String'>
    readonly action: FieldRef<"CardActivityLog", 'String'>
    readonly user_email: FieldRef<"CardActivityLog", 'String'>
    readonly user_name: FieldRef<"CardActivityLog", 'String'>
    readonly details: FieldRef<"CardActivityLog", 'String'>
    readonly card_data: FieldRef<"CardActivityLog", 'String'>
    readonly before_data: FieldRef<"CardActivityLog", 'String'>
    readonly timestamp: FieldRef<"CardActivityLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CardActivityLog findUnique
   */
  export type CardActivityLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardActivityLog
     */
    select?: CardActivityLogSelect<ExtArgs> | null
    /**
     * Filter, which CardActivityLog to fetch.
     */
    where: CardActivityLogWhereUniqueInput
  }

  /**
   * CardActivityLog findUniqueOrThrow
   */
  export type CardActivityLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardActivityLog
     */
    select?: CardActivityLogSelect<ExtArgs> | null
    /**
     * Filter, which CardActivityLog to fetch.
     */
    where: CardActivityLogWhereUniqueInput
  }

  /**
   * CardActivityLog findFirst
   */
  export type CardActivityLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardActivityLog
     */
    select?: CardActivityLogSelect<ExtArgs> | null
    /**
     * Filter, which CardActivityLog to fetch.
     */
    where?: CardActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardActivityLogs to fetch.
     */
    orderBy?: CardActivityLogOrderByWithRelationInput | CardActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CardActivityLogs.
     */
    cursor?: CardActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardActivityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CardActivityLogs.
     */
    distinct?: CardActivityLogScalarFieldEnum | CardActivityLogScalarFieldEnum[]
  }

  /**
   * CardActivityLog findFirstOrThrow
   */
  export type CardActivityLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardActivityLog
     */
    select?: CardActivityLogSelect<ExtArgs> | null
    /**
     * Filter, which CardActivityLog to fetch.
     */
    where?: CardActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardActivityLogs to fetch.
     */
    orderBy?: CardActivityLogOrderByWithRelationInput | CardActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CardActivityLogs.
     */
    cursor?: CardActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardActivityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CardActivityLogs.
     */
    distinct?: CardActivityLogScalarFieldEnum | CardActivityLogScalarFieldEnum[]
  }

  /**
   * CardActivityLog findMany
   */
  export type CardActivityLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardActivityLog
     */
    select?: CardActivityLogSelect<ExtArgs> | null
    /**
     * Filter, which CardActivityLogs to fetch.
     */
    where?: CardActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardActivityLogs to fetch.
     */
    orderBy?: CardActivityLogOrderByWithRelationInput | CardActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CardActivityLogs.
     */
    cursor?: CardActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardActivityLogs.
     */
    skip?: number
    distinct?: CardActivityLogScalarFieldEnum | CardActivityLogScalarFieldEnum[]
  }

  /**
   * CardActivityLog create
   */
  export type CardActivityLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardActivityLog
     */
    select?: CardActivityLogSelect<ExtArgs> | null
    /**
     * The data needed to create a CardActivityLog.
     */
    data: XOR<CardActivityLogCreateInput, CardActivityLogUncheckedCreateInput>
  }

  /**
   * CardActivityLog createMany
   */
  export type CardActivityLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CardActivityLogs.
     */
    data: CardActivityLogCreateManyInput | CardActivityLogCreateManyInput[]
  }

  /**
   * CardActivityLog createManyAndReturn
   */
  export type CardActivityLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardActivityLog
     */
    select?: CardActivityLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CardActivityLogs.
     */
    data: CardActivityLogCreateManyInput | CardActivityLogCreateManyInput[]
  }

  /**
   * CardActivityLog update
   */
  export type CardActivityLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardActivityLog
     */
    select?: CardActivityLogSelect<ExtArgs> | null
    /**
     * The data needed to update a CardActivityLog.
     */
    data: XOR<CardActivityLogUpdateInput, CardActivityLogUncheckedUpdateInput>
    /**
     * Choose, which CardActivityLog to update.
     */
    where: CardActivityLogWhereUniqueInput
  }

  /**
   * CardActivityLog updateMany
   */
  export type CardActivityLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CardActivityLogs.
     */
    data: XOR<CardActivityLogUpdateManyMutationInput, CardActivityLogUncheckedUpdateManyInput>
    /**
     * Filter which CardActivityLogs to update
     */
    where?: CardActivityLogWhereInput
  }

  /**
   * CardActivityLog upsert
   */
  export type CardActivityLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardActivityLog
     */
    select?: CardActivityLogSelect<ExtArgs> | null
    /**
     * The filter to search for the CardActivityLog to update in case it exists.
     */
    where: CardActivityLogWhereUniqueInput
    /**
     * In case the CardActivityLog found by the `where` argument doesn't exist, create a new CardActivityLog with this data.
     */
    create: XOR<CardActivityLogCreateInput, CardActivityLogUncheckedCreateInput>
    /**
     * In case the CardActivityLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CardActivityLogUpdateInput, CardActivityLogUncheckedUpdateInput>
  }

  /**
   * CardActivityLog delete
   */
  export type CardActivityLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardActivityLog
     */
    select?: CardActivityLogSelect<ExtArgs> | null
    /**
     * Filter which CardActivityLog to delete.
     */
    where: CardActivityLogWhereUniqueInput
  }

  /**
   * CardActivityLog deleteMany
   */
  export type CardActivityLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CardActivityLogs to delete
     */
    where?: CardActivityLogWhereInput
  }

  /**
   * CardActivityLog without action
   */
  export type CardActivityLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardActivityLog
     */
    select?: CardActivityLogSelect<ExtArgs> | null
  }


  /**
   * Model ArchiveRequest
   */

  export type AggregateArchiveRequest = {
    _count: ArchiveRequestCountAggregateOutputType | null
    _avg: ArchiveRequestAvgAggregateOutputType | null
    _sum: ArchiveRequestSumAggregateOutputType | null
    _min: ArchiveRequestMinAggregateOutputType | null
    _max: ArchiveRequestMaxAggregateOutputType | null
  }

  export type ArchiveRequestAvgAggregateOutputType = {
    id: number | null
    card_id: number | null
  }

  export type ArchiveRequestSumAggregateOutputType = {
    id: number | null
    card_id: number | null
  }

  export type ArchiveRequestMinAggregateOutputType = {
    id: number | null
    card_id: number | null
    requester_email: string | null
    status: string | null
    details: string | null
    createdAt: Date | null
  }

  export type ArchiveRequestMaxAggregateOutputType = {
    id: number | null
    card_id: number | null
    requester_email: string | null
    status: string | null
    details: string | null
    createdAt: Date | null
  }

  export type ArchiveRequestCountAggregateOutputType = {
    id: number
    card_id: number
    requester_email: number
    status: number
    details: number
    createdAt: number
    _all: number
  }


  export type ArchiveRequestAvgAggregateInputType = {
    id?: true
    card_id?: true
  }

  export type ArchiveRequestSumAggregateInputType = {
    id?: true
    card_id?: true
  }

  export type ArchiveRequestMinAggregateInputType = {
    id?: true
    card_id?: true
    requester_email?: true
    status?: true
    details?: true
    createdAt?: true
  }

  export type ArchiveRequestMaxAggregateInputType = {
    id?: true
    card_id?: true
    requester_email?: true
    status?: true
    details?: true
    createdAt?: true
  }

  export type ArchiveRequestCountAggregateInputType = {
    id?: true
    card_id?: true
    requester_email?: true
    status?: true
    details?: true
    createdAt?: true
    _all?: true
  }

  export type ArchiveRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArchiveRequest to aggregate.
     */
    where?: ArchiveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchiveRequests to fetch.
     */
    orderBy?: ArchiveRequestOrderByWithRelationInput | ArchiveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArchiveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchiveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchiveRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ArchiveRequests
    **/
    _count?: true | ArchiveRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArchiveRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArchiveRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArchiveRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArchiveRequestMaxAggregateInputType
  }

  export type GetArchiveRequestAggregateType<T extends ArchiveRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateArchiveRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArchiveRequest[P]>
      : GetScalarType<T[P], AggregateArchiveRequest[P]>
  }




  export type ArchiveRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArchiveRequestWhereInput
    orderBy?: ArchiveRequestOrderByWithAggregationInput | ArchiveRequestOrderByWithAggregationInput[]
    by: ArchiveRequestScalarFieldEnum[] | ArchiveRequestScalarFieldEnum
    having?: ArchiveRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArchiveRequestCountAggregateInputType | true
    _avg?: ArchiveRequestAvgAggregateInputType
    _sum?: ArchiveRequestSumAggregateInputType
    _min?: ArchiveRequestMinAggregateInputType
    _max?: ArchiveRequestMaxAggregateInputType
  }

  export type ArchiveRequestGroupByOutputType = {
    id: number
    card_id: number | null
    requester_email: string | null
    status: string | null
    details: string | null
    createdAt: Date
    _count: ArchiveRequestCountAggregateOutputType | null
    _avg: ArchiveRequestAvgAggregateOutputType | null
    _sum: ArchiveRequestSumAggregateOutputType | null
    _min: ArchiveRequestMinAggregateOutputType | null
    _max: ArchiveRequestMaxAggregateOutputType | null
  }

  type GetArchiveRequestGroupByPayload<T extends ArchiveRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArchiveRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArchiveRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArchiveRequestGroupByOutputType[P]>
            : GetScalarType<T[P], ArchiveRequestGroupByOutputType[P]>
        }
      >
    >


  export type ArchiveRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    card_id?: boolean
    requester_email?: boolean
    status?: boolean
    details?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["archiveRequest"]>

  export type ArchiveRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    card_id?: boolean
    requester_email?: boolean
    status?: boolean
    details?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["archiveRequest"]>

  export type ArchiveRequestSelectScalar = {
    id?: boolean
    card_id?: boolean
    requester_email?: boolean
    status?: boolean
    details?: boolean
    createdAt?: boolean
  }


  export type $ArchiveRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ArchiveRequest"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      card_id: number | null
      requester_email: string | null
      status: string | null
      details: string | null
      createdAt: Date
    }, ExtArgs["result"]["archiveRequest"]>
    composites: {}
  }

  type ArchiveRequestGetPayload<S extends boolean | null | undefined | ArchiveRequestDefaultArgs> = $Result.GetResult<Prisma.$ArchiveRequestPayload, S>

  type ArchiveRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ArchiveRequestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ArchiveRequestCountAggregateInputType | true
    }

  export interface ArchiveRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ArchiveRequest'], meta: { name: 'ArchiveRequest' } }
    /**
     * Find zero or one ArchiveRequest that matches the filter.
     * @param {ArchiveRequestFindUniqueArgs} args - Arguments to find a ArchiveRequest
     * @example
     * // Get one ArchiveRequest
     * const archiveRequest = await prisma.archiveRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ArchiveRequestFindUniqueArgs>(args: SelectSubset<T, ArchiveRequestFindUniqueArgs<ExtArgs>>): Prisma__ArchiveRequestClient<$Result.GetResult<Prisma.$ArchiveRequestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ArchiveRequest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ArchiveRequestFindUniqueOrThrowArgs} args - Arguments to find a ArchiveRequest
     * @example
     * // Get one ArchiveRequest
     * const archiveRequest = await prisma.archiveRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ArchiveRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, ArchiveRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ArchiveRequestClient<$Result.GetResult<Prisma.$ArchiveRequestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ArchiveRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchiveRequestFindFirstArgs} args - Arguments to find a ArchiveRequest
     * @example
     * // Get one ArchiveRequest
     * const archiveRequest = await prisma.archiveRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ArchiveRequestFindFirstArgs>(args?: SelectSubset<T, ArchiveRequestFindFirstArgs<ExtArgs>>): Prisma__ArchiveRequestClient<$Result.GetResult<Prisma.$ArchiveRequestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ArchiveRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchiveRequestFindFirstOrThrowArgs} args - Arguments to find a ArchiveRequest
     * @example
     * // Get one ArchiveRequest
     * const archiveRequest = await prisma.archiveRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ArchiveRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, ArchiveRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__ArchiveRequestClient<$Result.GetResult<Prisma.$ArchiveRequestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ArchiveRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchiveRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ArchiveRequests
     * const archiveRequests = await prisma.archiveRequest.findMany()
     * 
     * // Get first 10 ArchiveRequests
     * const archiveRequests = await prisma.archiveRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const archiveRequestWithIdOnly = await prisma.archiveRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ArchiveRequestFindManyArgs>(args?: SelectSubset<T, ArchiveRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArchiveRequestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ArchiveRequest.
     * @param {ArchiveRequestCreateArgs} args - Arguments to create a ArchiveRequest.
     * @example
     * // Create one ArchiveRequest
     * const ArchiveRequest = await prisma.archiveRequest.create({
     *   data: {
     *     // ... data to create a ArchiveRequest
     *   }
     * })
     * 
     */
    create<T extends ArchiveRequestCreateArgs>(args: SelectSubset<T, ArchiveRequestCreateArgs<ExtArgs>>): Prisma__ArchiveRequestClient<$Result.GetResult<Prisma.$ArchiveRequestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ArchiveRequests.
     * @param {ArchiveRequestCreateManyArgs} args - Arguments to create many ArchiveRequests.
     * @example
     * // Create many ArchiveRequests
     * const archiveRequest = await prisma.archiveRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ArchiveRequestCreateManyArgs>(args?: SelectSubset<T, ArchiveRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ArchiveRequests and returns the data saved in the database.
     * @param {ArchiveRequestCreateManyAndReturnArgs} args - Arguments to create many ArchiveRequests.
     * @example
     * // Create many ArchiveRequests
     * const archiveRequest = await prisma.archiveRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ArchiveRequests and only return the `id`
     * const archiveRequestWithIdOnly = await prisma.archiveRequest.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ArchiveRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, ArchiveRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArchiveRequestPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ArchiveRequest.
     * @param {ArchiveRequestDeleteArgs} args - Arguments to delete one ArchiveRequest.
     * @example
     * // Delete one ArchiveRequest
     * const ArchiveRequest = await prisma.archiveRequest.delete({
     *   where: {
     *     // ... filter to delete one ArchiveRequest
     *   }
     * })
     * 
     */
    delete<T extends ArchiveRequestDeleteArgs>(args: SelectSubset<T, ArchiveRequestDeleteArgs<ExtArgs>>): Prisma__ArchiveRequestClient<$Result.GetResult<Prisma.$ArchiveRequestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ArchiveRequest.
     * @param {ArchiveRequestUpdateArgs} args - Arguments to update one ArchiveRequest.
     * @example
     * // Update one ArchiveRequest
     * const archiveRequest = await prisma.archiveRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ArchiveRequestUpdateArgs>(args: SelectSubset<T, ArchiveRequestUpdateArgs<ExtArgs>>): Prisma__ArchiveRequestClient<$Result.GetResult<Prisma.$ArchiveRequestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ArchiveRequests.
     * @param {ArchiveRequestDeleteManyArgs} args - Arguments to filter ArchiveRequests to delete.
     * @example
     * // Delete a few ArchiveRequests
     * const { count } = await prisma.archiveRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ArchiveRequestDeleteManyArgs>(args?: SelectSubset<T, ArchiveRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ArchiveRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchiveRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ArchiveRequests
     * const archiveRequest = await prisma.archiveRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ArchiveRequestUpdateManyArgs>(args: SelectSubset<T, ArchiveRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ArchiveRequest.
     * @param {ArchiveRequestUpsertArgs} args - Arguments to update or create a ArchiveRequest.
     * @example
     * // Update or create a ArchiveRequest
     * const archiveRequest = await prisma.archiveRequest.upsert({
     *   create: {
     *     // ... data to create a ArchiveRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ArchiveRequest we want to update
     *   }
     * })
     */
    upsert<T extends ArchiveRequestUpsertArgs>(args: SelectSubset<T, ArchiveRequestUpsertArgs<ExtArgs>>): Prisma__ArchiveRequestClient<$Result.GetResult<Prisma.$ArchiveRequestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ArchiveRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchiveRequestCountArgs} args - Arguments to filter ArchiveRequests to count.
     * @example
     * // Count the number of ArchiveRequests
     * const count = await prisma.archiveRequest.count({
     *   where: {
     *     // ... the filter for the ArchiveRequests we want to count
     *   }
     * })
    **/
    count<T extends ArchiveRequestCountArgs>(
      args?: Subset<T, ArchiveRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArchiveRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ArchiveRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchiveRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArchiveRequestAggregateArgs>(args: Subset<T, ArchiveRequestAggregateArgs>): Prisma.PrismaPromise<GetArchiveRequestAggregateType<T>>

    /**
     * Group by ArchiveRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArchiveRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArchiveRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArchiveRequestGroupByArgs['orderBy'] }
        : { orderBy?: ArchiveRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArchiveRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArchiveRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ArchiveRequest model
   */
  readonly fields: ArchiveRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ArchiveRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArchiveRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ArchiveRequest model
   */ 
  interface ArchiveRequestFieldRefs {
    readonly id: FieldRef<"ArchiveRequest", 'Int'>
    readonly card_id: FieldRef<"ArchiveRequest", 'Int'>
    readonly requester_email: FieldRef<"ArchiveRequest", 'String'>
    readonly status: FieldRef<"ArchiveRequest", 'String'>
    readonly details: FieldRef<"ArchiveRequest", 'String'>
    readonly createdAt: FieldRef<"ArchiveRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ArchiveRequest findUnique
   */
  export type ArchiveRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchiveRequest
     */
    select?: ArchiveRequestSelect<ExtArgs> | null
    /**
     * Filter, which ArchiveRequest to fetch.
     */
    where: ArchiveRequestWhereUniqueInput
  }

  /**
   * ArchiveRequest findUniqueOrThrow
   */
  export type ArchiveRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchiveRequest
     */
    select?: ArchiveRequestSelect<ExtArgs> | null
    /**
     * Filter, which ArchiveRequest to fetch.
     */
    where: ArchiveRequestWhereUniqueInput
  }

  /**
   * ArchiveRequest findFirst
   */
  export type ArchiveRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchiveRequest
     */
    select?: ArchiveRequestSelect<ExtArgs> | null
    /**
     * Filter, which ArchiveRequest to fetch.
     */
    where?: ArchiveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchiveRequests to fetch.
     */
    orderBy?: ArchiveRequestOrderByWithRelationInput | ArchiveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArchiveRequests.
     */
    cursor?: ArchiveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchiveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchiveRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArchiveRequests.
     */
    distinct?: ArchiveRequestScalarFieldEnum | ArchiveRequestScalarFieldEnum[]
  }

  /**
   * ArchiveRequest findFirstOrThrow
   */
  export type ArchiveRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchiveRequest
     */
    select?: ArchiveRequestSelect<ExtArgs> | null
    /**
     * Filter, which ArchiveRequest to fetch.
     */
    where?: ArchiveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchiveRequests to fetch.
     */
    orderBy?: ArchiveRequestOrderByWithRelationInput | ArchiveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArchiveRequests.
     */
    cursor?: ArchiveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchiveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchiveRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArchiveRequests.
     */
    distinct?: ArchiveRequestScalarFieldEnum | ArchiveRequestScalarFieldEnum[]
  }

  /**
   * ArchiveRequest findMany
   */
  export type ArchiveRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchiveRequest
     */
    select?: ArchiveRequestSelect<ExtArgs> | null
    /**
     * Filter, which ArchiveRequests to fetch.
     */
    where?: ArchiveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArchiveRequests to fetch.
     */
    orderBy?: ArchiveRequestOrderByWithRelationInput | ArchiveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ArchiveRequests.
     */
    cursor?: ArchiveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArchiveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArchiveRequests.
     */
    skip?: number
    distinct?: ArchiveRequestScalarFieldEnum | ArchiveRequestScalarFieldEnum[]
  }

  /**
   * ArchiveRequest create
   */
  export type ArchiveRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchiveRequest
     */
    select?: ArchiveRequestSelect<ExtArgs> | null
    /**
     * The data needed to create a ArchiveRequest.
     */
    data?: XOR<ArchiveRequestCreateInput, ArchiveRequestUncheckedCreateInput>
  }

  /**
   * ArchiveRequest createMany
   */
  export type ArchiveRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ArchiveRequests.
     */
    data: ArchiveRequestCreateManyInput | ArchiveRequestCreateManyInput[]
  }

  /**
   * ArchiveRequest createManyAndReturn
   */
  export type ArchiveRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchiveRequest
     */
    select?: ArchiveRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ArchiveRequests.
     */
    data: ArchiveRequestCreateManyInput | ArchiveRequestCreateManyInput[]
  }

  /**
   * ArchiveRequest update
   */
  export type ArchiveRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchiveRequest
     */
    select?: ArchiveRequestSelect<ExtArgs> | null
    /**
     * The data needed to update a ArchiveRequest.
     */
    data: XOR<ArchiveRequestUpdateInput, ArchiveRequestUncheckedUpdateInput>
    /**
     * Choose, which ArchiveRequest to update.
     */
    where: ArchiveRequestWhereUniqueInput
  }

  /**
   * ArchiveRequest updateMany
   */
  export type ArchiveRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ArchiveRequests.
     */
    data: XOR<ArchiveRequestUpdateManyMutationInput, ArchiveRequestUncheckedUpdateManyInput>
    /**
     * Filter which ArchiveRequests to update
     */
    where?: ArchiveRequestWhereInput
  }

  /**
   * ArchiveRequest upsert
   */
  export type ArchiveRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchiveRequest
     */
    select?: ArchiveRequestSelect<ExtArgs> | null
    /**
     * The filter to search for the ArchiveRequest to update in case it exists.
     */
    where: ArchiveRequestWhereUniqueInput
    /**
     * In case the ArchiveRequest found by the `where` argument doesn't exist, create a new ArchiveRequest with this data.
     */
    create: XOR<ArchiveRequestCreateInput, ArchiveRequestUncheckedCreateInput>
    /**
     * In case the ArchiveRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArchiveRequestUpdateInput, ArchiveRequestUncheckedUpdateInput>
  }

  /**
   * ArchiveRequest delete
   */
  export type ArchiveRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchiveRequest
     */
    select?: ArchiveRequestSelect<ExtArgs> | null
    /**
     * Filter which ArchiveRequest to delete.
     */
    where: ArchiveRequestWhereUniqueInput
  }

  /**
   * ArchiveRequest deleteMany
   */
  export type ArchiveRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArchiveRequests to delete
     */
    where?: ArchiveRequestWhereInput
  }

  /**
   * ArchiveRequest without action
   */
  export type ArchiveRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArchiveRequest
     */
    select?: ArchiveRequestSelect<ExtArgs> | null
  }


  /**
   * Model Group
   */

  export type AggregateGroup = {
    _count: GroupCountAggregateOutputType | null
    _avg: GroupAvgAggregateOutputType | null
    _sum: GroupSumAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  export type GroupAvgAggregateOutputType = {
    id: number | null
  }

  export type GroupSumAggregateOutputType = {
    id: number | null
  }

  export type GroupMinAggregateOutputType = {
    id: number | null
    name: string | null
    group_name: string | null
    members: string | null
    created_by: string | null
    owner_email: string | null
    created_date: Date | null
  }

  export type GroupMaxAggregateOutputType = {
    id: number | null
    name: string | null
    group_name: string | null
    members: string | null
    created_by: string | null
    owner_email: string | null
    created_date: Date | null
  }

  export type GroupCountAggregateOutputType = {
    id: number
    name: number
    group_name: number
    members: number
    created_by: number
    owner_email: number
    created_date: number
    _all: number
  }


  export type GroupAvgAggregateInputType = {
    id?: true
  }

  export type GroupSumAggregateInputType = {
    id?: true
  }

  export type GroupMinAggregateInputType = {
    id?: true
    name?: true
    group_name?: true
    members?: true
    created_by?: true
    owner_email?: true
    created_date?: true
  }

  export type GroupMaxAggregateInputType = {
    id?: true
    name?: true
    group_name?: true
    members?: true
    created_by?: true
    owner_email?: true
    created_date?: true
  }

  export type GroupCountAggregateInputType = {
    id?: true
    name?: true
    group_name?: true
    members?: true
    created_by?: true
    owner_email?: true
    created_date?: true
    _all?: true
  }

  export type GroupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Group to aggregate.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Groups
    **/
    _count?: true | GroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupMaxAggregateInputType
  }

  export type GetGroupAggregateType<T extends GroupAggregateArgs> = {
        [P in keyof T & keyof AggregateGroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroup[P]>
      : GetScalarType<T[P], AggregateGroup[P]>
  }




  export type GroupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupWhereInput
    orderBy?: GroupOrderByWithAggregationInput | GroupOrderByWithAggregationInput[]
    by: GroupScalarFieldEnum[] | GroupScalarFieldEnum
    having?: GroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupCountAggregateInputType | true
    _avg?: GroupAvgAggregateInputType
    _sum?: GroupSumAggregateInputType
    _min?: GroupMinAggregateInputType
    _max?: GroupMaxAggregateInputType
  }

  export type GroupGroupByOutputType = {
    id: number
    name: string
    group_name: string | null
    members: string | null
    created_by: string | null
    owner_email: string | null
    created_date: Date
    _count: GroupCountAggregateOutputType | null
    _avg: GroupAvgAggregateOutputType | null
    _sum: GroupSumAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  type GetGroupGroupByPayload<T extends GroupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupGroupByOutputType[P]>
            : GetScalarType<T[P], GroupGroupByOutputType[P]>
        }
      >
    >


  export type GroupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    group_name?: boolean
    members?: boolean
    created_by?: boolean
    owner_email?: boolean
    created_date?: boolean
  }, ExtArgs["result"]["group"]>

  export type GroupSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    group_name?: boolean
    members?: boolean
    created_by?: boolean
    owner_email?: boolean
    created_date?: boolean
  }, ExtArgs["result"]["group"]>

  export type GroupSelectScalar = {
    id?: boolean
    name?: boolean
    group_name?: boolean
    members?: boolean
    created_by?: boolean
    owner_email?: boolean
    created_date?: boolean
  }


  export type $GroupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Group"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      group_name: string | null
      members: string | null
      created_by: string | null
      owner_email: string | null
      created_date: Date
    }, ExtArgs["result"]["group"]>
    composites: {}
  }

  type GroupGetPayload<S extends boolean | null | undefined | GroupDefaultArgs> = $Result.GetResult<Prisma.$GroupPayload, S>

  type GroupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GroupFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GroupCountAggregateInputType | true
    }

  export interface GroupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Group'], meta: { name: 'Group' } }
    /**
     * Find zero or one Group that matches the filter.
     * @param {GroupFindUniqueArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GroupFindUniqueArgs>(args: SelectSubset<T, GroupFindUniqueArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Group that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GroupFindUniqueOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GroupFindUniqueOrThrowArgs>(args: SelectSubset<T, GroupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Group that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GroupFindFirstArgs>(args?: SelectSubset<T, GroupFindFirstArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Group that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GroupFindFirstOrThrowArgs>(args?: SelectSubset<T, GroupFindFirstOrThrowArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups
     * const groups = await prisma.group.findMany()
     * 
     * // Get first 10 Groups
     * const groups = await prisma.group.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupWithIdOnly = await prisma.group.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GroupFindManyArgs>(args?: SelectSubset<T, GroupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Group.
     * @param {GroupCreateArgs} args - Arguments to create a Group.
     * @example
     * // Create one Group
     * const Group = await prisma.group.create({
     *   data: {
     *     // ... data to create a Group
     *   }
     * })
     * 
     */
    create<T extends GroupCreateArgs>(args: SelectSubset<T, GroupCreateArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Groups.
     * @param {GroupCreateManyArgs} args - Arguments to create many Groups.
     * @example
     * // Create many Groups
     * const group = await prisma.group.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GroupCreateManyArgs>(args?: SelectSubset<T, GroupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Groups and returns the data saved in the database.
     * @param {GroupCreateManyAndReturnArgs} args - Arguments to create many Groups.
     * @example
     * // Create many Groups
     * const group = await prisma.group.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Groups and only return the `id`
     * const groupWithIdOnly = await prisma.group.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GroupCreateManyAndReturnArgs>(args?: SelectSubset<T, GroupCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Group.
     * @param {GroupDeleteArgs} args - Arguments to delete one Group.
     * @example
     * // Delete one Group
     * const Group = await prisma.group.delete({
     *   where: {
     *     // ... filter to delete one Group
     *   }
     * })
     * 
     */
    delete<T extends GroupDeleteArgs>(args: SelectSubset<T, GroupDeleteArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Group.
     * @param {GroupUpdateArgs} args - Arguments to update one Group.
     * @example
     * // Update one Group
     * const group = await prisma.group.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GroupUpdateArgs>(args: SelectSubset<T, GroupUpdateArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Groups.
     * @param {GroupDeleteManyArgs} args - Arguments to filter Groups to delete.
     * @example
     * // Delete a few Groups
     * const { count } = await prisma.group.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GroupDeleteManyArgs>(args?: SelectSubset<T, GroupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups
     * const group = await prisma.group.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GroupUpdateManyArgs>(args: SelectSubset<T, GroupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Group.
     * @param {GroupUpsertArgs} args - Arguments to update or create a Group.
     * @example
     * // Update or create a Group
     * const group = await prisma.group.upsert({
     *   create: {
     *     // ... data to create a Group
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Group we want to update
     *   }
     * })
     */
    upsert<T extends GroupUpsertArgs>(args: SelectSubset<T, GroupUpsertArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupCountArgs} args - Arguments to filter Groups to count.
     * @example
     * // Count the number of Groups
     * const count = await prisma.group.count({
     *   where: {
     *     // ... the filter for the Groups we want to count
     *   }
     * })
    **/
    count<T extends GroupCountArgs>(
      args?: Subset<T, GroupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupAggregateArgs>(args: Subset<T, GroupAggregateArgs>): Prisma.PrismaPromise<GetGroupAggregateType<T>>

    /**
     * Group by Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupGroupByArgs['orderBy'] }
        : { orderBy?: GroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Group model
   */
  readonly fields: GroupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Group.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GroupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Group model
   */ 
  interface GroupFieldRefs {
    readonly id: FieldRef<"Group", 'Int'>
    readonly name: FieldRef<"Group", 'String'>
    readonly group_name: FieldRef<"Group", 'String'>
    readonly members: FieldRef<"Group", 'String'>
    readonly created_by: FieldRef<"Group", 'String'>
    readonly owner_email: FieldRef<"Group", 'String'>
    readonly created_date: FieldRef<"Group", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Group findUnique
   */
  export type GroupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group findUniqueOrThrow
   */
  export type GroupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group findFirst
   */
  export type GroupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group findFirstOrThrow
   */
  export type GroupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group findMany
   */
  export type GroupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Filter, which Groups to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group create
   */
  export type GroupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * The data needed to create a Group.
     */
    data: XOR<GroupCreateInput, GroupUncheckedCreateInput>
  }

  /**
   * Group createMany
   */
  export type GroupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Groups.
     */
    data: GroupCreateManyInput | GroupCreateManyInput[]
  }

  /**
   * Group createManyAndReturn
   */
  export type GroupCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Groups.
     */
    data: GroupCreateManyInput | GroupCreateManyInput[]
  }

  /**
   * Group update
   */
  export type GroupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * The data needed to update a Group.
     */
    data: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
    /**
     * Choose, which Group to update.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group updateMany
   */
  export type GroupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Groups.
     */
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyInput>
    /**
     * Filter which Groups to update
     */
    where?: GroupWhereInput
  }

  /**
   * Group upsert
   */
  export type GroupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * The filter to search for the Group to update in case it exists.
     */
    where: GroupWhereUniqueInput
    /**
     * In case the Group found by the `where` argument doesn't exist, create a new Group with this data.
     */
    create: XOR<GroupCreateInput, GroupUncheckedCreateInput>
    /**
     * In case the Group was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
  }

  /**
   * Group delete
   */
  export type GroupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Filter which Group to delete.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group deleteMany
   */
  export type GroupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Groups to delete
     */
    where?: GroupWhereInput
  }

  /**
   * Group without action
   */
  export type GroupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
    card_id: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
    card_id: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    card_id: number | null
    card_name: string | null
    recipient_email: string | null
    notification_type: string | null
    is_read: boolean | null
    is_dismissed: boolean | null
    data: string | null
    created_date: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    card_id: number | null
    card_name: string | null
    recipient_email: string | null
    notification_type: string | null
    is_read: boolean | null
    is_dismissed: boolean | null
    data: string | null
    created_date: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    card_id: number
    card_name: number
    recipient_email: number
    notification_type: number
    is_read: number
    is_dismissed: number
    data: number
    created_date: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
    card_id?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
    card_id?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    card_id?: true
    card_name?: true
    recipient_email?: true
    notification_type?: true
    is_read?: true
    is_dismissed?: true
    data?: true
    created_date?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    card_id?: true
    card_name?: true
    recipient_email?: true
    notification_type?: true
    is_read?: true
    is_dismissed?: true
    data?: true
    created_date?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    card_id?: true
    card_name?: true
    recipient_email?: true
    notification_type?: true
    is_read?: true
    is_dismissed?: true
    data?: true
    created_date?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: number
    card_id: number | null
    card_name: string | null
    recipient_email: string | null
    notification_type: string | null
    is_read: boolean
    is_dismissed: boolean
    data: string | null
    created_date: Date
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    card_id?: boolean
    card_name?: boolean
    recipient_email?: boolean
    notification_type?: boolean
    is_read?: boolean
    is_dismissed?: boolean
    data?: boolean
    created_date?: boolean
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    card_id?: boolean
    card_name?: boolean
    recipient_email?: boolean
    notification_type?: boolean
    is_read?: boolean
    is_dismissed?: boolean
    data?: boolean
    created_date?: boolean
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    card_id?: boolean
    card_name?: boolean
    recipient_email?: boolean
    notification_type?: boolean
    is_read?: boolean
    is_dismissed?: boolean
    data?: boolean
    created_date?: boolean
  }


  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      card_id: number | null
      card_name: string | null
      recipient_email: string | null
      notification_type: string | null
      is_read: boolean
      is_dismissed: boolean
      data: string | null
      created_date: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'Int'>
    readonly card_id: FieldRef<"Notification", 'Int'>
    readonly card_name: FieldRef<"Notification", 'String'>
    readonly recipient_email: FieldRef<"Notification", 'String'>
    readonly notification_type: FieldRef<"Notification", 'String'>
    readonly is_read: FieldRef<"Notification", 'Boolean'>
    readonly is_dismissed: FieldRef<"Notification", 'Boolean'>
    readonly data: FieldRef<"Notification", 'String'>
    readonly created_date: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data?: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
  }


  /**
   * Model Store
   */

  export type AggregateStore = {
    _count: StoreCountAggregateOutputType | null
    _avg: StoreAvgAggregateOutputType | null
    _sum: StoreSumAggregateOutputType | null
    _min: StoreMinAggregateOutputType | null
    _max: StoreMaxAggregateOutputType | null
  }

  export type StoreAvgAggregateOutputType = {
    id: number | null
  }

  export type StoreSumAggregateOutputType = {
    id: number | null
  }

  export type StoreMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    website: string | null
    logo_url: string | null
    category: string | null
    is_active: boolean | null
    created_by: string | null
    created_date: Date | null
    updated_date: Date | null
  }

  export type StoreMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    website: string | null
    logo_url: string | null
    category: string | null
    is_active: boolean | null
    created_by: string | null
    created_date: Date | null
    updated_date: Date | null
  }

  export type StoreCountAggregateOutputType = {
    id: number
    name: number
    description: number
    website: number
    logo_url: number
    category: number
    is_active: number
    created_by: number
    created_date: number
    updated_date: number
    _all: number
  }


  export type StoreAvgAggregateInputType = {
    id?: true
  }

  export type StoreSumAggregateInputType = {
    id?: true
  }

  export type StoreMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    website?: true
    logo_url?: true
    category?: true
    is_active?: true
    created_by?: true
    created_date?: true
    updated_date?: true
  }

  export type StoreMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    website?: true
    logo_url?: true
    category?: true
    is_active?: true
    created_by?: true
    created_date?: true
    updated_date?: true
  }

  export type StoreCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    website?: true
    logo_url?: true
    category?: true
    is_active?: true
    created_by?: true
    created_date?: true
    updated_date?: true
    _all?: true
  }

  export type StoreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Store to aggregate.
     */
    where?: StoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stores
    **/
    _count?: true | StoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StoreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StoreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StoreMaxAggregateInputType
  }

  export type GetStoreAggregateType<T extends StoreAggregateArgs> = {
        [P in keyof T & keyof AggregateStore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStore[P]>
      : GetScalarType<T[P], AggregateStore[P]>
  }




  export type StoreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoreWhereInput
    orderBy?: StoreOrderByWithAggregationInput | StoreOrderByWithAggregationInput[]
    by: StoreScalarFieldEnum[] | StoreScalarFieldEnum
    having?: StoreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StoreCountAggregateInputType | true
    _avg?: StoreAvgAggregateInputType
    _sum?: StoreSumAggregateInputType
    _min?: StoreMinAggregateInputType
    _max?: StoreMaxAggregateInputType
  }

  export type StoreGroupByOutputType = {
    id: number
    name: string
    description: string | null
    website: string | null
    logo_url: string | null
    category: string | null
    is_active: boolean
    created_by: string | null
    created_date: Date
    updated_date: Date
    _count: StoreCountAggregateOutputType | null
    _avg: StoreAvgAggregateOutputType | null
    _sum: StoreSumAggregateOutputType | null
    _min: StoreMinAggregateOutputType | null
    _max: StoreMaxAggregateOutputType | null
  }

  type GetStoreGroupByPayload<T extends StoreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StoreGroupByOutputType[P]>
            : GetScalarType<T[P], StoreGroupByOutputType[P]>
        }
      >
    >


  export type StoreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    website?: boolean
    logo_url?: boolean
    category?: boolean
    is_active?: boolean
    created_by?: boolean
    created_date?: boolean
    updated_date?: boolean
  }, ExtArgs["result"]["store"]>

  export type StoreSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    website?: boolean
    logo_url?: boolean
    category?: boolean
    is_active?: boolean
    created_by?: boolean
    created_date?: boolean
    updated_date?: boolean
  }, ExtArgs["result"]["store"]>

  export type StoreSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    website?: boolean
    logo_url?: boolean
    category?: boolean
    is_active?: boolean
    created_by?: boolean
    created_date?: boolean
    updated_date?: boolean
  }


  export type $StorePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Store"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      website: string | null
      logo_url: string | null
      category: string | null
      is_active: boolean
      created_by: string | null
      created_date: Date
      updated_date: Date
    }, ExtArgs["result"]["store"]>
    composites: {}
  }

  type StoreGetPayload<S extends boolean | null | undefined | StoreDefaultArgs> = $Result.GetResult<Prisma.$StorePayload, S>

  type StoreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StoreFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StoreCountAggregateInputType | true
    }

  export interface StoreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Store'], meta: { name: 'Store' } }
    /**
     * Find zero or one Store that matches the filter.
     * @param {StoreFindUniqueArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StoreFindUniqueArgs>(args: SelectSubset<T, StoreFindUniqueArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Store that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StoreFindUniqueOrThrowArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StoreFindUniqueOrThrowArgs>(args: SelectSubset<T, StoreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Store that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreFindFirstArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StoreFindFirstArgs>(args?: SelectSubset<T, StoreFindFirstArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Store that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreFindFirstOrThrowArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StoreFindFirstOrThrowArgs>(args?: SelectSubset<T, StoreFindFirstOrThrowArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Stores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stores
     * const stores = await prisma.store.findMany()
     * 
     * // Get first 10 Stores
     * const stores = await prisma.store.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const storeWithIdOnly = await prisma.store.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StoreFindManyArgs>(args?: SelectSubset<T, StoreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Store.
     * @param {StoreCreateArgs} args - Arguments to create a Store.
     * @example
     * // Create one Store
     * const Store = await prisma.store.create({
     *   data: {
     *     // ... data to create a Store
     *   }
     * })
     * 
     */
    create<T extends StoreCreateArgs>(args: SelectSubset<T, StoreCreateArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Stores.
     * @param {StoreCreateManyArgs} args - Arguments to create many Stores.
     * @example
     * // Create many Stores
     * const store = await prisma.store.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StoreCreateManyArgs>(args?: SelectSubset<T, StoreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stores and returns the data saved in the database.
     * @param {StoreCreateManyAndReturnArgs} args - Arguments to create many Stores.
     * @example
     * // Create many Stores
     * const store = await prisma.store.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stores and only return the `id`
     * const storeWithIdOnly = await prisma.store.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StoreCreateManyAndReturnArgs>(args?: SelectSubset<T, StoreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Store.
     * @param {StoreDeleteArgs} args - Arguments to delete one Store.
     * @example
     * // Delete one Store
     * const Store = await prisma.store.delete({
     *   where: {
     *     // ... filter to delete one Store
     *   }
     * })
     * 
     */
    delete<T extends StoreDeleteArgs>(args: SelectSubset<T, StoreDeleteArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Store.
     * @param {StoreUpdateArgs} args - Arguments to update one Store.
     * @example
     * // Update one Store
     * const store = await prisma.store.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StoreUpdateArgs>(args: SelectSubset<T, StoreUpdateArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Stores.
     * @param {StoreDeleteManyArgs} args - Arguments to filter Stores to delete.
     * @example
     * // Delete a few Stores
     * const { count } = await prisma.store.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StoreDeleteManyArgs>(args?: SelectSubset<T, StoreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stores
     * const store = await prisma.store.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StoreUpdateManyArgs>(args: SelectSubset<T, StoreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Store.
     * @param {StoreUpsertArgs} args - Arguments to update or create a Store.
     * @example
     * // Update or create a Store
     * const store = await prisma.store.upsert({
     *   create: {
     *     // ... data to create a Store
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Store we want to update
     *   }
     * })
     */
    upsert<T extends StoreUpsertArgs>(args: SelectSubset<T, StoreUpsertArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Stores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreCountArgs} args - Arguments to filter Stores to count.
     * @example
     * // Count the number of Stores
     * const count = await prisma.store.count({
     *   where: {
     *     // ... the filter for the Stores we want to count
     *   }
     * })
    **/
    count<T extends StoreCountArgs>(
      args?: Subset<T, StoreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Store.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StoreAggregateArgs>(args: Subset<T, StoreAggregateArgs>): Prisma.PrismaPromise<GetStoreAggregateType<T>>

    /**
     * Group by Store.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StoreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StoreGroupByArgs['orderBy'] }
        : { orderBy?: StoreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Store model
   */
  readonly fields: StoreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Store.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StoreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Store model
   */ 
  interface StoreFieldRefs {
    readonly id: FieldRef<"Store", 'Int'>
    readonly name: FieldRef<"Store", 'String'>
    readonly description: FieldRef<"Store", 'String'>
    readonly website: FieldRef<"Store", 'String'>
    readonly logo_url: FieldRef<"Store", 'String'>
    readonly category: FieldRef<"Store", 'String'>
    readonly is_active: FieldRef<"Store", 'Boolean'>
    readonly created_by: FieldRef<"Store", 'String'>
    readonly created_date: FieldRef<"Store", 'DateTime'>
    readonly updated_date: FieldRef<"Store", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Store findUnique
   */
  export type StoreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Filter, which Store to fetch.
     */
    where: StoreWhereUniqueInput
  }

  /**
   * Store findUniqueOrThrow
   */
  export type StoreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Filter, which Store to fetch.
     */
    where: StoreWhereUniqueInput
  }

  /**
   * Store findFirst
   */
  export type StoreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Filter, which Store to fetch.
     */
    where?: StoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stores.
     */
    cursor?: StoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stores.
     */
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * Store findFirstOrThrow
   */
  export type StoreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Filter, which Store to fetch.
     */
    where?: StoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stores.
     */
    cursor?: StoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stores.
     */
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * Store findMany
   */
  export type StoreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Filter, which Stores to fetch.
     */
    where?: StoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stores.
     */
    cursor?: StoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * Store create
   */
  export type StoreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * The data needed to create a Store.
     */
    data: XOR<StoreCreateInput, StoreUncheckedCreateInput>
  }

  /**
   * Store createMany
   */
  export type StoreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stores.
     */
    data: StoreCreateManyInput | StoreCreateManyInput[]
  }

  /**
   * Store createManyAndReturn
   */
  export type StoreCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Stores.
     */
    data: StoreCreateManyInput | StoreCreateManyInput[]
  }

  /**
   * Store update
   */
  export type StoreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * The data needed to update a Store.
     */
    data: XOR<StoreUpdateInput, StoreUncheckedUpdateInput>
    /**
     * Choose, which Store to update.
     */
    where: StoreWhereUniqueInput
  }

  /**
   * Store updateMany
   */
  export type StoreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stores.
     */
    data: XOR<StoreUpdateManyMutationInput, StoreUncheckedUpdateManyInput>
    /**
     * Filter which Stores to update
     */
    where?: StoreWhereInput
  }

  /**
   * Store upsert
   */
  export type StoreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * The filter to search for the Store to update in case it exists.
     */
    where: StoreWhereUniqueInput
    /**
     * In case the Store found by the `where` argument doesn't exist, create a new Store with this data.
     */
    create: XOR<StoreCreateInput, StoreUncheckedCreateInput>
    /**
     * In case the Store was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StoreUpdateInput, StoreUncheckedUpdateInput>
  }

  /**
   * Store delete
   */
  export type StoreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Filter which Store to delete.
     */
    where: StoreWhereUniqueInput
  }

  /**
   * Store deleteMany
   */
  export type StoreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stores to delete
     */
    where?: StoreWhereInput
  }

  /**
   * Store without action
   */
  export type StoreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    googleId: 'googleId',
    passwordResetToken: 'passwordResetToken',
    passwordResetExpires: 'passwordResetExpires',
    isAdmin: 'isAdmin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const GiftCardScalarFieldEnum: {
    id: 'id',
    card_name: 'card_name',
    vendor: 'vendor',
    balance: 'balance',
    expiry_date: 'expiry_date',
    is_archived: 'is_archived',
    card_type: 'card_type',
    card_number: 'card_number',
    cvv: 'cvv',
    activation_code: 'activation_code',
    online_page_url: 'online_page_url',
    notes: 'notes',
    card_image_url: 'card_image_url',
    purchase_date: 'purchase_date',
    card_color: 'card_color',
    created_by: 'created_by',
    owner_email: 'owner_email',
    created_date: 'created_date',
    updated_date: 'updated_date'
  };

  export type GiftCardScalarFieldEnum = (typeof GiftCardScalarFieldEnum)[keyof typeof GiftCardScalarFieldEnum]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    gift_card_id: 'gift_card_id',
    amount: 'amount',
    note: 'note',
    user_email: 'user_email',
    timestamp: 'timestamp'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const GiftCardTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    color: 'color'
  };

  export type GiftCardTypeScalarFieldEnum = (typeof GiftCardTypeScalarFieldEnum)[keyof typeof GiftCardTypeScalarFieldEnum]


  export const ArchivedCardScalarFieldEnum: {
    id: 'id',
    original_card_id: 'original_card_id',
    card_name: 'card_name',
    shared_with_email: 'shared_with_email',
    shared_with_group_id: 'shared_with_group_id',
    created_by: 'created_by',
    data: 'data',
    archived_date: 'archived_date',
    created_date: 'created_date'
  };

  export type ArchivedCardScalarFieldEnum = (typeof ArchivedCardScalarFieldEnum)[keyof typeof ArchivedCardScalarFieldEnum]


  export const SharedCardScalarFieldEnum: {
    id: 'id',
    card_id: 'card_id',
    user_email: 'user_email',
    shared_with: 'shared_with',
    group_id: 'group_id',
    shared_with_group_id: 'shared_with_group_id',
    created_by: 'created_by',
    balance: 'balance',
    card_name: 'card_name',
    vendor: 'vendor',
    expiry_date: 'expiry_date',
    card_type: 'card_type',
    card_number: 'card_number',
    cvv: 'cvv',
    activation_code: 'activation_code',
    online_page_url: 'online_page_url',
    notes: 'notes',
    card_image_url: 'card_image_url',
    purchase_date: 'purchase_date',
    card_color: 'card_color',
    data: 'data',
    created_date: 'created_date'
  };

  export type SharedCardScalarFieldEnum = (typeof SharedCardScalarFieldEnum)[keyof typeof SharedCardScalarFieldEnum]


  export const UserCardTypeScalarFieldEnum: {
    id: 'id',
    user_email: 'user_email',
    name: 'name',
    color: 'color',
    type_color: 'type_color',
    supported_stores: 'supported_stores'
  };

  export type UserCardTypeScalarFieldEnum = (typeof UserCardTypeScalarFieldEnum)[keyof typeof UserCardTypeScalarFieldEnum]


  export const CardActivityLogScalarFieldEnum: {
    id: 'id',
    card_id: 'card_id',
    card_type_field: 'card_type_field',
    action: 'action',
    user_email: 'user_email',
    user_name: 'user_name',
    details: 'details',
    card_data: 'card_data',
    before_data: 'before_data',
    timestamp: 'timestamp'
  };

  export type CardActivityLogScalarFieldEnum = (typeof CardActivityLogScalarFieldEnum)[keyof typeof CardActivityLogScalarFieldEnum]


  export const ArchiveRequestScalarFieldEnum: {
    id: 'id',
    card_id: 'card_id',
    requester_email: 'requester_email',
    status: 'status',
    details: 'details',
    createdAt: 'createdAt'
  };

  export type ArchiveRequestScalarFieldEnum = (typeof ArchiveRequestScalarFieldEnum)[keyof typeof ArchiveRequestScalarFieldEnum]


  export const GroupScalarFieldEnum: {
    id: 'id',
    name: 'name',
    group_name: 'group_name',
    members: 'members',
    created_by: 'created_by',
    owner_email: 'owner_email',
    created_date: 'created_date'
  };

  export type GroupScalarFieldEnum = (typeof GroupScalarFieldEnum)[keyof typeof GroupScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    card_id: 'card_id',
    card_name: 'card_name',
    recipient_email: 'recipient_email',
    notification_type: 'notification_type',
    is_read: 'is_read',
    is_dismissed: 'is_dismissed',
    data: 'data',
    created_date: 'created_date'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const StoreScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    website: 'website',
    logo_url: 'logo_url',
    category: 'category',
    is_active: 'is_active',
    created_by: 'created_by',
    created_date: 'created_date',
    updated_date: 'updated_date'
  };

  export type StoreScalarFieldEnum = (typeof StoreScalarFieldEnum)[keyof typeof StoreScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    name?: StringFilter<"User"> | string
    googleId?: StringNullableFilter<"User"> | string | null
    passwordResetToken?: StringNullableFilter<"User"> | string | null
    passwordResetExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    isAdmin?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    name?: SortOrder
    googleId?: SortOrderInput | SortOrder
    passwordResetToken?: SortOrderInput | SortOrder
    passwordResetExpires?: SortOrderInput | SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    googleId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringNullableFilter<"User"> | string | null
    name?: StringFilter<"User"> | string
    passwordResetToken?: StringNullableFilter<"User"> | string | null
    passwordResetExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    isAdmin?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }, "id" | "email" | "googleId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    name?: SortOrder
    googleId?: SortOrderInput | SortOrder
    passwordResetToken?: SortOrderInput | SortOrder
    passwordResetExpires?: SortOrderInput | SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    name?: StringWithAggregatesFilter<"User"> | string
    googleId?: StringNullableWithAggregatesFilter<"User"> | string | null
    passwordResetToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    passwordResetExpires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    isAdmin?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type GiftCardWhereInput = {
    AND?: GiftCardWhereInput | GiftCardWhereInput[]
    OR?: GiftCardWhereInput[]
    NOT?: GiftCardWhereInput | GiftCardWhereInput[]
    id?: IntFilter<"GiftCard"> | number
    card_name?: StringFilter<"GiftCard"> | string
    vendor?: StringNullableFilter<"GiftCard"> | string | null
    balance?: IntNullableFilter<"GiftCard"> | number | null
    expiry_date?: DateTimeNullableFilter<"GiftCard"> | Date | string | null
    is_archived?: BoolFilter<"GiftCard"> | boolean
    card_type?: StringNullableFilter<"GiftCard"> | string | null
    card_number?: StringNullableFilter<"GiftCard"> | string | null
    cvv?: StringNullableFilter<"GiftCard"> | string | null
    activation_code?: StringNullableFilter<"GiftCard"> | string | null
    online_page_url?: StringNullableFilter<"GiftCard"> | string | null
    notes?: StringNullableFilter<"GiftCard"> | string | null
    card_image_url?: StringNullableFilter<"GiftCard"> | string | null
    purchase_date?: DateTimeNullableFilter<"GiftCard"> | Date | string | null
    card_color?: StringNullableFilter<"GiftCard"> | string | null
    created_by?: StringNullableFilter<"GiftCard"> | string | null
    owner_email?: StringNullableFilter<"GiftCard"> | string | null
    created_date?: DateTimeFilter<"GiftCard"> | Date | string
    updated_date?: DateTimeFilter<"GiftCard"> | Date | string
  }

  export type GiftCardOrderByWithRelationInput = {
    id?: SortOrder
    card_name?: SortOrder
    vendor?: SortOrderInput | SortOrder
    balance?: SortOrderInput | SortOrder
    expiry_date?: SortOrderInput | SortOrder
    is_archived?: SortOrder
    card_type?: SortOrderInput | SortOrder
    card_number?: SortOrderInput | SortOrder
    cvv?: SortOrderInput | SortOrder
    activation_code?: SortOrderInput | SortOrder
    online_page_url?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    card_image_url?: SortOrderInput | SortOrder
    purchase_date?: SortOrderInput | SortOrder
    card_color?: SortOrderInput | SortOrder
    created_by?: SortOrderInput | SortOrder
    owner_email?: SortOrderInput | SortOrder
    created_date?: SortOrder
    updated_date?: SortOrder
  }

  export type GiftCardWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GiftCardWhereInput | GiftCardWhereInput[]
    OR?: GiftCardWhereInput[]
    NOT?: GiftCardWhereInput | GiftCardWhereInput[]
    card_name?: StringFilter<"GiftCard"> | string
    vendor?: StringNullableFilter<"GiftCard"> | string | null
    balance?: IntNullableFilter<"GiftCard"> | number | null
    expiry_date?: DateTimeNullableFilter<"GiftCard"> | Date | string | null
    is_archived?: BoolFilter<"GiftCard"> | boolean
    card_type?: StringNullableFilter<"GiftCard"> | string | null
    card_number?: StringNullableFilter<"GiftCard"> | string | null
    cvv?: StringNullableFilter<"GiftCard"> | string | null
    activation_code?: StringNullableFilter<"GiftCard"> | string | null
    online_page_url?: StringNullableFilter<"GiftCard"> | string | null
    notes?: StringNullableFilter<"GiftCard"> | string | null
    card_image_url?: StringNullableFilter<"GiftCard"> | string | null
    purchase_date?: DateTimeNullableFilter<"GiftCard"> | Date | string | null
    card_color?: StringNullableFilter<"GiftCard"> | string | null
    created_by?: StringNullableFilter<"GiftCard"> | string | null
    owner_email?: StringNullableFilter<"GiftCard"> | string | null
    created_date?: DateTimeFilter<"GiftCard"> | Date | string
    updated_date?: DateTimeFilter<"GiftCard"> | Date | string
  }, "id">

  export type GiftCardOrderByWithAggregationInput = {
    id?: SortOrder
    card_name?: SortOrder
    vendor?: SortOrderInput | SortOrder
    balance?: SortOrderInput | SortOrder
    expiry_date?: SortOrderInput | SortOrder
    is_archived?: SortOrder
    card_type?: SortOrderInput | SortOrder
    card_number?: SortOrderInput | SortOrder
    cvv?: SortOrderInput | SortOrder
    activation_code?: SortOrderInput | SortOrder
    online_page_url?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    card_image_url?: SortOrderInput | SortOrder
    purchase_date?: SortOrderInput | SortOrder
    card_color?: SortOrderInput | SortOrder
    created_by?: SortOrderInput | SortOrder
    owner_email?: SortOrderInput | SortOrder
    created_date?: SortOrder
    updated_date?: SortOrder
    _count?: GiftCardCountOrderByAggregateInput
    _avg?: GiftCardAvgOrderByAggregateInput
    _max?: GiftCardMaxOrderByAggregateInput
    _min?: GiftCardMinOrderByAggregateInput
    _sum?: GiftCardSumOrderByAggregateInput
  }

  export type GiftCardScalarWhereWithAggregatesInput = {
    AND?: GiftCardScalarWhereWithAggregatesInput | GiftCardScalarWhereWithAggregatesInput[]
    OR?: GiftCardScalarWhereWithAggregatesInput[]
    NOT?: GiftCardScalarWhereWithAggregatesInput | GiftCardScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GiftCard"> | number
    card_name?: StringWithAggregatesFilter<"GiftCard"> | string
    vendor?: StringNullableWithAggregatesFilter<"GiftCard"> | string | null
    balance?: IntNullableWithAggregatesFilter<"GiftCard"> | number | null
    expiry_date?: DateTimeNullableWithAggregatesFilter<"GiftCard"> | Date | string | null
    is_archived?: BoolWithAggregatesFilter<"GiftCard"> | boolean
    card_type?: StringNullableWithAggregatesFilter<"GiftCard"> | string | null
    card_number?: StringNullableWithAggregatesFilter<"GiftCard"> | string | null
    cvv?: StringNullableWithAggregatesFilter<"GiftCard"> | string | null
    activation_code?: StringNullableWithAggregatesFilter<"GiftCard"> | string | null
    online_page_url?: StringNullableWithAggregatesFilter<"GiftCard"> | string | null
    notes?: StringNullableWithAggregatesFilter<"GiftCard"> | string | null
    card_image_url?: StringNullableWithAggregatesFilter<"GiftCard"> | string | null
    purchase_date?: DateTimeNullableWithAggregatesFilter<"GiftCard"> | Date | string | null
    card_color?: StringNullableWithAggregatesFilter<"GiftCard"> | string | null
    created_by?: StringNullableWithAggregatesFilter<"GiftCard"> | string | null
    owner_email?: StringNullableWithAggregatesFilter<"GiftCard"> | string | null
    created_date?: DateTimeWithAggregatesFilter<"GiftCard"> | Date | string
    updated_date?: DateTimeWithAggregatesFilter<"GiftCard"> | Date | string
  }

  export type TransactionWhereInput = {
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    id?: IntFilter<"Transaction"> | number
    gift_card_id?: IntFilter<"Transaction"> | number
    amount?: IntFilter<"Transaction"> | number
    note?: StringNullableFilter<"Transaction"> | string | null
    user_email?: StringNullableFilter<"Transaction"> | string | null
    timestamp?: DateTimeFilter<"Transaction"> | Date | string
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    gift_card_id?: SortOrder
    amount?: SortOrder
    note?: SortOrderInput | SortOrder
    user_email?: SortOrderInput | SortOrder
    timestamp?: SortOrder
  }

  export type TransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    gift_card_id?: IntFilter<"Transaction"> | number
    amount?: IntFilter<"Transaction"> | number
    note?: StringNullableFilter<"Transaction"> | string | null
    user_email?: StringNullableFilter<"Transaction"> | string | null
    timestamp?: DateTimeFilter<"Transaction"> | Date | string
  }, "id">

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    gift_card_id?: SortOrder
    amount?: SortOrder
    note?: SortOrderInput | SortOrder
    user_email?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    OR?: TransactionScalarWhereWithAggregatesInput[]
    NOT?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Transaction"> | number
    gift_card_id?: IntWithAggregatesFilter<"Transaction"> | number
    amount?: IntWithAggregatesFilter<"Transaction"> | number
    note?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    user_email?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
  }

  export type GiftCardTypeWhereInput = {
    AND?: GiftCardTypeWhereInput | GiftCardTypeWhereInput[]
    OR?: GiftCardTypeWhereInput[]
    NOT?: GiftCardTypeWhereInput | GiftCardTypeWhereInput[]
    id?: IntFilter<"GiftCardType"> | number
    name?: StringFilter<"GiftCardType"> | string
    color?: StringNullableFilter<"GiftCardType"> | string | null
  }

  export type GiftCardTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrderInput | SortOrder
  }

  export type GiftCardTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GiftCardTypeWhereInput | GiftCardTypeWhereInput[]
    OR?: GiftCardTypeWhereInput[]
    NOT?: GiftCardTypeWhereInput | GiftCardTypeWhereInput[]
    name?: StringFilter<"GiftCardType"> | string
    color?: StringNullableFilter<"GiftCardType"> | string | null
  }, "id">

  export type GiftCardTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrderInput | SortOrder
    _count?: GiftCardTypeCountOrderByAggregateInput
    _avg?: GiftCardTypeAvgOrderByAggregateInput
    _max?: GiftCardTypeMaxOrderByAggregateInput
    _min?: GiftCardTypeMinOrderByAggregateInput
    _sum?: GiftCardTypeSumOrderByAggregateInput
  }

  export type GiftCardTypeScalarWhereWithAggregatesInput = {
    AND?: GiftCardTypeScalarWhereWithAggregatesInput | GiftCardTypeScalarWhereWithAggregatesInput[]
    OR?: GiftCardTypeScalarWhereWithAggregatesInput[]
    NOT?: GiftCardTypeScalarWhereWithAggregatesInput | GiftCardTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GiftCardType"> | number
    name?: StringWithAggregatesFilter<"GiftCardType"> | string
    color?: StringNullableWithAggregatesFilter<"GiftCardType"> | string | null
  }

  export type ArchivedCardWhereInput = {
    AND?: ArchivedCardWhereInput | ArchivedCardWhereInput[]
    OR?: ArchivedCardWhereInput[]
    NOT?: ArchivedCardWhereInput | ArchivedCardWhereInput[]
    id?: IntFilter<"ArchivedCard"> | number
    original_card_id?: IntNullableFilter<"ArchivedCard"> | number | null
    card_name?: StringNullableFilter<"ArchivedCard"> | string | null
    shared_with_email?: StringNullableFilter<"ArchivedCard"> | string | null
    shared_with_group_id?: IntNullableFilter<"ArchivedCard"> | number | null
    created_by?: StringNullableFilter<"ArchivedCard"> | string | null
    data?: StringNullableFilter<"ArchivedCard"> | string | null
    archived_date?: DateTimeFilter<"ArchivedCard"> | Date | string
    created_date?: DateTimeFilter<"ArchivedCard"> | Date | string
  }

  export type ArchivedCardOrderByWithRelationInput = {
    id?: SortOrder
    original_card_id?: SortOrderInput | SortOrder
    card_name?: SortOrderInput | SortOrder
    shared_with_email?: SortOrderInput | SortOrder
    shared_with_group_id?: SortOrderInput | SortOrder
    created_by?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    archived_date?: SortOrder
    created_date?: SortOrder
  }

  export type ArchivedCardWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ArchivedCardWhereInput | ArchivedCardWhereInput[]
    OR?: ArchivedCardWhereInput[]
    NOT?: ArchivedCardWhereInput | ArchivedCardWhereInput[]
    original_card_id?: IntNullableFilter<"ArchivedCard"> | number | null
    card_name?: StringNullableFilter<"ArchivedCard"> | string | null
    shared_with_email?: StringNullableFilter<"ArchivedCard"> | string | null
    shared_with_group_id?: IntNullableFilter<"ArchivedCard"> | number | null
    created_by?: StringNullableFilter<"ArchivedCard"> | string | null
    data?: StringNullableFilter<"ArchivedCard"> | string | null
    archived_date?: DateTimeFilter<"ArchivedCard"> | Date | string
    created_date?: DateTimeFilter<"ArchivedCard"> | Date | string
  }, "id">

  export type ArchivedCardOrderByWithAggregationInput = {
    id?: SortOrder
    original_card_id?: SortOrderInput | SortOrder
    card_name?: SortOrderInput | SortOrder
    shared_with_email?: SortOrderInput | SortOrder
    shared_with_group_id?: SortOrderInput | SortOrder
    created_by?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    archived_date?: SortOrder
    created_date?: SortOrder
    _count?: ArchivedCardCountOrderByAggregateInput
    _avg?: ArchivedCardAvgOrderByAggregateInput
    _max?: ArchivedCardMaxOrderByAggregateInput
    _min?: ArchivedCardMinOrderByAggregateInput
    _sum?: ArchivedCardSumOrderByAggregateInput
  }

  export type ArchivedCardScalarWhereWithAggregatesInput = {
    AND?: ArchivedCardScalarWhereWithAggregatesInput | ArchivedCardScalarWhereWithAggregatesInput[]
    OR?: ArchivedCardScalarWhereWithAggregatesInput[]
    NOT?: ArchivedCardScalarWhereWithAggregatesInput | ArchivedCardScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ArchivedCard"> | number
    original_card_id?: IntNullableWithAggregatesFilter<"ArchivedCard"> | number | null
    card_name?: StringNullableWithAggregatesFilter<"ArchivedCard"> | string | null
    shared_with_email?: StringNullableWithAggregatesFilter<"ArchivedCard"> | string | null
    shared_with_group_id?: IntNullableWithAggregatesFilter<"ArchivedCard"> | number | null
    created_by?: StringNullableWithAggregatesFilter<"ArchivedCard"> | string | null
    data?: StringNullableWithAggregatesFilter<"ArchivedCard"> | string | null
    archived_date?: DateTimeWithAggregatesFilter<"ArchivedCard"> | Date | string
    created_date?: DateTimeWithAggregatesFilter<"ArchivedCard"> | Date | string
  }

  export type SharedCardWhereInput = {
    AND?: SharedCardWhereInput | SharedCardWhereInput[]
    OR?: SharedCardWhereInput[]
    NOT?: SharedCardWhereInput | SharedCardWhereInput[]
    id?: IntFilter<"SharedCard"> | number
    card_id?: IntFilter<"SharedCard"> | number
    user_email?: StringNullableFilter<"SharedCard"> | string | null
    shared_with?: StringNullableFilter<"SharedCard"> | string | null
    group_id?: IntNullableFilter<"SharedCard"> | number | null
    shared_with_group_id?: IntNullableFilter<"SharedCard"> | number | null
    created_by?: StringNullableFilter<"SharedCard"> | string | null
    balance?: IntNullableFilter<"SharedCard"> | number | null
    card_name?: StringNullableFilter<"SharedCard"> | string | null
    vendor?: StringNullableFilter<"SharedCard"> | string | null
    expiry_date?: DateTimeNullableFilter<"SharedCard"> | Date | string | null
    card_type?: StringNullableFilter<"SharedCard"> | string | null
    card_number?: StringNullableFilter<"SharedCard"> | string | null
    cvv?: StringNullableFilter<"SharedCard"> | string | null
    activation_code?: StringNullableFilter<"SharedCard"> | string | null
    online_page_url?: StringNullableFilter<"SharedCard"> | string | null
    notes?: StringNullableFilter<"SharedCard"> | string | null
    card_image_url?: StringNullableFilter<"SharedCard"> | string | null
    purchase_date?: DateTimeNullableFilter<"SharedCard"> | Date | string | null
    card_color?: StringNullableFilter<"SharedCard"> | string | null
    data?: StringNullableFilter<"SharedCard"> | string | null
    created_date?: DateTimeFilter<"SharedCard"> | Date | string
  }

  export type SharedCardOrderByWithRelationInput = {
    id?: SortOrder
    card_id?: SortOrder
    user_email?: SortOrderInput | SortOrder
    shared_with?: SortOrderInput | SortOrder
    group_id?: SortOrderInput | SortOrder
    shared_with_group_id?: SortOrderInput | SortOrder
    created_by?: SortOrderInput | SortOrder
    balance?: SortOrderInput | SortOrder
    card_name?: SortOrderInput | SortOrder
    vendor?: SortOrderInput | SortOrder
    expiry_date?: SortOrderInput | SortOrder
    card_type?: SortOrderInput | SortOrder
    card_number?: SortOrderInput | SortOrder
    cvv?: SortOrderInput | SortOrder
    activation_code?: SortOrderInput | SortOrder
    online_page_url?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    card_image_url?: SortOrderInput | SortOrder
    purchase_date?: SortOrderInput | SortOrder
    card_color?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    created_date?: SortOrder
  }

  export type SharedCardWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SharedCardWhereInput | SharedCardWhereInput[]
    OR?: SharedCardWhereInput[]
    NOT?: SharedCardWhereInput | SharedCardWhereInput[]
    card_id?: IntFilter<"SharedCard"> | number
    user_email?: StringNullableFilter<"SharedCard"> | string | null
    shared_with?: StringNullableFilter<"SharedCard"> | string | null
    group_id?: IntNullableFilter<"SharedCard"> | number | null
    shared_with_group_id?: IntNullableFilter<"SharedCard"> | number | null
    created_by?: StringNullableFilter<"SharedCard"> | string | null
    balance?: IntNullableFilter<"SharedCard"> | number | null
    card_name?: StringNullableFilter<"SharedCard"> | string | null
    vendor?: StringNullableFilter<"SharedCard"> | string | null
    expiry_date?: DateTimeNullableFilter<"SharedCard"> | Date | string | null
    card_type?: StringNullableFilter<"SharedCard"> | string | null
    card_number?: StringNullableFilter<"SharedCard"> | string | null
    cvv?: StringNullableFilter<"SharedCard"> | string | null
    activation_code?: StringNullableFilter<"SharedCard"> | string | null
    online_page_url?: StringNullableFilter<"SharedCard"> | string | null
    notes?: StringNullableFilter<"SharedCard"> | string | null
    card_image_url?: StringNullableFilter<"SharedCard"> | string | null
    purchase_date?: DateTimeNullableFilter<"SharedCard"> | Date | string | null
    card_color?: StringNullableFilter<"SharedCard"> | string | null
    data?: StringNullableFilter<"SharedCard"> | string | null
    created_date?: DateTimeFilter<"SharedCard"> | Date | string
  }, "id">

  export type SharedCardOrderByWithAggregationInput = {
    id?: SortOrder
    card_id?: SortOrder
    user_email?: SortOrderInput | SortOrder
    shared_with?: SortOrderInput | SortOrder
    group_id?: SortOrderInput | SortOrder
    shared_with_group_id?: SortOrderInput | SortOrder
    created_by?: SortOrderInput | SortOrder
    balance?: SortOrderInput | SortOrder
    card_name?: SortOrderInput | SortOrder
    vendor?: SortOrderInput | SortOrder
    expiry_date?: SortOrderInput | SortOrder
    card_type?: SortOrderInput | SortOrder
    card_number?: SortOrderInput | SortOrder
    cvv?: SortOrderInput | SortOrder
    activation_code?: SortOrderInput | SortOrder
    online_page_url?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    card_image_url?: SortOrderInput | SortOrder
    purchase_date?: SortOrderInput | SortOrder
    card_color?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    created_date?: SortOrder
    _count?: SharedCardCountOrderByAggregateInput
    _avg?: SharedCardAvgOrderByAggregateInput
    _max?: SharedCardMaxOrderByAggregateInput
    _min?: SharedCardMinOrderByAggregateInput
    _sum?: SharedCardSumOrderByAggregateInput
  }

  export type SharedCardScalarWhereWithAggregatesInput = {
    AND?: SharedCardScalarWhereWithAggregatesInput | SharedCardScalarWhereWithAggregatesInput[]
    OR?: SharedCardScalarWhereWithAggregatesInput[]
    NOT?: SharedCardScalarWhereWithAggregatesInput | SharedCardScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SharedCard"> | number
    card_id?: IntWithAggregatesFilter<"SharedCard"> | number
    user_email?: StringNullableWithAggregatesFilter<"SharedCard"> | string | null
    shared_with?: StringNullableWithAggregatesFilter<"SharedCard"> | string | null
    group_id?: IntNullableWithAggregatesFilter<"SharedCard"> | number | null
    shared_with_group_id?: IntNullableWithAggregatesFilter<"SharedCard"> | number | null
    created_by?: StringNullableWithAggregatesFilter<"SharedCard"> | string | null
    balance?: IntNullableWithAggregatesFilter<"SharedCard"> | number | null
    card_name?: StringNullableWithAggregatesFilter<"SharedCard"> | string | null
    vendor?: StringNullableWithAggregatesFilter<"SharedCard"> | string | null
    expiry_date?: DateTimeNullableWithAggregatesFilter<"SharedCard"> | Date | string | null
    card_type?: StringNullableWithAggregatesFilter<"SharedCard"> | string | null
    card_number?: StringNullableWithAggregatesFilter<"SharedCard"> | string | null
    cvv?: StringNullableWithAggregatesFilter<"SharedCard"> | string | null
    activation_code?: StringNullableWithAggregatesFilter<"SharedCard"> | string | null
    online_page_url?: StringNullableWithAggregatesFilter<"SharedCard"> | string | null
    notes?: StringNullableWithAggregatesFilter<"SharedCard"> | string | null
    card_image_url?: StringNullableWithAggregatesFilter<"SharedCard"> | string | null
    purchase_date?: DateTimeNullableWithAggregatesFilter<"SharedCard"> | Date | string | null
    card_color?: StringNullableWithAggregatesFilter<"SharedCard"> | string | null
    data?: StringNullableWithAggregatesFilter<"SharedCard"> | string | null
    created_date?: DateTimeWithAggregatesFilter<"SharedCard"> | Date | string
  }

  export type UserCardTypeWhereInput = {
    AND?: UserCardTypeWhereInput | UserCardTypeWhereInput[]
    OR?: UserCardTypeWhereInput[]
    NOT?: UserCardTypeWhereInput | UserCardTypeWhereInput[]
    id?: IntFilter<"UserCardType"> | number
    user_email?: StringFilter<"UserCardType"> | string
    name?: StringNullableFilter<"UserCardType"> | string | null
    color?: StringNullableFilter<"UserCardType"> | string | null
    type_color?: StringNullableFilter<"UserCardType"> | string | null
    supported_stores?: StringNullableFilter<"UserCardType"> | string | null
  }

  export type UserCardTypeOrderByWithRelationInput = {
    id?: SortOrder
    user_email?: SortOrder
    name?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    type_color?: SortOrderInput | SortOrder
    supported_stores?: SortOrderInput | SortOrder
  }

  export type UserCardTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserCardTypeWhereInput | UserCardTypeWhereInput[]
    OR?: UserCardTypeWhereInput[]
    NOT?: UserCardTypeWhereInput | UserCardTypeWhereInput[]
    user_email?: StringFilter<"UserCardType"> | string
    name?: StringNullableFilter<"UserCardType"> | string | null
    color?: StringNullableFilter<"UserCardType"> | string | null
    type_color?: StringNullableFilter<"UserCardType"> | string | null
    supported_stores?: StringNullableFilter<"UserCardType"> | string | null
  }, "id">

  export type UserCardTypeOrderByWithAggregationInput = {
    id?: SortOrder
    user_email?: SortOrder
    name?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    type_color?: SortOrderInput | SortOrder
    supported_stores?: SortOrderInput | SortOrder
    _count?: UserCardTypeCountOrderByAggregateInput
    _avg?: UserCardTypeAvgOrderByAggregateInput
    _max?: UserCardTypeMaxOrderByAggregateInput
    _min?: UserCardTypeMinOrderByAggregateInput
    _sum?: UserCardTypeSumOrderByAggregateInput
  }

  export type UserCardTypeScalarWhereWithAggregatesInput = {
    AND?: UserCardTypeScalarWhereWithAggregatesInput | UserCardTypeScalarWhereWithAggregatesInput[]
    OR?: UserCardTypeScalarWhereWithAggregatesInput[]
    NOT?: UserCardTypeScalarWhereWithAggregatesInput | UserCardTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserCardType"> | number
    user_email?: StringWithAggregatesFilter<"UserCardType"> | string
    name?: StringNullableWithAggregatesFilter<"UserCardType"> | string | null
    color?: StringNullableWithAggregatesFilter<"UserCardType"> | string | null
    type_color?: StringNullableWithAggregatesFilter<"UserCardType"> | string | null
    supported_stores?: StringNullableWithAggregatesFilter<"UserCardType"> | string | null
  }

  export type CardActivityLogWhereInput = {
    AND?: CardActivityLogWhereInput | CardActivityLogWhereInput[]
    OR?: CardActivityLogWhereInput[]
    NOT?: CardActivityLogWhereInput | CardActivityLogWhereInput[]
    id?: IntFilter<"CardActivityLog"> | number
    card_id?: IntNullableFilter<"CardActivityLog"> | number | null
    card_type_field?: StringNullableFilter<"CardActivityLog"> | string | null
    action?: StringFilter<"CardActivityLog"> | string
    user_email?: StringNullableFilter<"CardActivityLog"> | string | null
    user_name?: StringNullableFilter<"CardActivityLog"> | string | null
    details?: StringNullableFilter<"CardActivityLog"> | string | null
    card_data?: StringNullableFilter<"CardActivityLog"> | string | null
    before_data?: StringNullableFilter<"CardActivityLog"> | string | null
    timestamp?: DateTimeFilter<"CardActivityLog"> | Date | string
  }

  export type CardActivityLogOrderByWithRelationInput = {
    id?: SortOrder
    card_id?: SortOrderInput | SortOrder
    card_type_field?: SortOrderInput | SortOrder
    action?: SortOrder
    user_email?: SortOrderInput | SortOrder
    user_name?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    card_data?: SortOrderInput | SortOrder
    before_data?: SortOrderInput | SortOrder
    timestamp?: SortOrder
  }

  export type CardActivityLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CardActivityLogWhereInput | CardActivityLogWhereInput[]
    OR?: CardActivityLogWhereInput[]
    NOT?: CardActivityLogWhereInput | CardActivityLogWhereInput[]
    card_id?: IntNullableFilter<"CardActivityLog"> | number | null
    card_type_field?: StringNullableFilter<"CardActivityLog"> | string | null
    action?: StringFilter<"CardActivityLog"> | string
    user_email?: StringNullableFilter<"CardActivityLog"> | string | null
    user_name?: StringNullableFilter<"CardActivityLog"> | string | null
    details?: StringNullableFilter<"CardActivityLog"> | string | null
    card_data?: StringNullableFilter<"CardActivityLog"> | string | null
    before_data?: StringNullableFilter<"CardActivityLog"> | string | null
    timestamp?: DateTimeFilter<"CardActivityLog"> | Date | string
  }, "id">

  export type CardActivityLogOrderByWithAggregationInput = {
    id?: SortOrder
    card_id?: SortOrderInput | SortOrder
    card_type_field?: SortOrderInput | SortOrder
    action?: SortOrder
    user_email?: SortOrderInput | SortOrder
    user_name?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    card_data?: SortOrderInput | SortOrder
    before_data?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: CardActivityLogCountOrderByAggregateInput
    _avg?: CardActivityLogAvgOrderByAggregateInput
    _max?: CardActivityLogMaxOrderByAggregateInput
    _min?: CardActivityLogMinOrderByAggregateInput
    _sum?: CardActivityLogSumOrderByAggregateInput
  }

  export type CardActivityLogScalarWhereWithAggregatesInput = {
    AND?: CardActivityLogScalarWhereWithAggregatesInput | CardActivityLogScalarWhereWithAggregatesInput[]
    OR?: CardActivityLogScalarWhereWithAggregatesInput[]
    NOT?: CardActivityLogScalarWhereWithAggregatesInput | CardActivityLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CardActivityLog"> | number
    card_id?: IntNullableWithAggregatesFilter<"CardActivityLog"> | number | null
    card_type_field?: StringNullableWithAggregatesFilter<"CardActivityLog"> | string | null
    action?: StringWithAggregatesFilter<"CardActivityLog"> | string
    user_email?: StringNullableWithAggregatesFilter<"CardActivityLog"> | string | null
    user_name?: StringNullableWithAggregatesFilter<"CardActivityLog"> | string | null
    details?: StringNullableWithAggregatesFilter<"CardActivityLog"> | string | null
    card_data?: StringNullableWithAggregatesFilter<"CardActivityLog"> | string | null
    before_data?: StringNullableWithAggregatesFilter<"CardActivityLog"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"CardActivityLog"> | Date | string
  }

  export type ArchiveRequestWhereInput = {
    AND?: ArchiveRequestWhereInput | ArchiveRequestWhereInput[]
    OR?: ArchiveRequestWhereInput[]
    NOT?: ArchiveRequestWhereInput | ArchiveRequestWhereInput[]
    id?: IntFilter<"ArchiveRequest"> | number
    card_id?: IntNullableFilter<"ArchiveRequest"> | number | null
    requester_email?: StringNullableFilter<"ArchiveRequest"> | string | null
    status?: StringNullableFilter<"ArchiveRequest"> | string | null
    details?: StringNullableFilter<"ArchiveRequest"> | string | null
    createdAt?: DateTimeFilter<"ArchiveRequest"> | Date | string
  }

  export type ArchiveRequestOrderByWithRelationInput = {
    id?: SortOrder
    card_id?: SortOrderInput | SortOrder
    requester_email?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type ArchiveRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ArchiveRequestWhereInput | ArchiveRequestWhereInput[]
    OR?: ArchiveRequestWhereInput[]
    NOT?: ArchiveRequestWhereInput | ArchiveRequestWhereInput[]
    card_id?: IntNullableFilter<"ArchiveRequest"> | number | null
    requester_email?: StringNullableFilter<"ArchiveRequest"> | string | null
    status?: StringNullableFilter<"ArchiveRequest"> | string | null
    details?: StringNullableFilter<"ArchiveRequest"> | string | null
    createdAt?: DateTimeFilter<"ArchiveRequest"> | Date | string
  }, "id">

  export type ArchiveRequestOrderByWithAggregationInput = {
    id?: SortOrder
    card_id?: SortOrderInput | SortOrder
    requester_email?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ArchiveRequestCountOrderByAggregateInput
    _avg?: ArchiveRequestAvgOrderByAggregateInput
    _max?: ArchiveRequestMaxOrderByAggregateInput
    _min?: ArchiveRequestMinOrderByAggregateInput
    _sum?: ArchiveRequestSumOrderByAggregateInput
  }

  export type ArchiveRequestScalarWhereWithAggregatesInput = {
    AND?: ArchiveRequestScalarWhereWithAggregatesInput | ArchiveRequestScalarWhereWithAggregatesInput[]
    OR?: ArchiveRequestScalarWhereWithAggregatesInput[]
    NOT?: ArchiveRequestScalarWhereWithAggregatesInput | ArchiveRequestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ArchiveRequest"> | number
    card_id?: IntNullableWithAggregatesFilter<"ArchiveRequest"> | number | null
    requester_email?: StringNullableWithAggregatesFilter<"ArchiveRequest"> | string | null
    status?: StringNullableWithAggregatesFilter<"ArchiveRequest"> | string | null
    details?: StringNullableWithAggregatesFilter<"ArchiveRequest"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ArchiveRequest"> | Date | string
  }

  export type GroupWhereInput = {
    AND?: GroupWhereInput | GroupWhereInput[]
    OR?: GroupWhereInput[]
    NOT?: GroupWhereInput | GroupWhereInput[]
    id?: IntFilter<"Group"> | number
    name?: StringFilter<"Group"> | string
    group_name?: StringNullableFilter<"Group"> | string | null
    members?: StringNullableFilter<"Group"> | string | null
    created_by?: StringNullableFilter<"Group"> | string | null
    owner_email?: StringNullableFilter<"Group"> | string | null
    created_date?: DateTimeFilter<"Group"> | Date | string
  }

  export type GroupOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    group_name?: SortOrderInput | SortOrder
    members?: SortOrderInput | SortOrder
    created_by?: SortOrderInput | SortOrder
    owner_email?: SortOrderInput | SortOrder
    created_date?: SortOrder
  }

  export type GroupWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GroupWhereInput | GroupWhereInput[]
    OR?: GroupWhereInput[]
    NOT?: GroupWhereInput | GroupWhereInput[]
    name?: StringFilter<"Group"> | string
    group_name?: StringNullableFilter<"Group"> | string | null
    members?: StringNullableFilter<"Group"> | string | null
    created_by?: StringNullableFilter<"Group"> | string | null
    owner_email?: StringNullableFilter<"Group"> | string | null
    created_date?: DateTimeFilter<"Group"> | Date | string
  }, "id">

  export type GroupOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    group_name?: SortOrderInput | SortOrder
    members?: SortOrderInput | SortOrder
    created_by?: SortOrderInput | SortOrder
    owner_email?: SortOrderInput | SortOrder
    created_date?: SortOrder
    _count?: GroupCountOrderByAggregateInput
    _avg?: GroupAvgOrderByAggregateInput
    _max?: GroupMaxOrderByAggregateInput
    _min?: GroupMinOrderByAggregateInput
    _sum?: GroupSumOrderByAggregateInput
  }

  export type GroupScalarWhereWithAggregatesInput = {
    AND?: GroupScalarWhereWithAggregatesInput | GroupScalarWhereWithAggregatesInput[]
    OR?: GroupScalarWhereWithAggregatesInput[]
    NOT?: GroupScalarWhereWithAggregatesInput | GroupScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Group"> | number
    name?: StringWithAggregatesFilter<"Group"> | string
    group_name?: StringNullableWithAggregatesFilter<"Group"> | string | null
    members?: StringNullableWithAggregatesFilter<"Group"> | string | null
    created_by?: StringNullableWithAggregatesFilter<"Group"> | string | null
    owner_email?: StringNullableWithAggregatesFilter<"Group"> | string | null
    created_date?: DateTimeWithAggregatesFilter<"Group"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: IntFilter<"Notification"> | number
    card_id?: IntNullableFilter<"Notification"> | number | null
    card_name?: StringNullableFilter<"Notification"> | string | null
    recipient_email?: StringNullableFilter<"Notification"> | string | null
    notification_type?: StringNullableFilter<"Notification"> | string | null
    is_read?: BoolFilter<"Notification"> | boolean
    is_dismissed?: BoolFilter<"Notification"> | boolean
    data?: StringNullableFilter<"Notification"> | string | null
    created_date?: DateTimeFilter<"Notification"> | Date | string
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    card_id?: SortOrderInput | SortOrder
    card_name?: SortOrderInput | SortOrder
    recipient_email?: SortOrderInput | SortOrder
    notification_type?: SortOrderInput | SortOrder
    is_read?: SortOrder
    is_dismissed?: SortOrder
    data?: SortOrderInput | SortOrder
    created_date?: SortOrder
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    card_id?: IntNullableFilter<"Notification"> | number | null
    card_name?: StringNullableFilter<"Notification"> | string | null
    recipient_email?: StringNullableFilter<"Notification"> | string | null
    notification_type?: StringNullableFilter<"Notification"> | string | null
    is_read?: BoolFilter<"Notification"> | boolean
    is_dismissed?: BoolFilter<"Notification"> | boolean
    data?: StringNullableFilter<"Notification"> | string | null
    created_date?: DateTimeFilter<"Notification"> | Date | string
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    card_id?: SortOrderInput | SortOrder
    card_name?: SortOrderInput | SortOrder
    recipient_email?: SortOrderInput | SortOrder
    notification_type?: SortOrderInput | SortOrder
    is_read?: SortOrder
    is_dismissed?: SortOrder
    data?: SortOrderInput | SortOrder
    created_date?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notification"> | number
    card_id?: IntNullableWithAggregatesFilter<"Notification"> | number | null
    card_name?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    recipient_email?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    notification_type?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    is_read?: BoolWithAggregatesFilter<"Notification"> | boolean
    is_dismissed?: BoolWithAggregatesFilter<"Notification"> | boolean
    data?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    created_date?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type StoreWhereInput = {
    AND?: StoreWhereInput | StoreWhereInput[]
    OR?: StoreWhereInput[]
    NOT?: StoreWhereInput | StoreWhereInput[]
    id?: IntFilter<"Store"> | number
    name?: StringFilter<"Store"> | string
    description?: StringNullableFilter<"Store"> | string | null
    website?: StringNullableFilter<"Store"> | string | null
    logo_url?: StringNullableFilter<"Store"> | string | null
    category?: StringNullableFilter<"Store"> | string | null
    is_active?: BoolFilter<"Store"> | boolean
    created_by?: StringNullableFilter<"Store"> | string | null
    created_date?: DateTimeFilter<"Store"> | Date | string
    updated_date?: DateTimeFilter<"Store"> | Date | string
  }

  export type StoreOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    logo_url?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    is_active?: SortOrder
    created_by?: SortOrderInput | SortOrder
    created_date?: SortOrder
    updated_date?: SortOrder
  }

  export type StoreWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: StoreWhereInput | StoreWhereInput[]
    OR?: StoreWhereInput[]
    NOT?: StoreWhereInput | StoreWhereInput[]
    description?: StringNullableFilter<"Store"> | string | null
    website?: StringNullableFilter<"Store"> | string | null
    logo_url?: StringNullableFilter<"Store"> | string | null
    category?: StringNullableFilter<"Store"> | string | null
    is_active?: BoolFilter<"Store"> | boolean
    created_by?: StringNullableFilter<"Store"> | string | null
    created_date?: DateTimeFilter<"Store"> | Date | string
    updated_date?: DateTimeFilter<"Store"> | Date | string
  }, "id" | "name">

  export type StoreOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    logo_url?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    is_active?: SortOrder
    created_by?: SortOrderInput | SortOrder
    created_date?: SortOrder
    updated_date?: SortOrder
    _count?: StoreCountOrderByAggregateInput
    _avg?: StoreAvgOrderByAggregateInput
    _max?: StoreMaxOrderByAggregateInput
    _min?: StoreMinOrderByAggregateInput
    _sum?: StoreSumOrderByAggregateInput
  }

  export type StoreScalarWhereWithAggregatesInput = {
    AND?: StoreScalarWhereWithAggregatesInput | StoreScalarWhereWithAggregatesInput[]
    OR?: StoreScalarWhereWithAggregatesInput[]
    NOT?: StoreScalarWhereWithAggregatesInput | StoreScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Store"> | number
    name?: StringWithAggregatesFilter<"Store"> | string
    description?: StringNullableWithAggregatesFilter<"Store"> | string | null
    website?: StringNullableWithAggregatesFilter<"Store"> | string | null
    logo_url?: StringNullableWithAggregatesFilter<"Store"> | string | null
    category?: StringNullableWithAggregatesFilter<"Store"> | string | null
    is_active?: BoolWithAggregatesFilter<"Store"> | boolean
    created_by?: StringNullableWithAggregatesFilter<"Store"> | string | null
    created_date?: DateTimeWithAggregatesFilter<"Store"> | Date | string
    updated_date?: DateTimeWithAggregatesFilter<"Store"> | Date | string
  }

  export type UserCreateInput = {
    email: string
    password?: string | null
    name: string
    googleId?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password?: string | null
    name: string
    googleId?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password?: string | null
    name: string
    googleId?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GiftCardCreateInput = {
    card_name: string
    vendor?: string | null
    balance?: number | null
    expiry_date?: Date | string | null
    is_archived?: boolean
    card_type?: string | null
    card_number?: string | null
    cvv?: string | null
    activation_code?: string | null
    online_page_url?: string | null
    notes?: string | null
    card_image_url?: string | null
    purchase_date?: Date | string | null
    card_color?: string | null
    created_by?: string | null
    owner_email?: string | null
    created_date?: Date | string
    updated_date?: Date | string
  }

  export type GiftCardUncheckedCreateInput = {
    id?: number
    card_name: string
    vendor?: string | null
    balance?: number | null
    expiry_date?: Date | string | null
    is_archived?: boolean
    card_type?: string | null
    card_number?: string | null
    cvv?: string | null
    activation_code?: string | null
    online_page_url?: string | null
    notes?: string | null
    card_image_url?: string | null
    purchase_date?: Date | string | null
    card_color?: string | null
    created_by?: string | null
    owner_email?: string | null
    created_date?: Date | string
    updated_date?: Date | string
  }

  export type GiftCardUpdateInput = {
    card_name?: StringFieldUpdateOperationsInput | string
    vendor?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: NullableIntFieldUpdateOperationsInput | number | null
    expiry_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_archived?: BoolFieldUpdateOperationsInput | boolean
    card_type?: NullableStringFieldUpdateOperationsInput | string | null
    card_number?: NullableStringFieldUpdateOperationsInput | string | null
    cvv?: NullableStringFieldUpdateOperationsInput | string | null
    activation_code?: NullableStringFieldUpdateOperationsInput | string | null
    online_page_url?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    card_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    card_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    owner_email?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GiftCardUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    card_name?: StringFieldUpdateOperationsInput | string
    vendor?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: NullableIntFieldUpdateOperationsInput | number | null
    expiry_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_archived?: BoolFieldUpdateOperationsInput | boolean
    card_type?: NullableStringFieldUpdateOperationsInput | string | null
    card_number?: NullableStringFieldUpdateOperationsInput | string | null
    cvv?: NullableStringFieldUpdateOperationsInput | string | null
    activation_code?: NullableStringFieldUpdateOperationsInput | string | null
    online_page_url?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    card_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    card_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    owner_email?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GiftCardCreateManyInput = {
    id?: number
    card_name: string
    vendor?: string | null
    balance?: number | null
    expiry_date?: Date | string | null
    is_archived?: boolean
    card_type?: string | null
    card_number?: string | null
    cvv?: string | null
    activation_code?: string | null
    online_page_url?: string | null
    notes?: string | null
    card_image_url?: string | null
    purchase_date?: Date | string | null
    card_color?: string | null
    created_by?: string | null
    owner_email?: string | null
    created_date?: Date | string
    updated_date?: Date | string
  }

  export type GiftCardUpdateManyMutationInput = {
    card_name?: StringFieldUpdateOperationsInput | string
    vendor?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: NullableIntFieldUpdateOperationsInput | number | null
    expiry_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_archived?: BoolFieldUpdateOperationsInput | boolean
    card_type?: NullableStringFieldUpdateOperationsInput | string | null
    card_number?: NullableStringFieldUpdateOperationsInput | string | null
    cvv?: NullableStringFieldUpdateOperationsInput | string | null
    activation_code?: NullableStringFieldUpdateOperationsInput | string | null
    online_page_url?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    card_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    card_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    owner_email?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GiftCardUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    card_name?: StringFieldUpdateOperationsInput | string
    vendor?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: NullableIntFieldUpdateOperationsInput | number | null
    expiry_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_archived?: BoolFieldUpdateOperationsInput | boolean
    card_type?: NullableStringFieldUpdateOperationsInput | string | null
    card_number?: NullableStringFieldUpdateOperationsInput | string | null
    cvv?: NullableStringFieldUpdateOperationsInput | string | null
    activation_code?: NullableStringFieldUpdateOperationsInput | string | null
    online_page_url?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    card_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    card_color?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    owner_email?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateInput = {
    gift_card_id: number
    amount: number
    note?: string | null
    user_email?: string | null
    timestamp?: Date | string
  }

  export type TransactionUncheckedCreateInput = {
    id?: number
    gift_card_id: number
    amount: number
    note?: string | null
    user_email?: string | null
    timestamp?: Date | string
  }

  export type TransactionUpdateInput = {
    gift_card_id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    gift_card_id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateManyInput = {
    id?: number
    gift_card_id: number
    amount: number
    note?: string | null
    user_email?: string | null
    timestamp?: Date | string
  }

  export type TransactionUpdateManyMutationInput = {
    gift_card_id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    gift_card_id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GiftCardTypeCreateInput = {
    name: string
    color?: string | null
  }

  export type GiftCardTypeUncheckedCreateInput = {
    id?: number
    name: string
    color?: string | null
  }

  export type GiftCardTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GiftCardTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GiftCardTypeCreateManyInput = {
    id?: number
    name: string
    color?: string | null
  }

  export type GiftCardTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GiftCardTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ArchivedCardCreateInput = {
    original_card_id?: number | null
    card_name?: string | null
    shared_with_email?: string | null
    shared_with_group_id?: number | null
    created_by?: string | null
    data?: string | null
    archived_date?: Date | string
    created_date?: Date | string
  }

  export type ArchivedCardUncheckedCreateInput = {
    id?: number
    original_card_id?: number | null
    card_name?: string | null
    shared_with_email?: string | null
    shared_with_group_id?: number | null
    created_by?: string | null
    data?: string | null
    archived_date?: Date | string
    created_date?: Date | string
  }

  export type ArchivedCardUpdateInput = {
    original_card_id?: NullableIntFieldUpdateOperationsInput | number | null
    card_name?: NullableStringFieldUpdateOperationsInput | string | null
    shared_with_email?: NullableStringFieldUpdateOperationsInput | string | null
    shared_with_group_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableStringFieldUpdateOperationsInput | string | null
    archived_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArchivedCardUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    original_card_id?: NullableIntFieldUpdateOperationsInput | number | null
    card_name?: NullableStringFieldUpdateOperationsInput | string | null
    shared_with_email?: NullableStringFieldUpdateOperationsInput | string | null
    shared_with_group_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableStringFieldUpdateOperationsInput | string | null
    archived_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArchivedCardCreateManyInput = {
    id?: number
    original_card_id?: number | null
    card_name?: string | null
    shared_with_email?: string | null
    shared_with_group_id?: number | null
    created_by?: string | null
    data?: string | null
    archived_date?: Date | string
    created_date?: Date | string
  }

  export type ArchivedCardUpdateManyMutationInput = {
    original_card_id?: NullableIntFieldUpdateOperationsInput | number | null
    card_name?: NullableStringFieldUpdateOperationsInput | string | null
    shared_with_email?: NullableStringFieldUpdateOperationsInput | string | null
    shared_with_group_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableStringFieldUpdateOperationsInput | string | null
    archived_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArchivedCardUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    original_card_id?: NullableIntFieldUpdateOperationsInput | number | null
    card_name?: NullableStringFieldUpdateOperationsInput | string | null
    shared_with_email?: NullableStringFieldUpdateOperationsInput | string | null
    shared_with_group_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableStringFieldUpdateOperationsInput | string | null
    archived_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SharedCardCreateInput = {
    card_id: number
    user_email?: string | null
    shared_with?: string | null
    group_id?: number | null
    shared_with_group_id?: number | null
    created_by?: string | null
    balance?: number | null
    card_name?: string | null
    vendor?: string | null
    expiry_date?: Date | string | null
    card_type?: string | null
    card_number?: string | null
    cvv?: string | null
    activation_code?: string | null
    online_page_url?: string | null
    notes?: string | null
    card_image_url?: string | null
    purchase_date?: Date | string | null
    card_color?: string | null
    data?: string | null
    created_date?: Date | string
  }

  export type SharedCardUncheckedCreateInput = {
    id?: number
    card_id: number
    user_email?: string | null
    shared_with?: string | null
    group_id?: number | null
    shared_with_group_id?: number | null
    created_by?: string | null
    balance?: number | null
    card_name?: string | null
    vendor?: string | null
    expiry_date?: Date | string | null
    card_type?: string | null
    card_number?: string | null
    cvv?: string | null
    activation_code?: string | null
    online_page_url?: string | null
    notes?: string | null
    card_image_url?: string | null
    purchase_date?: Date | string | null
    card_color?: string | null
    data?: string | null
    created_date?: Date | string
  }

  export type SharedCardUpdateInput = {
    card_id?: IntFieldUpdateOperationsInput | number
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    shared_with?: NullableStringFieldUpdateOperationsInput | string | null
    group_id?: NullableIntFieldUpdateOperationsInput | number | null
    shared_with_group_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: NullableIntFieldUpdateOperationsInput | number | null
    card_name?: NullableStringFieldUpdateOperationsInput | string | null
    vendor?: NullableStringFieldUpdateOperationsInput | string | null
    expiry_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    card_type?: NullableStringFieldUpdateOperationsInput | string | null
    card_number?: NullableStringFieldUpdateOperationsInput | string | null
    cvv?: NullableStringFieldUpdateOperationsInput | string | null
    activation_code?: NullableStringFieldUpdateOperationsInput | string | null
    online_page_url?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    card_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    card_color?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SharedCardUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    card_id?: IntFieldUpdateOperationsInput | number
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    shared_with?: NullableStringFieldUpdateOperationsInput | string | null
    group_id?: NullableIntFieldUpdateOperationsInput | number | null
    shared_with_group_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: NullableIntFieldUpdateOperationsInput | number | null
    card_name?: NullableStringFieldUpdateOperationsInput | string | null
    vendor?: NullableStringFieldUpdateOperationsInput | string | null
    expiry_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    card_type?: NullableStringFieldUpdateOperationsInput | string | null
    card_number?: NullableStringFieldUpdateOperationsInput | string | null
    cvv?: NullableStringFieldUpdateOperationsInput | string | null
    activation_code?: NullableStringFieldUpdateOperationsInput | string | null
    online_page_url?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    card_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    card_color?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SharedCardCreateManyInput = {
    id?: number
    card_id: number
    user_email?: string | null
    shared_with?: string | null
    group_id?: number | null
    shared_with_group_id?: number | null
    created_by?: string | null
    balance?: number | null
    card_name?: string | null
    vendor?: string | null
    expiry_date?: Date | string | null
    card_type?: string | null
    card_number?: string | null
    cvv?: string | null
    activation_code?: string | null
    online_page_url?: string | null
    notes?: string | null
    card_image_url?: string | null
    purchase_date?: Date | string | null
    card_color?: string | null
    data?: string | null
    created_date?: Date | string
  }

  export type SharedCardUpdateManyMutationInput = {
    card_id?: IntFieldUpdateOperationsInput | number
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    shared_with?: NullableStringFieldUpdateOperationsInput | string | null
    group_id?: NullableIntFieldUpdateOperationsInput | number | null
    shared_with_group_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: NullableIntFieldUpdateOperationsInput | number | null
    card_name?: NullableStringFieldUpdateOperationsInput | string | null
    vendor?: NullableStringFieldUpdateOperationsInput | string | null
    expiry_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    card_type?: NullableStringFieldUpdateOperationsInput | string | null
    card_number?: NullableStringFieldUpdateOperationsInput | string | null
    cvv?: NullableStringFieldUpdateOperationsInput | string | null
    activation_code?: NullableStringFieldUpdateOperationsInput | string | null
    online_page_url?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    card_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    card_color?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SharedCardUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    card_id?: IntFieldUpdateOperationsInput | number
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    shared_with?: NullableStringFieldUpdateOperationsInput | string | null
    group_id?: NullableIntFieldUpdateOperationsInput | number | null
    shared_with_group_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    balance?: NullableIntFieldUpdateOperationsInput | number | null
    card_name?: NullableStringFieldUpdateOperationsInput | string | null
    vendor?: NullableStringFieldUpdateOperationsInput | string | null
    expiry_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    card_type?: NullableStringFieldUpdateOperationsInput | string | null
    card_number?: NullableStringFieldUpdateOperationsInput | string | null
    cvv?: NullableStringFieldUpdateOperationsInput | string | null
    activation_code?: NullableStringFieldUpdateOperationsInput | string | null
    online_page_url?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    card_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    card_color?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCardTypeCreateInput = {
    user_email: string
    name?: string | null
    color?: string | null
    type_color?: string | null
    supported_stores?: string | null
  }

  export type UserCardTypeUncheckedCreateInput = {
    id?: number
    user_email: string
    name?: string | null
    color?: string | null
    type_color?: string | null
    supported_stores?: string | null
  }

  export type UserCardTypeUpdateInput = {
    user_email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    type_color?: NullableStringFieldUpdateOperationsInput | string | null
    supported_stores?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCardTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    type_color?: NullableStringFieldUpdateOperationsInput | string | null
    supported_stores?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCardTypeCreateManyInput = {
    id?: number
    user_email: string
    name?: string | null
    color?: string | null
    type_color?: string | null
    supported_stores?: string | null
  }

  export type UserCardTypeUpdateManyMutationInput = {
    user_email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    type_color?: NullableStringFieldUpdateOperationsInput | string | null
    supported_stores?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCardTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    type_color?: NullableStringFieldUpdateOperationsInput | string | null
    supported_stores?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CardActivityLogCreateInput = {
    card_id?: number | null
    card_type_field?: string | null
    action: string
    user_email?: string | null
    user_name?: string | null
    details?: string | null
    card_data?: string | null
    before_data?: string | null
    timestamp?: Date | string
  }

  export type CardActivityLogUncheckedCreateInput = {
    id?: number
    card_id?: number | null
    card_type_field?: string | null
    action: string
    user_email?: string | null
    user_name?: string | null
    details?: string | null
    card_data?: string | null
    before_data?: string | null
    timestamp?: Date | string
  }

  export type CardActivityLogUpdateInput = {
    card_id?: NullableIntFieldUpdateOperationsInput | number | null
    card_type_field?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    user_name?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    card_data?: NullableStringFieldUpdateOperationsInput | string | null
    before_data?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CardActivityLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    card_id?: NullableIntFieldUpdateOperationsInput | number | null
    card_type_field?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    user_name?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    card_data?: NullableStringFieldUpdateOperationsInput | string | null
    before_data?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CardActivityLogCreateManyInput = {
    id?: number
    card_id?: number | null
    card_type_field?: string | null
    action: string
    user_email?: string | null
    user_name?: string | null
    details?: string | null
    card_data?: string | null
    before_data?: string | null
    timestamp?: Date | string
  }

  export type CardActivityLogUpdateManyMutationInput = {
    card_id?: NullableIntFieldUpdateOperationsInput | number | null
    card_type_field?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    user_name?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    card_data?: NullableStringFieldUpdateOperationsInput | string | null
    before_data?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CardActivityLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    card_id?: NullableIntFieldUpdateOperationsInput | number | null
    card_type_field?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    user_email?: NullableStringFieldUpdateOperationsInput | string | null
    user_name?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    card_data?: NullableStringFieldUpdateOperationsInput | string | null
    before_data?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArchiveRequestCreateInput = {
    card_id?: number | null
    requester_email?: string | null
    status?: string | null
    details?: string | null
    createdAt?: Date | string
  }

  export type ArchiveRequestUncheckedCreateInput = {
    id?: number
    card_id?: number | null
    requester_email?: string | null
    status?: string | null
    details?: string | null
    createdAt?: Date | string
  }

  export type ArchiveRequestUpdateInput = {
    card_id?: NullableIntFieldUpdateOperationsInput | number | null
    requester_email?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArchiveRequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    card_id?: NullableIntFieldUpdateOperationsInput | number | null
    requester_email?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArchiveRequestCreateManyInput = {
    id?: number
    card_id?: number | null
    requester_email?: string | null
    status?: string | null
    details?: string | null
    createdAt?: Date | string
  }

  export type ArchiveRequestUpdateManyMutationInput = {
    card_id?: NullableIntFieldUpdateOperationsInput | number | null
    requester_email?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArchiveRequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    card_id?: NullableIntFieldUpdateOperationsInput | number | null
    requester_email?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupCreateInput = {
    name: string
    group_name?: string | null
    members?: string | null
    created_by?: string | null
    owner_email?: string | null
    created_date?: Date | string
  }

  export type GroupUncheckedCreateInput = {
    id?: number
    name: string
    group_name?: string | null
    members?: string | null
    created_by?: string | null
    owner_email?: string | null
    created_date?: Date | string
  }

  export type GroupUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    group_name?: NullableStringFieldUpdateOperationsInput | string | null
    members?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    owner_email?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    group_name?: NullableStringFieldUpdateOperationsInput | string | null
    members?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    owner_email?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupCreateManyInput = {
    id?: number
    name: string
    group_name?: string | null
    members?: string | null
    created_by?: string | null
    owner_email?: string | null
    created_date?: Date | string
  }

  export type GroupUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    group_name?: NullableStringFieldUpdateOperationsInput | string | null
    members?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    owner_email?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    group_name?: NullableStringFieldUpdateOperationsInput | string | null
    members?: NullableStringFieldUpdateOperationsInput | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    owner_email?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    card_id?: number | null
    card_name?: string | null
    recipient_email?: string | null
    notification_type?: string | null
    is_read?: boolean
    is_dismissed?: boolean
    data?: string | null
    created_date?: Date | string
  }

  export type NotificationUncheckedCreateInput = {
    id?: number
    card_id?: number | null
    card_name?: string | null
    recipient_email?: string | null
    notification_type?: string | null
    is_read?: boolean
    is_dismissed?: boolean
    data?: string | null
    created_date?: Date | string
  }

  export type NotificationUpdateInput = {
    card_id?: NullableIntFieldUpdateOperationsInput | number | null
    card_name?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_email?: NullableStringFieldUpdateOperationsInput | string | null
    notification_type?: NullableStringFieldUpdateOperationsInput | string | null
    is_read?: BoolFieldUpdateOperationsInput | boolean
    is_dismissed?: BoolFieldUpdateOperationsInput | boolean
    data?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    card_id?: NullableIntFieldUpdateOperationsInput | number | null
    card_name?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_email?: NullableStringFieldUpdateOperationsInput | string | null
    notification_type?: NullableStringFieldUpdateOperationsInput | string | null
    is_read?: BoolFieldUpdateOperationsInput | boolean
    is_dismissed?: BoolFieldUpdateOperationsInput | boolean
    data?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: number
    card_id?: number | null
    card_name?: string | null
    recipient_email?: string | null
    notification_type?: string | null
    is_read?: boolean
    is_dismissed?: boolean
    data?: string | null
    created_date?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    card_id?: NullableIntFieldUpdateOperationsInput | number | null
    card_name?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_email?: NullableStringFieldUpdateOperationsInput | string | null
    notification_type?: NullableStringFieldUpdateOperationsInput | string | null
    is_read?: BoolFieldUpdateOperationsInput | boolean
    is_dismissed?: BoolFieldUpdateOperationsInput | boolean
    data?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    card_id?: NullableIntFieldUpdateOperationsInput | number | null
    card_name?: NullableStringFieldUpdateOperationsInput | string | null
    recipient_email?: NullableStringFieldUpdateOperationsInput | string | null
    notification_type?: NullableStringFieldUpdateOperationsInput | string | null
    is_read?: BoolFieldUpdateOperationsInput | boolean
    is_dismissed?: BoolFieldUpdateOperationsInput | boolean
    data?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreCreateInput = {
    name: string
    description?: string | null
    website?: string | null
    logo_url?: string | null
    category?: string | null
    is_active?: boolean
    created_by?: string | null
    created_date?: Date | string
    updated_date?: Date | string
  }

  export type StoreUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    website?: string | null
    logo_url?: string | null
    category?: string | null
    is_active?: boolean
    created_by?: string | null
    created_date?: Date | string
    updated_date?: Date | string
  }

  export type StoreUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    website?: string | null
    logo_url?: string | null
    category?: string | null
    is_active?: boolean
    created_by?: string | null
    created_date?: Date | string
    updated_date?: Date | string
  }

  export type StoreUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    googleId?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetExpires?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    googleId?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetExpires?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    googleId?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetExpires?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type GiftCardCountOrderByAggregateInput = {
    id?: SortOrder
    card_name?: SortOrder
    vendor?: SortOrder
    balance?: SortOrder
    expiry_date?: SortOrder
    is_archived?: SortOrder
    card_type?: SortOrder
    card_number?: SortOrder
    cvv?: SortOrder
    activation_code?: SortOrder
    online_page_url?: SortOrder
    notes?: SortOrder
    card_image_url?: SortOrder
    purchase_date?: SortOrder
    card_color?: SortOrder
    created_by?: SortOrder
    owner_email?: SortOrder
    created_date?: SortOrder
    updated_date?: SortOrder
  }

  export type GiftCardAvgOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
  }

  export type GiftCardMaxOrderByAggregateInput = {
    id?: SortOrder
    card_name?: SortOrder
    vendor?: SortOrder
    balance?: SortOrder
    expiry_date?: SortOrder
    is_archived?: SortOrder
    card_type?: SortOrder
    card_number?: SortOrder
    cvv?: SortOrder
    activation_code?: SortOrder
    online_page_url?: SortOrder
    notes?: SortOrder
    card_image_url?: SortOrder
    purchase_date?: SortOrder
    card_color?: SortOrder
    created_by?: SortOrder
    owner_email?: SortOrder
    created_date?: SortOrder
    updated_date?: SortOrder
  }

  export type GiftCardMinOrderByAggregateInput = {
    id?: SortOrder
    card_name?: SortOrder
    vendor?: SortOrder
    balance?: SortOrder
    expiry_date?: SortOrder
    is_archived?: SortOrder
    card_type?: SortOrder
    card_number?: SortOrder
    cvv?: SortOrder
    activation_code?: SortOrder
    online_page_url?: SortOrder
    notes?: SortOrder
    card_image_url?: SortOrder
    purchase_date?: SortOrder
    card_color?: SortOrder
    created_by?: SortOrder
    owner_email?: SortOrder
    created_date?: SortOrder
    updated_date?: SortOrder
  }

  export type GiftCardSumOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    gift_card_id?: SortOrder
    amount?: SortOrder
    note?: SortOrder
    user_email?: SortOrder
    timestamp?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    id?: SortOrder
    gift_card_id?: SortOrder
    amount?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    gift_card_id?: SortOrder
    amount?: SortOrder
    note?: SortOrder
    user_email?: SortOrder
    timestamp?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    gift_card_id?: SortOrder
    amount?: SortOrder
    note?: SortOrder
    user_email?: SortOrder
    timestamp?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    id?: SortOrder
    gift_card_id?: SortOrder
    amount?: SortOrder
  }

  export type GiftCardTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
  }

  export type GiftCardTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GiftCardTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
  }

  export type GiftCardTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
  }

  export type GiftCardTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ArchivedCardCountOrderByAggregateInput = {
    id?: SortOrder
    original_card_id?: SortOrder
    card_name?: SortOrder
    shared_with_email?: SortOrder
    shared_with_group_id?: SortOrder
    created_by?: SortOrder
    data?: SortOrder
    archived_date?: SortOrder
    created_date?: SortOrder
  }

  export type ArchivedCardAvgOrderByAggregateInput = {
    id?: SortOrder
    original_card_id?: SortOrder
    shared_with_group_id?: SortOrder
  }

  export type ArchivedCardMaxOrderByAggregateInput = {
    id?: SortOrder
    original_card_id?: SortOrder
    card_name?: SortOrder
    shared_with_email?: SortOrder
    shared_with_group_id?: SortOrder
    created_by?: SortOrder
    data?: SortOrder
    archived_date?: SortOrder
    created_date?: SortOrder
  }

  export type ArchivedCardMinOrderByAggregateInput = {
    id?: SortOrder
    original_card_id?: SortOrder
    card_name?: SortOrder
    shared_with_email?: SortOrder
    shared_with_group_id?: SortOrder
    created_by?: SortOrder
    data?: SortOrder
    archived_date?: SortOrder
    created_date?: SortOrder
  }

  export type ArchivedCardSumOrderByAggregateInput = {
    id?: SortOrder
    original_card_id?: SortOrder
    shared_with_group_id?: SortOrder
  }

  export type SharedCardCountOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
    user_email?: SortOrder
    shared_with?: SortOrder
    group_id?: SortOrder
    shared_with_group_id?: SortOrder
    created_by?: SortOrder
    balance?: SortOrder
    card_name?: SortOrder
    vendor?: SortOrder
    expiry_date?: SortOrder
    card_type?: SortOrder
    card_number?: SortOrder
    cvv?: SortOrder
    activation_code?: SortOrder
    online_page_url?: SortOrder
    notes?: SortOrder
    card_image_url?: SortOrder
    purchase_date?: SortOrder
    card_color?: SortOrder
    data?: SortOrder
    created_date?: SortOrder
  }

  export type SharedCardAvgOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
    group_id?: SortOrder
    shared_with_group_id?: SortOrder
    balance?: SortOrder
  }

  export type SharedCardMaxOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
    user_email?: SortOrder
    shared_with?: SortOrder
    group_id?: SortOrder
    shared_with_group_id?: SortOrder
    created_by?: SortOrder
    balance?: SortOrder
    card_name?: SortOrder
    vendor?: SortOrder
    expiry_date?: SortOrder
    card_type?: SortOrder
    card_number?: SortOrder
    cvv?: SortOrder
    activation_code?: SortOrder
    online_page_url?: SortOrder
    notes?: SortOrder
    card_image_url?: SortOrder
    purchase_date?: SortOrder
    card_color?: SortOrder
    data?: SortOrder
    created_date?: SortOrder
  }

  export type SharedCardMinOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
    user_email?: SortOrder
    shared_with?: SortOrder
    group_id?: SortOrder
    shared_with_group_id?: SortOrder
    created_by?: SortOrder
    balance?: SortOrder
    card_name?: SortOrder
    vendor?: SortOrder
    expiry_date?: SortOrder
    card_type?: SortOrder
    card_number?: SortOrder
    cvv?: SortOrder
    activation_code?: SortOrder
    online_page_url?: SortOrder
    notes?: SortOrder
    card_image_url?: SortOrder
    purchase_date?: SortOrder
    card_color?: SortOrder
    data?: SortOrder
    created_date?: SortOrder
  }

  export type SharedCardSumOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
    group_id?: SortOrder
    shared_with_group_id?: SortOrder
    balance?: SortOrder
  }

  export type UserCardTypeCountOrderByAggregateInput = {
    id?: SortOrder
    user_email?: SortOrder
    name?: SortOrder
    color?: SortOrder
    type_color?: SortOrder
    supported_stores?: SortOrder
  }

  export type UserCardTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserCardTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    user_email?: SortOrder
    name?: SortOrder
    color?: SortOrder
    type_color?: SortOrder
    supported_stores?: SortOrder
  }

  export type UserCardTypeMinOrderByAggregateInput = {
    id?: SortOrder
    user_email?: SortOrder
    name?: SortOrder
    color?: SortOrder
    type_color?: SortOrder
    supported_stores?: SortOrder
  }

  export type UserCardTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CardActivityLogCountOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
    card_type_field?: SortOrder
    action?: SortOrder
    user_email?: SortOrder
    user_name?: SortOrder
    details?: SortOrder
    card_data?: SortOrder
    before_data?: SortOrder
    timestamp?: SortOrder
  }

  export type CardActivityLogAvgOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
  }

  export type CardActivityLogMaxOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
    card_type_field?: SortOrder
    action?: SortOrder
    user_email?: SortOrder
    user_name?: SortOrder
    details?: SortOrder
    card_data?: SortOrder
    before_data?: SortOrder
    timestamp?: SortOrder
  }

  export type CardActivityLogMinOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
    card_type_field?: SortOrder
    action?: SortOrder
    user_email?: SortOrder
    user_name?: SortOrder
    details?: SortOrder
    card_data?: SortOrder
    before_data?: SortOrder
    timestamp?: SortOrder
  }

  export type CardActivityLogSumOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
  }

  export type ArchiveRequestCountOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
    requester_email?: SortOrder
    status?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type ArchiveRequestAvgOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
  }

  export type ArchiveRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
    requester_email?: SortOrder
    status?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type ArchiveRequestMinOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
    requester_email?: SortOrder
    status?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type ArchiveRequestSumOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
  }

  export type GroupCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    group_name?: SortOrder
    members?: SortOrder
    created_by?: SortOrder
    owner_email?: SortOrder
    created_date?: SortOrder
  }

  export type GroupAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GroupMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    group_name?: SortOrder
    members?: SortOrder
    created_by?: SortOrder
    owner_email?: SortOrder
    created_date?: SortOrder
  }

  export type GroupMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    group_name?: SortOrder
    members?: SortOrder
    created_by?: SortOrder
    owner_email?: SortOrder
    created_date?: SortOrder
  }

  export type GroupSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
    card_name?: SortOrder
    recipient_email?: SortOrder
    notification_type?: SortOrder
    is_read?: SortOrder
    is_dismissed?: SortOrder
    data?: SortOrder
    created_date?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
    card_name?: SortOrder
    recipient_email?: SortOrder
    notification_type?: SortOrder
    is_read?: SortOrder
    is_dismissed?: SortOrder
    data?: SortOrder
    created_date?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
    card_name?: SortOrder
    recipient_email?: SortOrder
    notification_type?: SortOrder
    is_read?: SortOrder
    is_dismissed?: SortOrder
    data?: SortOrder
    created_date?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
    card_id?: SortOrder
  }

  export type StoreCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    website?: SortOrder
    logo_url?: SortOrder
    category?: SortOrder
    is_active?: SortOrder
    created_by?: SortOrder
    created_date?: SortOrder
    updated_date?: SortOrder
  }

  export type StoreAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StoreMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    website?: SortOrder
    logo_url?: SortOrder
    category?: SortOrder
    is_active?: SortOrder
    created_by?: SortOrder
    created_date?: SortOrder
    updated_date?: SortOrder
  }

  export type StoreMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    website?: SortOrder
    logo_url?: SortOrder
    category?: SortOrder
    is_active?: SortOrder
    created_by?: SortOrder
    created_date?: SortOrder
    updated_date?: SortOrder
  }

  export type StoreSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GiftCardDefaultArgs instead
     */
    export type GiftCardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GiftCardDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TransactionDefaultArgs instead
     */
    export type TransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TransactionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GiftCardTypeDefaultArgs instead
     */
    export type GiftCardTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GiftCardTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ArchivedCardDefaultArgs instead
     */
    export type ArchivedCardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ArchivedCardDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SharedCardDefaultArgs instead
     */
    export type SharedCardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SharedCardDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCardTypeDefaultArgs instead
     */
    export type UserCardTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCardTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CardActivityLogDefaultArgs instead
     */
    export type CardActivityLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CardActivityLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ArchiveRequestDefaultArgs instead
     */
    export type ArchiveRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ArchiveRequestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GroupDefaultArgs instead
     */
    export type GroupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GroupDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StoreDefaultArgs instead
     */
    export type StoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StoreDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}